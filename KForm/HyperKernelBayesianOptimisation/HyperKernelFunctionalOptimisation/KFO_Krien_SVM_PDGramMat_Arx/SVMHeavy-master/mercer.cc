
//
// Basic kernel class
//
// Version: 7
// Date: 08/04/2016
// Written by: Alistair Shilton (AlShilton@gmail.com)
// Copyright: all rights reserved
//

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <math.h>
#include "mercer.h"
#include "awarestream.h"



//Adding kernels: search for ADDHERE


svmvolatile SparseVector<kernPrecursor *>* kernPrecursor::fullmllist = NULL;
svmvolatile svm_mutex kernPrecursor::kerneyelock;



// Constructors and assignment operators

MercerKernel::MercerKernel()
{
    thisthis = this;
    thisthisthis = &thisthis;

    isind      = 0;
    isshift    = 0;
    isprod     = 0;
    isdiffalt  = 1;
    isfullnorm = 0;

    leftplain  = 0;
    rightplain = 0;

    xisfast     = -1;
    xneedsInner = -1;
    xneedsDiff  = -1;
    xneedsNorm  = -1;

    gentype tempsampdist("[ ]");

    xnumsamples   = DEFAULT_NUMKERNSAMP;
    xsampdist     = tempsampdist;
    xnumSplits    = 0;
    xnumMulSplits = 0;

    dtype.resize(1);
    isnorm.resize(1);
    ischain.resize(1);
    issplit.resize(1);
    mulsplit.resize(1);
    ismagterm.resize(1);
    kernflags.resize(1);
    altcallback.resize(1);

    dRealConstants.resize(1);
    dIntConstants.resize(1);
    dRealOverwrite.resize(1);
    dIntOverwrite.resize(1);

    k900sock.resize(1);
    k900sock = (awarestream *) NULL;

    dShiftProd        = 0;
    dShiftProdNoConj  = 0;
    dShiftProdRevConj = 0;

    xproddepth      = 4; // Needs to be 4 for the K4 optimisations to work properly
    enchurn         = 0;
    xsuggestXYcache = 0;
    xisIPdiffered   = 0;

    altcallback = MLid();

    setType(2,0);          // quadratic kernel, default parameters
    setUnNormalised(0);    // not normalised
    setUnChained(0);       // not chained
    setUnSplit(0);         // not split
    setUnMulSplit(0);      // not split
    setUnMagTerm(0);       // not magnitude term

    dRealOverwrite("&",0).zero();
    dIntOverwrite("&",0).zero();

    return;
}

MercerKernel::MercerKernel(const MercerKernel &src)
{
    thisthis = this;
    thisthisthis = &thisthis;

    *this = src;

    return;
}

MercerKernel::~MercerKernel()
{
    kill900channel();

    return;
}

MercerKernel &MercerKernel::operator=(const MercerKernel &src)
{
    kill900channel();

    k900sock = src.k900sock;
    k900sock = (awarestream *) NULL;

    isprod               = src.isprod;
    isind                = src.isind;
    isfullnorm           = src.isfullnorm;
    isshift              = src.isshift;
    leftplain            = src.leftplain;
    rightplain           = src.rightplain;
    isdiffalt            = src.isdiffalt;
    xproddepth           = src.xproddepth;
    enchurn              = src.enchurn;
    xsuggestXYcache      = src.xsuggestXYcache;
    xisIPdiffered        = src.xisIPdiffered;
    xnumSplits           = src.xnumSplits;
    xnumMulSplits        = src.xnumMulSplits;

    dtype                = src.dtype;
    isnorm               = src.isnorm;
    ischain              = src.ischain;
    issplit              = src.issplit;
    mulsplit             = src.mulsplit;
    ismagterm            = src.ismagterm;
    dIndexes             = src.dIndexes;
    kernflags            = src.kernflags;
    dRealConstants       = src.dRealConstants;
    dIntConstants        = src.dIntConstants;
    dRealOverwrite       = src.dRealOverwrite;
    dIntOverwrite        = src.dIntOverwrite;
    altcallback          = src.altcallback;

    dShift               = src.dShift;
    dScale               = src.dScale;
    dShiftProd           = src.dShiftProd;
    dShiftProdNoConj     = src.dShiftProdNoConj;
    dShiftProdRevConj    = src.dShiftProdRevConj;

    xnumsamples          = src.xnumsamples;
    xindsub              = src.xindsub;
    xsampdist            = src.xsampdist;

    combinedOverwriteSrc = src.combinedOverwriteSrc;
    backupisind          = src.backupisind;
    backupdIndexes       = src.backupdIndexes;

    xisfast              = src.xisfast;
    xneedsInner          = src.xneedsInner;
    xneedsDiff           = src.xneedsDiff;
    xneedsNorm           = src.xneedsNorm;

    return *this;
}


















int MercerKernel::getSymmetry(void) const
{
//ADDHERE - returns +1 if K(x,y) = conj(K(y,x))
//                  -1 if K(x,y) = -conj(K(y,x))
//                  0  otherwise
    int res = 2;
    int q;

    //FIXME: technically symmetry can be maintained in more general cases
    //       for chained kernels.  This won't give bad results, but may
    //       report no symmetry when symmetry is in fact present.

    for ( q = 0 ; ( q < size() ) && res ; q++ )
    {
        switch ( cType(q) )
        {
            case 17: case 27: case 901: case 904: case 907: case 910:
            {
                if ( res == 2 )
                {
                    res = -1;
                }

                else
                {
                    res = 0;
                }

                break;
            }

            case 28:
            case 400: case 401: case 402: case 403: case 404:
            case 450: case 451: case 452: case 453: case 454:
            case 600: case 601: case 602: case 603: case 604:
            case 650: case 651: case 652: case 653: case 654:
            case 902: case 905: case 908: case 911:
            {
                res = 0;

                break;
            }

            default:
            {
                if ( ( res == 2 ) || ( res == +1 ) )
                {
                    res = +1;
                }

                else
                {
                    res = 0;
                }

                break;
            }
        }
    }

    return ( res == 2 ) ? 0 : res;
}

int MercerKernel::iskern(int potind) const
{
//ADDHERE - returns 1 if kernel index exists, 0 otherwise
    switch ( potind )
    {
        case 0:   case 1:   case 2:   case 3:   case 4:
        case 5:   case 6:   case 7:   case 8:   case 9:
        case 10:  case 11:  case 12:  case 13:  case 14:
        case 15:  case 16:  case 17:  case 18:  case 19:
        case 20:  case 21:  case 22:  case 23:  case 24:
        case 25:  case 26:  case 27:  case 28:  case 29:
        case 30:  case 31:  case 32:  case 33:  case 34:
        case 35:  case 36:  case 37:  case 38:  case 39:
        case 40:  case 41:  case 42:  case 43:  case 44:
        case 45:  case 46:  case 47:  case 48:
        case 100: case 101: case 102: case 103: case 104:
        case 105: case 106:
        case 200: case 201: case 202: case 203: case 204:
        case 205: case 206:
        case 300: case 301: case 302: case 303: case 304:
        case 400: case 401: case 402: case 403: case 404:
        case 450: case 451: case 452: case 453: case 454:
        case 500: case 501: case 502: case 503: case 504:
        case 550: case 551: case 552: case 553: case 554:
        case 600: case 601: case 602: case 603: case 604:
        case 650: case 651: case 652: case 653: case 654:
        case 700: case 701: case 702: case 703: case 704:
        case 750: case 751: case 752: case 753: case 754:
        case 800: case 801: case 802: case 803: case 804:
        case 805: case 806: case 807: case 808: case 809:
        case 810: case 811: case 812: case 813: case 814:
        case 815: case 816: case 817: case 818: case 819:
        case 820: case 821: case 822: case 823: case 824:
        case 825: case 826: case 827: case 828: case 829:
        case 830: case 831: case 832: case 833: case 834:
        case 835: case 836: case 837: case 838: case 839:
        case 840: case 841: case 842: case 843: case 844:
        case 845: case 846: case 847: case 848: case 849:
        case 850: case 851: case 852: case 853: case 854:
        case 855: case 856: case 857: case 858: case 859:
        case 860: case 861: case 862: case 863: case 864:
        case 865: case 866: case 867: case 868: case 869:
        case 870: case 871: case 872: case 873: case 874:
        case 875: case 876: case 877: case 878: case 879:
        case 880: case 881: case 882: case 883: case 884:
        case 885: case 886: case 887: case 888: case 889:
        case 890: case 891: case 892: case 893: case 894:
        case 895: case 896: case 897: case 898: case 899:
        case 900: case 901: case 902: case 903: case 904:
        case 905: case 906: case 907: case 908: case 909:
        case 910: case 911:
        {
            return 1;
        }

        default:
        {
            break;
        }
    }

    return 0;
}

int calcDenseDerivPair(int q)
{
//ADDHERE: need to register kernel pairs
    if ( q == 400 ) { return 500; }
    if ( q == 401 ) { return 501; }
    if ( q == 402 ) { return 502; }
    if ( q == 403 ) { return 503; }
    if ( q == 404 ) { return 504; }
    if ( q == 450 ) { return 550; }
    if ( q == 451 ) { return 551; }
    if ( q == 452 ) { return 552; }
    if ( q == 453 ) { return 553; }
    if ( q == 454 ) { return 554; }

    if ( q == 600 ) { return 700; }
    if ( q == 601 ) { return 701; }
    if ( q == 602 ) { return 702; }
    if ( q == 603 ) { return 703; }
    if ( q == 604 ) { return 704; }
    if ( q == 650 ) { return 750; }
    if ( q == 651 ) { return 751; }
    if ( q == 652 ) { return 752; }
    if ( q == 653 ) { return 753; }
    if ( q == 654 ) { return 754; }

    return -1;
}

int calcDenseIntPair(int q)
{
//ADDHERE: need to register kernel pairs
    if ( q == 500 ) { return 400; }
    if ( q == 501 ) { return 401; }
    if ( q == 502 ) { return 402; }
    if ( q == 503 ) { return 403; }
    if ( q == 504 ) { return 404; }
    if ( q == 550 ) { return 450; }
    if ( q == 551 ) { return 451; }
    if ( q == 552 ) { return 452; }
    if ( q == 553 ) { return 453; }
    if ( q == 554 ) { return 454; }

    if ( q == 700 ) { return 600; }
    if ( q == 701 ) { return 601; }
    if ( q == 702 ) { return 602; }
    if ( q == 703 ) { return 603; }
    if ( q == 704 ) { return 604; }
    if ( q == 750 ) { return 650; }
    if ( q == 751 ) { return 651; }
    if ( q == 752 ) { return 652; }
    if ( q == 753 ) { return 653; }
    if ( q == 754 ) { return 654; }

    return -1;
}







// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================

// Modifiers:

MercerKernel &MercerKernel::add(int q)
{
    NiceAssert( ( q >= 0 ) && ( q <= size() ) );

    xisfast     = -1;
    xneedsInner = -1;
    xneedsDiff  = -1;
    xneedsNorm  = -1;

    dtype.add(q);
    isnorm.add(q);
    ischain.add(q);
    issplit.add(q);
    mulsplit.add(q);
    ismagterm.add(q);
    kernflags.add(q);
    altcallback.add(q);

    dRealConstants.add(q);
    dIntConstants.add(q);
    dRealOverwrite.add(q);
    dIntOverwrite.add(q);

    k900sock.add(q);

    altcallback("&",q) = MLid();

    setType(0,q);          // constant kernel, default parameters
    setUnNormalised(q);    // not normalised
    setUnChained(q);       // not chained
    setUnSplit(q);         // not split
    setUnMulSplit(q);      // not split
    setUnMagTerm(q);       // not magnitude term

    dRealOverwrite("&",q).zero();
    dIntOverwrite("&",q).zero();

    k900sock("&",q) = (awarestream *) NULL;

    return *this;
}

MercerKernel &MercerKernel::remove(int q)
{
    NiceAssert( ( q >= 0 ) && ( q < size() ) );

    xisfast     = -1;
    xneedsInner = -1;
    xneedsDiff  = -1;
    xneedsNorm  = -1;

    kill900channel(q);

    dtype.remove(q);
    isnorm.remove(q);
    ischain.remove(q);
    issplit.remove(q);
    mulsplit.remove(q);
    ismagterm.remove(q);
    kernflags.remove(q);
    altcallback.remove(q);

    dRealConstants.remove(q);
    dIntConstants.remove(q);
    dRealOverwrite.remove(q);
    dIntOverwrite.remove(q);

    k900sock.remove(q);

    fixcombinedOverwriteSrc();

    return *this;
}

MercerKernel &MercerKernel::resize(int nsize)
{
    NiceAssert( nsize >= 0 );

    xisfast     = -1;
    xneedsInner = -1;
    xneedsDiff  = -1;
    xneedsNorm  = -1;

    int oldsize = size();
    int q;

    if ( nsize < oldsize )
    {
        for ( q = oldsize ; q < nsize ; q++ )
        {
            kill900channel(q);
        }
    }

    dtype.resize(nsize);
    isnorm.resize(nsize);
    ischain.resize(nsize);
    issplit.resize(nsize);
    mulsplit.resize(nsize);
    ismagterm.resize(nsize);
    kernflags.resize(nsize);
    altcallback.resize(nsize);

    dRealConstants.resize(nsize);
    dIntConstants.resize(nsize);
    dRealOverwrite.resize(nsize);
    dIntOverwrite.resize(nsize);

    k900sock.resize(nsize);

    if ( oldsize < size() )
    {
	for ( q = oldsize ; q < size() ; q++ )
	{
            altcallback("&",q) = MLid();

            k900sock("&",q) = (awarestream *) NULL;

            setType(0,q);          // constant kernel, default parameters
	    setUnNormalised(q);    // not normalised
            setUnChained(q);       // not chained
            setUnSplit(q);         // not split
            setUnMulSplit(q);      // not split
            setUnMagTerm(q);       // not magnitude term

            dRealOverwrite("&",q).zero();
            dIntOverwrite("&",q).zero();
	}
    }

    fixcombinedOverwriteSrc();

    return *this;
}

//Settype - see below

MercerKernel &MercerKernel::setRealConstants(const Vector<gentype> &ndRealConstants, int q)
{
    NiceAssert( dRealConstants(q).size()-1 == ndRealConstants.size() );

    retVector<gentype> tmpva;

    dRealConstants("&",q)("&",1,1,dRealConstants(q).size()-1,tmpva) = ndRealConstants;

    return *this;
}

MercerKernel &MercerKernel::setIntConstants(const Vector<int> &ndIntConstants, int q)
{
    NiceAssert( dIntConstants(q).size() == ndIntConstants.size() );

    dIntConstants("&",q) = ndIntConstants;

    return *this;
}

MercerKernel &MercerKernel::setRealConstZero(double nv, int q)
{
    dRealConstants("&",q)("&",1) = nv;

    return *this;
}

MercerKernel &MercerKernel::setIntConstZero(int nv, int q)
{
    dIntConstants("&",q)("&",zeroint()) = nv;

    return *this;
}

MercerKernel &MercerKernel::setRealOverwrite(const SparseVector<int> &ndRealOverwrite, int q)
{
    dRealOverwrite("&",q) = ndRealOverwrite;

    fixcombinedOverwriteSrc();

    return *this;
}

MercerKernel &MercerKernel::setIntOverwrite(const SparseVector<int> &ndIntOverwrite, int q)
{
    dIntOverwrite("&",q) = ndIntOverwrite;

    fixcombinedOverwriteSrc();

    return *this;
}








// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================


// Element retrieval

gentype &MercerKernel::xelm(gentype &res, const SparseVector<gentype> &x, int i, int j) const
{
    (void) i;

    // FIXME: being lazy here and assuming no vector-level modification

    int isvalnz = 1;
    int xindis = x.ind(j);

    if ( isIndex() )
    {
        isvalnz = 0;

        if ( dIndexes.size() )
        {
            int l;

            for ( l = 0 ; l < dIndexes.size() ; l++ )
            {
                if ( dIndexes(l) == xindis )
                {
                    isvalnz = 1;
                    break;
                }
            }
        }
    }

    if ( isvalnz )
    {
        res = x.direcref(j);

        if ( isShifted() || isShiftedScaled() )
        {
            res -= dShift(xindis);
        }

        if ( ( isScaled() || isShiftedScaled() ) && ( dScale.isindpresent(j) ) )
        {
            res /= dScale(xindis);
        }
    }

    else
    {
        res = 0.0;
    }

    return res;
}

int MercerKernel::xindsize(const SparseVector<gentype> &x, int i) const
{
    (void) i;

    return x.nearindsize();
}

































// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================





























// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================

//extern Vector<gentype> &makeanRKHSVector(Vector<gentype> &res, const MercerKernel &kern, const SparseVector<gentype> &x, const gentype &a, int m);
Vector<gentype> &makeanRKHSVector(Vector<gentype> &res, const MercerKernel &kern, const SparseVector<gentype> &x, const gentype &a);
Vector<gentype> &makeanRKHSVector(Vector<gentype> &res, const MercerKernel &kern, const SparseVector<gentype> &x, const gentype &a, int m);


Vector<gentype> &MercerKernel::phim(int m, Vector<gentype> &res, const SparseVector<gentype> &x, int ia, int allowfinite, int xdim, int xconsist, int assumreal) const
{
    (void) ia;
    (void) xconsist;
    (void) assumreal;

    retVector<gentype> tmpva;

    const Vector<gentype> &r = dRealConstants(size()-1)(1,1,dRealConstants(size()-1).size()-1,tmpva);
    const Vector<int> &ic = dIntConstants(size()-1);

    int i;

    if ( allowfinite && isTrivialKernel() && ( cType(0) == 0 ) )
    {
        // K(x,y) = r1

        if ( res.infsize() )
        {
            static Vector<gentype> temp(1);

            res = temp;
        }

        (res.resize(1))("&",0) = sqrt(r(1));
    }

    else if ( allowfinite && isTrivialKernel() && ( ( cType(0) == 1 ) || ( cType(0) == 100 ) ) )
    {
        // K(x,y) = <x/r0,y/r0>

        if ( res.infsize() )
        {
            static Vector<gentype> temp;

            res = temp;
        }

        res.resize(xdim);

        for ( i = 0 ; i < xdim ; i++ )
        {
            res("&",i) = x(i);
            res("&",i) /= r(0);
        }
    }

    else if ( allowfinite && isTrivialKernel() && ( cType(0) == 2 ) )
    {
        // K(x,y) = ( r1 + <x/r0,y/r0> )^i0

        if ( res.infsize() )
        {
            static Vector<gentype> temp;

            res = temp;
        }

        SparseVector<gentype> tmp(x);

        tmp /= r(0);
        tmp("&",xdim) = sqrt(r(1));

        kronpow(res,tmp,xdim+1,ic(0));
    }

    else
    {
        // Return as RKHS vector

        gentype a(1.0);

        makeanRKHSVector(res,*this,x,a,m);
    }

    return res;
}

Vector<double> &MercerKernel::phim(int m, Vector<double> &res, const SparseVector<gentype> &x, int ia, int allowfinite, int xdim, int xconsist, int assumreal) const
{
    (void) ia;
    (void) xconsist;
    (void) assumreal;
    (void) m;

    retVector<gentype> tmpva;

    const Vector<gentype> &r = dRealConstants(size()-1)(1,1,dRealConstants(size()-1).size()-1,tmpva);
    const Vector<int> &ic = dIntConstants(size()-1);

    int i;

    if ( allowfinite && isTrivialKernel() && ( cType(0) == 0 ) )
    {
        // K(x,y) = r1

        if ( res.infsize() )
        {
            static Vector<double> temp(1);

            res = temp;
        }

        (res.resize(1))("&",0) = (double) sqrt(r(1));
    }

    else if ( allowfinite && isTrivialKernel() && ( ( cType(0) == 1 ) || ( cType(0) == 100 ) ) )
    {
        // K(x,y) = <x/r0,y/r0>

        if ( res.infsize() )
        {
            static Vector<double> temp;

            res = temp;
        }

        res.resize(xdim);

        for ( i = 0 ; i < xdim ; i++ )
        {
            res("&",i)  = (double) x(i);
            res("&",i) /= (double) r(0);
        }
    }

    else if ( allowfinite && isTrivialKernel() && ( cType(0) == 2 ) )
    {
        // K(x,y) = ( r1 + <x/r0,y/r0> )^i0

        if ( res.infsize() )
        {
            static Vector<double> temp;

            res = temp;
        }

        SparseVector<gentype> tmp(x);

        tmp /= r(0);
        tmp("&",xdim) = sqrt(r(1));

        Vector<gentype> tempres;

        kronpow(tempres,tmp,xdim+1,ic(0));

        res.castassign(tempres);
    }

    else
    {
        // Return as RKHS vector

        throw("Can't return a double RKHS vector (only gentype RKHS defined)");
    }

    return res;
}

int MercerKernel::phidim(int allowfinite, int xdim) const
{
    const Vector<int> &ic = dIntConstants(size()-1);

    int res = -1; // This signifies default infdim vector, which is the default

    if ( allowfinite && isTrivialKernel() && ( cType(0) == 0 ) )
    {
        // K(x,y) = r1

        res = 1;
    }

    else if ( allowfinite && isTrivialKernel() && ( ( cType(0) == 1 ) || ( cType(0) == 100 ) ) )
    {
        // K(x,y) = <x/r0,y/r0>

        res = xdim;
    }

    else if ( allowfinite && isTrivialKernel() && ( cType(0) == 2 ) )
    {
        // K(x,y) = ( r1 + <x/r0,y/r0> )^i0

        res = pow(xdim+1,ic(0));
    }

    return res;
}


















// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================


void MercerKernel::K0i(gentype &res, 
                     const gentype &xyprod, 
                     int xdim, int densetype, int resmode, int mlid, int indstart, int indend) const
{
    NiceAssert( !densetype || ( size() == 1 ) );

    int startchain = 1;

    gentype Kxyres;
    gentype Kxyprev;

    gentype locdiffis;
    setzero(locdiffis);

    setzero(res);

    if ( indstart <= indend )
    {
        gentype diffis(0.0);

        if ( needsDiff() )
        {
            // Calculate ||x-y||^2 only as required

            diff0norm(diffis,xyprod);
        }

        int &q = indstart;

	for ( ; q <= indend ; q++ )
	{
            if ( isChained(q) )
            {
                NiceAssert( !( resmode & 0x80 ) );
                NiceAssert( !(kinf(q).usesVector) );
                NiceAssert( !(kinf(q).usesMinDiff) );
                NiceAssert( !(kinf(q).usesMaxDiff) );

                if ( startchain )
                {
                    startchain = 0;

                    K0(Kxyres,q,xyprod,diffis,0,xdim,densetype,resmode,mlid);
                }

                else
                {
                    NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );

                    qswap(Kxyprev,Kxyres);

                    //FIXME: check the Kyxres calculation here

                    K0(Kxyres,q,Kxyprev,locdiffis,1,xdim,densetype,resmode,mlid);
                }

                Kxyres *= cWeight(q);
            }

            else
            {
                if ( startchain )
                {
                    K0(Kxyres,q,xyprod,diffis,0,xdim,densetype,resmode,mlid);
                }

                else
                {
                    NiceAssert( !( resmode & 0x80 ) );
                    NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );
                    NiceAssert( !(kinf(q).usesVector) );
                    NiceAssert( !(kinf(q).usesMinDiff) );
                    NiceAssert( !(kinf(q).usesMaxDiff) );

                    startchain = 1;

                    qswap(Kxyprev,Kxyres);

                    K0(Kxyres,q,Kxyprev,locdiffis,1,xdim,densetype,resmode,mlid);
                }

                Kxyres *= cWeight(q);

                res += Kxyres;
            }

            //if ( isSplit(q) )
            //{
            //    q++;
            //    break;
            //}
	}
    }

    return;
}

void MercerKernel::K2i(gentype &res, 
                     const gentype &xyprod, const gentype &yxprod, 
                     const vecInfo &xinfo, const vecInfo &yinfo, 
                     const gentype &xnorm, const gentype &ynorm, 
                     const SparseVector<gentype> &x, const SparseVector<gentype> &y, 
                     int i, int j, 
                     int xdim, int densetype, int resmode, int mlid, int indstart, int indend, int assumreal) const
{

    NiceAssert( !densetype || ( size() == 1 ) );

    int startchain = 1;

    vecInfo Kxxresinfo,Kxxprevinfo;
    vecInfo Kyyresinfo,Kyyprevinfo;

    gentype Kxyres;
    gentype Kyxres;
    gentype &Kxxres = getmnorm(Kxxresinfo,x,2,0,assumreal);
    gentype &Kyyres = getmnorm(Kyyresinfo,y,2,0,assumreal);

    gentype Kxyprev;
    gentype Kyxprev;
    gentype &Kxxprev = getmnorm(Kxxprevinfo,x,2,0,assumreal);
    gentype &Kyyprev = getmnorm(Kxxprevinfo,x,2,0,assumreal);

    gentype locdiffis;
    setzero(locdiffis);

    //setzero(Kxyres);
    //setzero(Kyxres);
    //setzero(Kxxres);
    //setzero(Kyyres);

    //setzero(Kxyprev);
    //setzero(Kyxprev);
    //setzero(Kxxprev);
    //setzero(Kyyprev);

    setzero(res);

    if ( indstart <= indend )
    {
        gentype diffis(0.0);

        if ( needsDiff() )
        {
            // Calculate ||x-y||^2 only as required

            diff2norm(diffis,(xyprod+yxprod)/2.0,xnorm,ynorm);
        }

        int &q = indstart;

	for ( ; q <= indend ; q++ )
	{
            if ( isChained(q) )
            {
                NiceAssert( !( resmode & 0x80 ) );
                NiceAssert( !(kinf(q).usesVector) );
                NiceAssert( !(kinf(q).usesMinDiff) );
                NiceAssert( !(kinf(q).usesMaxDiff) );

                if ( startchain )
                {
                    startchain = 0;

                    K2(Kxyres,q,xyprod,yxprod,diffis,0,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,densetype,resmode,mlid);
                    Kyxres = Kxyres;      //FIXME: clearly, this breaks anions
                    K2(Kxxres,q,xnorm ,xnorm ,locdiffis,1,xinfo,xinfo,xnorm,xnorm,x,x,i,i,xdim,densetype,resmode,mlid);
                    K2(Kyyres,q,ynorm ,ynorm ,locdiffis,1,yinfo,yinfo,ynorm,ynorm,y,y,j,j,xdim,densetype,resmode,mlid);
                }

                else
                {
                    NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );

                    qswap(Kxyprev,Kxyres);
                    qswap(Kyxprev,Kyxres);

                    qswap(Kxxprevinfo,Kxxresinfo);
                    qswap(Kyyprevinfo,Kyyresinfo);

                    //FIXME: check the Kyxres calculation here

                    K2(Kxyres,q,Kxyprev,Kyxprev,locdiffis,1,Kxxprevinfo,Kyyprevinfo,Kxxprev,Kyyprev,x,y,i,j,xdim,densetype,resmode,mlid);
                    K2(Kyxres,q,Kyxprev,Kxyprev,locdiffis,1,Kyyprevinfo,Kxxprevinfo,Kyyprev,Kxxprev,y,x,j,i,xdim,densetype,resmode,mlid);
                    K2(Kxxres,q,Kxxprev,Kxxprev,locdiffis,1,Kxxprevinfo,Kxxprevinfo,Kxxprev,Kxxprev,x,x,i,i,xdim,densetype,resmode,mlid);
                    K2(Kyyres,q,Kyyprev,Kyyprev,locdiffis,1,Kyyprevinfo,Kyyprevinfo,Kyyprev,Kyyprev,y,y,j,j,xdim,densetype,resmode,mlid);
                }

                Kxyres *= cWeight(q);
                Kyxres *= cWeight(q);
                Kxxres *= cWeight(q);
                Kyyres *= cWeight(q);
            }

            else
            {
                if ( startchain )
                {
                    K2(Kxyres,q,xyprod,yxprod,diffis,0,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,densetype,resmode,mlid);
                }

                else
                {
                    NiceAssert( !( resmode & 0x80 ) );
                    NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );
                    NiceAssert( !(kinf(q).usesVector) );
                    NiceAssert( !(kinf(q).usesMinDiff) );
                    NiceAssert( !(kinf(q).usesMaxDiff) );

                    startchain = 1;

                    qswap(Kxyprev,Kxyres);
                    qswap(Kyxprev,Kyxres);

                    qswap(Kxxprevinfo,Kxxresinfo);
                    qswap(Kyyprevinfo,Kyyresinfo);

                    K2(Kxyres,q,Kxyprev,Kyxprev,locdiffis,1,Kxxprevinfo,Kxxprevinfo,Kxxprev,Kyyprev,x,y,i,j,xdim,densetype,resmode,mlid);
                }

                Kxyres *= cWeight(q);

                res += Kxyres;
            }

            //if ( isSplit(q) )
            //{
            //    q++;
            //    break;
            //}
	}
    }

    return;
}

void MercerKernel::K4i(gentype &res, 
                      const gentype &xyprod, 
                      const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, const vecInfo &xdinfo, 
                      const gentype &xanorm, const gentype &xbnorm, const gentype &xcnorm, const gentype &xdnorm, 
                      const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, const SparseVector<gentype> &xd, 
                      int ia, int ib, int ic, int id, 
                      int xdim, int densetype, int resmode, int mlid, 
                      double xy00, double xy10, double xy11, double xy20, double xy21, double xy22, double xy30, double xy31, double xy32, double xy33, const Vector<int> *s, int indstart, int indend, int assumreal) const
{
    NiceAssert( !densetype || ( size() == 1 ) );

    int startchain = 1;

    vecInfo Kaaresinfo,Kaaprevinfo;
    vecInfo Kbbresinfo,Kbbprevinfo;
    vecInfo Kccresinfo,Kccprevinfo;
    vecInfo Kddresinfo,Kddprevinfo;

    gentype Kxyres;
    gentype &Kaares = getmnorm(Kaaresinfo,xa,4,0,assumreal);
    gentype &Kbbres = getmnorm(Kbbresinfo,xb,4,0,assumreal);
    gentype &Kccres = getmnorm(Kccresinfo,xc,4,0,assumreal);
    gentype &Kddres = getmnorm(Kddresinfo,xd,4,0,assumreal);

    gentype Kxyprev;
    gentype &Kaaprev = getmnorm(Kaaprevinfo,xa,4,0,assumreal);
    gentype &Kbbprev = getmnorm(Kbbprevinfo,xb,4,0,assumreal);
    gentype &Kccprev = getmnorm(Kccprevinfo,xc,4,0,assumreal);
    gentype &Kddprev = getmnorm(Kddprevinfo,xd,4,0,assumreal);

    gentype locdiffis;
    setzero(locdiffis);

    setzero(Kxyres);
    setzero(Kaares);
    setzero(Kbbres);
    setzero(Kccres);
    setzero(Kddres);

    setzero(Kxyprev);
    setzero(Kaaprev);
    setzero(Kbbprev);
    setzero(Kccprev);
    setzero(Kddprev);

    setzero(res);

    if ( indstart <= indend )
    {
        gentype diffis(0.0);

        if ( needsDiff() )
        {
            diff4norm(diffis,xyprod,xanorm,xbnorm,xcnorm,xdnorm,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
        }
        
        int &q = indstart;

	for ( ; q <= indend ; q++ )
	{
            if ( isChained(q) )
            {
                NiceAssert( !( resmode & 0x80 ) );
                NiceAssert( !(kinf(q).usesVector) );
                NiceAssert( !(kinf(q).usesMinDiff) );
                NiceAssert( !(kinf(q).usesMaxDiff) );

                if ( startchain )
                {
                    startchain = 0;

                    K4(Kxyres,q,xyprod,diffis,0,xainfo,xbinfo,xcinfo,xdinfo,xanorm,xbnorm,xcnorm,xdnorm,xa,xb,xc,xd,ia,ib,ic,id,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);

                    K4(Kaares,q,xanorm,locdiffis,1,xainfo,xainfo,xainfo,xainfo,xanorm,xanorm,xanorm,xanorm,xa,xa,xa,xa,ia,ia,ia,ia,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                    K4(Kbbres,q,xbnorm,locdiffis,1,xbinfo,xbinfo,xbinfo,xbinfo,xbnorm,xbnorm,xbnorm,xbnorm,xb,xb,xb,xb,ib,ib,ib,ib,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                    K4(Kccres,q,xcnorm,locdiffis,1,xcinfo,xcinfo,xcinfo,xcinfo,xcnorm,xcnorm,xcnorm,xcnorm,xc,xc,xc,xc,ic,ic,ic,ic,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                    K4(Kddres,q,xdnorm,locdiffis,1,xdinfo,xdinfo,xdinfo,xdinfo,xdnorm,xdnorm,xdnorm,xdnorm,xd,xd,xd,xd,id,id,id,id,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                }

                else
                {
                    NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );
                    NiceAssert( !needsMatDiff() );

                    qswap(Kxyprev,Kxyres);

                    qswap(Kaaprevinfo,Kaaresinfo);
                    qswap(Kbbprevinfo,Kbbresinfo);
                    qswap(Kccprevinfo,Kccresinfo);
                    qswap(Kddprevinfo,Kddresinfo);

                    K4(Kxyres,q,Kxyprev,locdiffis,1,Kaaprevinfo,Kbbprevinfo,Kccprevinfo,Kddprevinfo,Kaaprev,Kbbprev,Kccprev,Kddprev,xa,xb,xc,xd,ia,ib,ic,id,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                    K4(Kaares,q,Kaaprev,locdiffis,1,Kaaprevinfo,Kaaprevinfo,Kaaprevinfo,Kaaprevinfo,Kaaprev,Kaaprev,Kaaprev,Kaaprev,xa,xa,xa,xa,ia,ia,ia,ia,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                    K4(Kbbres,q,Kbbprev,locdiffis,1,Kbbprevinfo,Kbbprevinfo,Kbbprevinfo,Kbbprevinfo,Kbbprev,Kbbprev,Kbbprev,Kbbprev,xb,xb,xb,xb,ib,ib,ib,ib,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                    K4(Kccres,q,Kccprev,locdiffis,1,Kccprevinfo,Kccprevinfo,Kccprevinfo,Kccprevinfo,Kccprev,Kccprev,Kccprev,Kccprev,xc,xc,xc,xc,ic,ic,ic,ic,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                    K4(Kddres,q,Kddprev,locdiffis,1,Kddprevinfo,Kddprevinfo,Kddprevinfo,Kddprevinfo,Kddprev,Kddprev,Kddprev,Kddprev,xd,xd,xd,xd,id,id,id,id,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                }

                Kxyres *= cWeight(q);
                Kaares *= cWeight(q);
                Kbbres *= cWeight(q);
                Kccres *= cWeight(q);
                Kddres *= cWeight(q);
            }

            else
            {
                if ( startchain )
                {
                    K4(Kxyres,q,xyprod,diffis,0,xainfo,xbinfo,xcinfo,xdinfo,xanorm,xbnorm,xcnorm,xdnorm,xa,xb,xc,xd,ia,ib,ic,id,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                }

                else
                {
                    NiceAssert( !( resmode & 0x80 ) );
                    NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );
                    NiceAssert( !needsMatDiff() );
                    NiceAssert( !(kinf(q).usesVector) );
                    NiceAssert( !(kinf(q).usesMinDiff) );
                    NiceAssert( !(kinf(q).usesMaxDiff) );

                    startchain = 1;

                    qswap(Kxyprev,Kxyres);

                    qswap(Kaaprevinfo,Kaaresinfo);
                    qswap(Kbbprevinfo,Kbbresinfo);
                    qswap(Kccprevinfo,Kccresinfo);
                    qswap(Kddprevinfo,Kddresinfo);

                    K4(Kxyres,q,Kxyprev,locdiffis,1,Kaaprevinfo,Kbbprevinfo,Kccprevinfo,Kddprevinfo,Kaaprev,Kbbprev,Kccprev,Kddprev,xa,xb,xc,xd,ia,ib,ic,id,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
                }

                Kxyres *= cWeight(q);

                res += Kxyres;
            }

            //if ( isSplit(q) )
            //{
            //    q++;
            //    break;
            //}
	}
    }

    return;
}

void MercerKernel::Kmi(gentype &res, 
                      const gentype &xyprod, 
                      Vector<const vecInfo *> &xinfo, 
                      Vector<const gentype *> &xnorm, 
                      Vector<const SparseVector<gentype> *> &x, 
                      Vector<int> &i, 
                      int xdim, int m, int densetype, int resmode, int mlid, 
                      const Matrix<double> &xy, const Vector<int> *s, int indstart, int indend, int assumreal) const
{
    NiceAssert( !densetype || ( size() == 1 ) );

    int j;
    int startchain = 1;

    gentype Kxyres,Kxyprev;

    gentype locdiffis;
    setzero(locdiffis);

    Vector<vecInfo> Kxxresinfo;
    Vector<vecInfo> Kxxprevinfo;

    Vector<gentype> Kxxres;
    Vector<gentype> Kxxprev;

    Vector<gentype *> Kxxresp(xnorm.size());
    Vector<gentype *> Kxxprevp(xnorm.size());

    Vector<const vecInfo *> Kxxprevinfop(xnorm.size());
    Vector<const gentype *> Kxxprevpp(xnorm.size());

    Vector<const vecInfo *> xxinfo(xinfo);
    Vector<const gentype *> xxnorm(xnorm);
    Vector<const SparseVector<gentype> *> xx(x);
    Vector<int> ii(i);

    for ( j = 0 ; j < m ; j++ )
    {
        Kxxresp ("&",j) = &getmnorm(Kxxresinfo ("&",j),*(x(j)),m,0,assumreal);
        Kxxprevp("&",j) = &getmnorm(Kxxprevinfo("&",j),*(x(j)),m,0,assumreal);

        Kxxprevpp   ("&",j) =  (Kxxprevp   (j));
        Kxxprevinfop("&",j) = &(Kxxprevinfo(j));
    }

    setzero(res);

    if ( indstart <= indend )
    {
        gentype diffis(0.0);

        if ( needsDiff() )
        {
            // Calculate ||x-y||^2 only as required

            diffmnorm(m,diffis,xyprod,xnorm,xy,s);
        }

        int &q = indstart;

	for ( ; q <= indend ; q++ )
	{
            if ( isChained(q) )
            {
                NiceAssert( !( resmode & 0x80 ) );
                NiceAssert( !(kinf(q).usesVector) );
                NiceAssert( !(kinf(q).usesMinDiff) );
                NiceAssert( !(kinf(q).usesMaxDiff) );

                if ( startchain )
                {
                    startchain = 0;

                    Km(Kxyres,q,xyprod,diffis,0,xinfo,xnorm,x,i,xdim,m,densetype,resmode,mlid,xy,s);

                    for ( j = 0 ; j < m ; j++ )
                    {
                        xxinfo = xinfo(j);
                        xxnorm = xnorm(j);
                        xx     = x(j);
                        ii     = i(j);

                        Km(Kxxres("&",j),q,*(xnorm(j)),locdiffis,1,xxinfo,xxnorm,xx,ii,xdim,m,densetype,resmode,mlid,xy,s);
                    }
                }

                else
                {
                    NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );
                    NiceAssert( !needsMatDiff() );

                    qswap(Kxyres,Kxyprev);

                    qswap(Kxxresinfo,Kxxprevinfo);

                    Km(Kxyres,q,Kxyprev,locdiffis,1,Kxxprevinfop,Kxxprevpp,x,i,xdim,m,densetype,resmode,mlid,xy,s);

                    for ( j = 0 ; j < m ; j++ )
                    {
                        xxinfo = &Kxxprevinfo(j);
                        xxnorm = Kxxprevp(j);
                        xx     = x(j);
                        ii     = i(j);

                        Km(Kxxres("&",j),q,*(Kxxprevp(j)),locdiffis,1,xxinfo,xxnorm,xx,ii,xdim,m,densetype,resmode,mlid,xy,s);
                    }
                }

                Kxyres *= cWeight(q);

                for ( j = 0 ; j < m ; j++ )
                {
                    Kxxres("&",j) *= cWeight(q);
                }
            }

            else
            {
                if ( startchain )
                {
                    Km(Kxyres,q,xyprod,diffis,0,xinfo,xnorm,x,i,xdim,m,densetype,resmode,mlid,xy,s);
                }

                else
                {
                    NiceAssert( !( resmode & 0x80 ) );
                    NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );
                    NiceAssert( !needsMatDiff() );
                    NiceAssert( !(kinf(q).usesVector) );
                    NiceAssert( !(kinf(q).usesMinDiff) );
                    NiceAssert( !(kinf(q).usesMaxDiff) );

                    startchain = 1;

                    qswap(Kxyres,Kxyprev);

                    qswap(Kxxresinfo,Kxxprevinfo);

                    Km(Kxyres,q,Kxyprev,locdiffis,1,Kxxprevinfop,Kxxprevpp,x,i,xdim,m,densetype,resmode,mlid,xy,s);
                }

                Kxyres *= cWeight(q);

                res += Kxyres;
            }

            //if ( isSplit(q) )
            //{
            //    q++;
            //    break;
            //}
	}
    }

    return;
}




















// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================

void MercerKernel::K0(gentype &res, int q, 
                     const gentype &xyprod, gentype &diffis, int recalcdiffis, 
                     int xdim, int densetype, int resmode, int mlid) const
{
    NiceAssert( !densetype || !isNormalised(q) );

    NiceAssert( q >= 0 );
    NiceAssert( q < size() );

    K0unnorm(res,q,xyprod,diffis,recalcdiffis,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::K2(gentype &res, int q, 
                     const gentype &xyprod, const gentype &yxprod, gentype &diffis, int recalcdiffis, 
                     const vecInfo &xinfo, const vecInfo &yinfo, const gentype &xnorm, const gentype &ynorm, 
                     const SparseVector<gentype> &x, const SparseVector<gentype> &y, 
                     int i, int j, 
                     int xdim, int densetype, int resmode, int mlid) const
{
    NiceAssert( !densetype || !isNormalised(q) );

    NiceAssert( q >= 0 );
    NiceAssert( q < size() );

    K2unnorm(res,q,xyprod,yxprod,diffis,recalcdiffis,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,densetype,resmode,mlid);

    if ( isNormalised(q) )
    {
        NiceAssert( !( resmode & 0x80 ) );

        gentype xkern,ykern;
        gentype locdiffis(0.0);

        K2unnorm(xkern,q,xnorm,xnorm,locdiffis,0,xinfo,xinfo,xnorm,xnorm,x,x,i,i,xdim,densetype,resmode,mlid);
        K2unnorm(ykern,q,ynorm,ynorm,locdiffis,0,yinfo,yinfo,ynorm,ynorm,y,y,j,j,xdim,densetype,resmode,mlid);

        OP_sqrt(xkern);
        OP_sqrt(ykern);

        xkern.inverse();
        ykern.inverse();

        // Following method used to allow for matrix-valued kernels.
        //
        // inv(sqrt(K(x,x)))*K(x,y)*inv(sqrt(K(y,y)))

        rightmult(xkern,res);
        leftmult (res,ykern);

        if ( testisvnan(res) )
        {
            res = 1.0;
        }
    }

    return;
}

void MercerKernel::K4(gentype &res, int q, 
                      const gentype &xyprod, gentype &diffis, int recalcdiffis, 
                      const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, const vecInfo &xdinfo, 
                      const gentype &xanorm, const gentype &xbnorm, const gentype &xcnorm, const gentype &xdnorm, 
                      const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, const SparseVector<gentype> &xd, 
                      int ia, int ib, int ic, int id, 
                      int xdim, int densetype, int resmode, int mlid, 
                      double xy00, double xy10, double xy11, double xy20, double xy21, double xy22, double xy30, double xy31, double xy32, double xy33, const Vector<int> *s) const
{
    NiceAssert( !densetype || !isNormalised(q) );

    NiceAssert( q >= 0 );
    NiceAssert( q < size() );

    K4unnorm(res,q,xyprod,diffis,recalcdiffis,xainfo,xbinfo,xcinfo,xdinfo,xanorm,xbnorm,xcnorm,xdnorm,xa,xb,xc,xd,ia,ib,ic,id,xdim,densetype,resmode,mlid,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);

    if ( isNormalised(q) )
    {
        NiceAssert( !( resmode & 0x80 ) );

        gentype xakern,xbkern,xckern,xdkern;
        gentype locdiffis(0.0);

        retMatrix<double> tmpma; 
        retVector<int> tmpva;

        K4unnorm(xakern,q,xanorm,locdiffis,1,xainfo,xainfo,xainfo,xainfo,xanorm,xanorm,xanorm,xanorm,xa,xa,xa,xa,ia,ia,ia,ia,xdim,densetype,resmode,mlid,xy00,xy00,xy00,xy00,xy00,xy00,xy00,xy00,xy00,xy00,s);
        K4unnorm(xbkern,q,xbnorm,locdiffis,1,xbinfo,xbinfo,xbinfo,xbinfo,xbnorm,xbnorm,xbnorm,xbnorm,xb,xb,xb,xb,ib,ib,ib,ib,xdim,densetype,resmode,mlid,xy11,xy11,xy11,xy11,xy11,xy11,xy11,xy11,xy11,xy11,s);
        K4unnorm(xckern,q,xcnorm,locdiffis,1,xcinfo,xcinfo,xcinfo,xcinfo,xcnorm,xcnorm,xcnorm,xcnorm,xc,xc,xc,xc,ic,ic,ic,ic,xdim,densetype,resmode,mlid,xy22,xy22,xy22,xy22,xy22,xy22,xy22,xy22,xy22,xy22,s);
        K4unnorm(xdkern,q,xdnorm,locdiffis,1,xdinfo,xdinfo,xdinfo,xdinfo,xdnorm,xdnorm,xdnorm,xdnorm,xd,xd,xd,xd,id,id,id,id,xdim,densetype,resmode,mlid,xy33,xy33,xy33,xy33,xy33,xy33,xy33,xy33,xy33,xy33,s);

        OP_sqrt(xakern);
        OP_sqrt(xbkern);
        OP_sqrt(xckern);
        OP_sqrt(xdkern);

        OP_sqrt(xakern);
        OP_sqrt(xbkern);
        OP_sqrt(xckern);
        OP_sqrt(xdkern);

        xakern.inverse();
        xbkern.inverse();
        xckern.inverse();
        xdkern.inverse();

        res *= xakern;
        res *= xbkern;
        res *= xckern;
        res *= xdkern;

        if ( testisvnan(res) )
        {
            res = 1.0;
        }
    }

    return;
}


void MercerKernel::Km(gentype &res, int q, 
                      const gentype &xyprod, gentype &diffis, int recalcdiffis, 
                      Vector<const vecInfo *> &xinfo,  
                      Vector<const gentype *> &xnorm, 
                      Vector<const SparseVector<gentype> *> &x, 
                      Vector<int> &i, 
                      int xdim, int m, int densetype, int resmode, int mlid, 
                      const Matrix<double> &xy, const Vector<int> *s) const
{
    NiceAssert( !densetype || !isNormalised(q) );

    NiceAssert( ( xnorm.size() > 0 ) && !((xnorm.size())%2) );
    NiceAssert( q >= 0 );
    NiceAssert( q < size() );

    Kmunnorm(res,q,xyprod,diffis,recalcdiffis,xinfo,xnorm,x,i,xdim,m,densetype,resmode,mlid,xy,s);

    if ( isNormalised(q) )
    {
        NiceAssert( !( resmode & 0x80 ) );

	int j;
        gentype xxprod;
        gentype xkern;
        gentype locdiffis;
        Vector<const vecInfo *> xxinfo(xinfo);
        Vector<const gentype *> xxnorm(xnorm);
        Vector<const SparseVector<gentype> *> xx(x);
        Vector<int> ii(i);

        setzero(locdiffis);

	for ( j = 0 ; j < m ; j++ )
	{
            xxinfo = xinfo(j);
            xxnorm = xnorm(j);
            xx     = x(j);
            ii     = i(j);

            xxprod = *(xnorm(j));

            retMatrix<double> tmpma; 
            retVector<int> tmpva;

            Kmunnorm(xkern,q,xxprod,locdiffis,1,xxinfo,xxnorm,xx,ii,xdim,m,densetype,resmode,mlid,xy(ii*oneintvec(( m <= xy.numRows() ) ? m : xy.numRows(),tmpva),ii*oneintvec(( m <= xy.numCols() ) ? m : xy.numCols(),tmpva),tmpma),s);

            gentype oneonm(1.0/m);

            res /= pow(abs2(xkern),oneonm);
	}

        if ( testisvnan(res) )
        {
            res = 1.0;
        }
    }

    return;
}





































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================

void MercerKernel::K0unnorm(gentype &res, int q, 
                            const gentype &xyprod, gentype &diffis, int recalcdiffis, 
                            int xdim, int densetype, int resmode, int mlid) const
{
    if ( recalcdiffis && needsDiff(q) )
    {
        // Calculate ||x-y||^2 only as required

        diff0norm(diffis,xyprod);
    }

    Vector<const vecInfo *> xxinfo(0);
    Vector<const SparseVector<gentype> *> xx(0);
    Vector<const gentype *> xxnorm(0);
    Vector<int> ii(0);

    return Kbase(res,q,cType(q),
                 xyprod,xyprod,diffis,
                 xx,
                 xxinfo,
                 xxnorm,
                 ii,
                 xdim,0,densetype,resmode,mlid);
}

void MercerKernel::K2unnorm(gentype &res, int q, 
                           const gentype &xyprod, const gentype &yxprod, gentype &diffis, int recalcdiffis, 
                           const vecInfo &xinfo, const vecInfo &yinfo, 
                           const gentype &xnorm, const gentype &ynorm, 
                           const SparseVector<gentype> &x, const SparseVector<gentype> &y, 
                           int i, int j, 
                           int xdim, int densetype, int resmode, int mlid) const
{
    if ( recalcdiffis && needsDiff(q) )
    {
        // Calculate ||x-y||^2 only as required

        diff2norm(diffis,(xyprod+yxprod)/2.0,xnorm,ynorm);
    }

    Vector<const vecInfo *> xxinfo(2);
    Vector<const SparseVector<gentype> *> xx(2);
    Vector<const gentype *> xxnorm(2);
    Vector<int> ii(2);

    xxinfo("&",zeroint()) = &xinfo;
    xxinfo("&",1)         = &yinfo;

    xx("&",zeroint()) = &x;
    xx("&",1)         = &y;

    xxnorm("&",zeroint()) = &xnorm;
    xxnorm("&",1)         = &ynorm;

    ii("&",zeroint()) = i;
    ii("&",1)         = j;

    return Kbase(res,q,cType(q),
                 xyprod,yxprod,diffis,
                 xx,
                 xxinfo,
                 xxnorm,
                 ii,
                 xdim,2,densetype,resmode,mlid);
}

void MercerKernel::K4unnorm(gentype &res, int q, 
                            const gentype &xyprod, gentype &diffis, int recalcdiffis, 
                            const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, const vecInfo &xdinfo, 
                            const gentype &xanorm, const gentype &xbnorm, const gentype &xcnorm, const gentype &xdnorm, 
                            const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, const SparseVector<gentype> &xd, 
                            int ia, int ib, int ic, int id, 
                            int xdim, int densetype, int resmode, int mlid, 
                            double xy00, double xy10, double xy11, double xy20, double xy21, double xy22, double xy30, double xy31, double xy32, double xy33, const Vector<int> *s) const
{
    if ( recalcdiffis && needsDiff(q) )
    {
        // Calculate ||x-y||^2 only as required

        diff4norm(diffis,xyprod,xanorm,xbnorm,xcnorm,xdnorm,xy00,xy10,xy11,xy20,xy21,xy22,xy30,xy31,xy32,xy33,s);
    }

    Vector<const vecInfo *> xxinfo(4);
    Vector<const SparseVector<gentype> *> xx(4);
    Vector<const gentype *> xxnorm(4);
    Vector<int> ii(4);

    xxinfo("&",zeroint()) = &xainfo;
    xxinfo("&",1)         = &xbinfo;
    xxinfo("&",2)         = &xcinfo;
    xxinfo("&",3)         = &xdinfo;

    xx("&",zeroint()) = &xa;
    xx("&",1)         = &xb;
    xx("&",2)         = &xc;
    xx("&",3)         = &xd;

    xxnorm("&",zeroint()) = &xanorm;
    xxnorm("&",1)         = &xbnorm;
    xxnorm("&",2)         = &xcnorm;
    xxnorm("&",3)         = &xdnorm;

    ii("&",zeroint()) = ia;
    ii("&",1)         = ib;
    ii("&",2)         = ic;
    ii("&",3)         = id;

    return Kbase(res,q,cType(q),
                 xyprod,xyprod,diffis,
                 xx,
                 xxinfo,
                 xxnorm,
                 ii,
                 xdim,4,densetype,resmode,mlid);
}

void MercerKernel::Kmunnorm(gentype &res, int q, 
                            const gentype &xyprod, gentype &diffis, int recalcdiffis, 
                            Vector<const vecInfo *> &xinfo, 
                            Vector<const gentype *> &xnorm, 
                            Vector<const SparseVector<gentype> *> &x, 
                            Vector<int> &ii, 
                            int xdim, int m, int densetype, int resmode, int mlid, 
                            const Matrix<double> &xy, const Vector<int> *s) const
{
    if ( recalcdiffis && needsDiff(q) )
    {
        // Calculate ||x-y||^2 only as required

        diffmnorm(m,diffis,xyprod,xnorm,xy,s);
    }

    Kbase(res,q,cType(q),
          xyprod,xyprod,diffis,
          x,
          xinfo,
          xnorm,
          ii,
          xdim,m,densetype,resmode,mlid);

    return;
}




































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================

















// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================

// Evaluate kernel gradient dK/dx(x,y) and dK/dy(x,y)

// (inc double versions for speed)


















// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================



//phantomx
void MercerKernel::dKdaz(gentype &resda, gentype &resdz, int &minmaxind, 
                         const gentype &xyprod, const gentype &yxprod,
                         const vecInfo &xinfo, const vecInfo &yinfo, 
                         const gentype &xnorm, const gentype &ynorm, 
                         const SparseVector<gentype> &x, const SparseVector<gentype> &y, 
                         int i, int j, 
                         int xdim, int mlid, int assumreal) const
{
    minmaxind = -2;

    if ( isKernelDerivativeEasy() )
    {
        // Assume any kernel can be written as:
        //
        // K(x,y) = K(a,z,b)
        //
        // where a = ||x||^2
        //       b = ||y||^2
        //       z = x'y
        //
        // dK/dx = dK/da da/dx + dK/db db/dx + dK/dz dz/dx
        //       = dK/da 2x + dK/dz y

        gentype diffis(0.0);

        if ( kinf(0).numflagsset() == 0 )
        {
            // dK/dx = 0

            resdz = 0.0;
            resda = 0.0;

            minmaxind = -1;
        }

        else if ( needsDiff(0) )
        {
            // dK/dx = dK/da 2x + dK/dz y
            // 
            // But in this case we can simplify.  Note (see dKdaBase) that
            // dK/da = -1/2 dK/dz, we see that:
            //
            // dK/dx = -dK/dz x + dK/dz y
            //       = dK/dz (y-x)
            //
            // which implies the following quicker code

            diff2norm(diffis,(xyprod+yxprod)/2.0,xnorm,ynorm);

            Vector<const SparseVector<gentype> *> xx(2);
            Vector<const vecInfo *> xxinfo(2);
            Vector<const gentype *> xxnorm(2);
            Vector<int> ii(2);

            xx("&",zeroint())     = &x;
            xxinfo("&",zeroint()) = &xinfo;
            xxnorm("&",zeroint()) = &xnorm;
            ii("&",zeroint())     = i;

            xx("&",1)     = &y;
            xxinfo("&",1) = &yinfo;
            xxnorm("&",1) = &ynorm;
            ii("&",1)     = i;

            dKdzBase(resdz,minmaxind,0,xyprod,yxprod,diffis,xx,xxinfo,xxnorm,ii,xdim,2,mlid);
            resdz *= cWeight(0);

            resda  = resdz;
            resda *= -0.5;
        }

        else if ( needsInner(0,2) )
        {
            NiceAssert( kinf(0).usesInner || kinf(0).usesMinDiff || kinf(0).usesMaxDiff );

            // dK/dx = dK/dz y

            Vector<const SparseVector<gentype> *> xx(2);
            Vector<const vecInfo *> xxinfo(2);
            Vector<const gentype *> xxnorm(2);
            Vector<int> ii(2);

            xx("&",zeroint())     = &x;
            xxinfo("&",zeroint()) = &xinfo;
            xxnorm("&",zeroint()) = &xnorm;
            ii("&",zeroint())     = i;

            xx("&",1)     = &y;
            xxinfo("&",1) = &yinfo;
            xxnorm("&",1) = &ynorm;
            ii("&",1)     = i;

            dKdzBase(resdz,minmaxind,0,xyprod,yxprod,diffis,xx,xxinfo,xxnorm,ii,xdim,2,mlid);
            resdz *= cWeight(0);

            resda = 0.0;
        }

        else
        {
            resdz = 0.0;
            resda = 0.0;

            minmaxind = -1;
        }

        return;
    }

    // K(x,y) = K(a,z,b)
    //
    // where:
    //
    // a = x'x
    // z = x'y    (note this breaks for non-real kernels)
    // b = y'y
    //
    // we first work out gradients wrt a, b and z, taking into account
    // chaining etc.  Only once this is done do we convert to x and y
    // scales, noting that
    //
    // da/dx = 2x
    // dz/dx = y
    // db/dx = 0

    int startchain = 1;

    vecInfo Kxxresinfo,Kxxprevinfo;
    vecInfo Kyyresinfo,Kyyprevinfo;

    gentype Kxyres;
    gentype Kyxres;
    gentype &Kxxres = getmnorm(Kxxresinfo,x,2,0,assumreal);
    gentype &Kyyres = getmnorm(Kyyresinfo,y,2,0,assumreal);

    gentype Kxyprev;
    gentype Kyxprev;
    gentype &Kxxprev = getmnorm(Kxxprevinfo,x,2,0,assumreal);
    gentype &Kyyprev = getmnorm(Kxxprevinfo,y,2,0,assumreal);

    setzero(Kxyres);
    setzero(Kyxres);
    setzero(Kxxres);
    setzero(Kyyres);

    setzero(Kxyprev);
    setzero(Kyxprev);
    setzero(Kxxprev);
    setzero(Kyyprev);

    gentype dKada(0.0);
    gentype dKadz(0.0);
    gentype dKadb(0.0);
    gentype dKzda(0.0);
    gentype dKzdz(0.0);
    gentype dKzdb(0.0);
    gentype dKbda(0.0);
    gentype dKbdz(0.0);
    gentype dKbdb(0.0);

    gentype dKathisda(0.0);
    gentype dKathisdz(0.0);
    gentype dKathisdb(0.0);
    gentype dKzthisda(0.0);
    gentype dKzthisdz(0.0);
    gentype dKzthisdb(0.0);
    gentype dKbthisda(0.0);
    gentype dKbthisdz(0.0);
    gentype dKbthisdb(0.0);

    gentype dKamidda(0.0);
    gentype dKamiddz(0.0);
    gentype dKamiddb(0.0);
    gentype dKzmidda(0.0);
    gentype dKzmiddz(0.0);
    gentype dKzmiddb(0.0);
    gentype dKbmidda(0.0);
    gentype dKbmiddz(0.0);
    gentype dKbmiddb(0.0);

    gentype dKaprevda(0.0);
    gentype dKaprevdz(0.0);
    gentype dKaprevdb(0.0);
    gentype dKzprevda(0.0);
    gentype dKzprevdz(0.0);
    gentype dKzprevdb(0.0);
    gentype dKbprevda(0.0);
    gentype dKbprevdz(0.0);
    gentype dKbprevdb(0.0);

    gentype resdKda(0.0);
    gentype resdKdz(0.0);
    gentype resdKdb(0.0);

    gentype locdiffis(0.0);

    if ( size() )
    {
        gentype diffis(0.0);

        if ( needsDiff() )
        {
            // Calculate ||x-y||^2 only as required

            diff2norm(diffis,(xyprod+yxprod)/2.0,xnorm,ynorm);
        }

        int q;

	for ( q = 0 ; q <= size() ; q++ )
	{
            if ( isChained(q) )
            {
                NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );
                NiceAssert( !(kinf(q).usesVector) );
                NiceAssert( !(kinf(q).usesMinDiff) );
                NiceAssert( !(kinf(q).usesMaxDiff) );

                if ( startchain )
                {
                    startchain = 0;

                    // Calculate gradients of this layer
                    //
                    // Note dkdb is replaced with dkda, arguments reversed if needed (symmetry assumed)

                    dKda(dKathisda,minmaxind,q,xnorm ,xnorm ,locdiffis,1,xinfo,xinfo,xnorm,xnorm,x,x,i,i,xdim,mlid);
                    dKathisdz = 0.0;
                    dKathisdb = 0.0;
                    dKda(dKzthisda,minmaxind,q,xyprod,yxprod,locdiffis,1,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,mlid);
                    dKdz(dKzthisdz,minmaxind,q,xyprod,yxprod,locdiffis,1,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,mlid);
                    dKda(dKzthisdb,minmaxind,q,yxprod,xyprod,locdiffis,1,yinfo,xinfo,ynorm,xnorm,y,x,j,i,xdim,mlid); // dKdb, arguments reversed
                    dKbthisda = 0.0;
                    dKbthisdz = 0.0;
                    dKda(dKbthisdb,minmaxind,q,ynorm ,ynorm ,locdiffis,1,yinfo,yinfo,ynorm,ynorm,y,y,j,j,xdim,mlid);

                    // Update norms

                    K2(Kxyres,q,xyprod,yxprod,locdiffis,1,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,0,0,mlid);
                    Kyxres = Kxyres;      //FIXME: clearly, this breaks anions
                    K2(Kxxres,q,xnorm ,xnorm ,locdiffis,1,xinfo,xinfo,xnorm,xnorm,x,x,i,i,xdim,0,0,mlid);
                    K2(Kyyres,q,ynorm ,ynorm ,locdiffis,1,yinfo,yinfo,ynorm,ynorm,y,y,j,j,xdim,0,0,mlid);
                }

                else
                {
                    // Not start of chain, previous kernel exists, so inner
                    // product (and hence inner product gradients) are
                    // inherited from it

                    qswap(dKaprevda,dKathisda);
                    qswap(dKaprevdz,dKathisdz);
                    qswap(dKaprevdb,dKathisdb);
                    qswap(dKzprevda,dKzthisda);
                    qswap(dKzprevdz,dKzthisdz);
                    qswap(dKzprevdb,dKzthisdb);
                    qswap(dKbprevda,dKbthisda);
                    qswap(dKbprevdz,dKbthisdz);
                    qswap(dKbprevdb,dKbthisdb);

                    qswap(Kxyprev,Kxyres);
                    qswap(Kyxprev,Kyxres);

                    qswap(Kxxprevinfo,Kxxresinfo);
                    qswap(Kyyprevinfo,Kyyresinfo);

                    // Calculate gradients of this layer
                    //
                    // Note dkdb is replaced with dkda, arguments reversed if needed (symmetry assumed)

                    dKda(dKamidda,minmaxind,q,Kxxprev,Kxxprev,locdiffis,1,Kxxprevinfo,Kxxprevinfo,Kxxprev,Kxxprev,x,x,i,i,xdim,mlid);
                    dKdz(dKamiddz,minmaxind,q,Kxxprev,Kxxprev,locdiffis,1,Kxxprevinfo,Kxxprevinfo,Kxxprev,Kxxprev,x,x,i,i,xdim,mlid);
                    dKamiddb = dKamidda;
                    dKda(dKzmidda,minmaxind,q,Kxyprev,Kyxprev,locdiffis,1,Kxxprevinfo,Kyyprevinfo,Kxxprev,Kyyprev,x,y,i,j,xdim,mlid);
                    dKdz(dKzmiddz,minmaxind,q,Kxyprev,Kyxprev,locdiffis,1,Kxxprevinfo,Kyyprevinfo,Kxxprev,Kyyprev,x,y,i,j,xdim,mlid);
                    dKda(dKzmiddb,minmaxind,q,Kyxprev,Kxyprev,locdiffis,1,Kyyprevinfo,Kxxprevinfo,Kyyprev,Kxxprev,y,x,j,i,xdim,mlid); // dKdb, arguments reversed
                    dKda(dKbmidda,minmaxind,q,Kyyprev,Kyyprev,locdiffis,1,Kyyprevinfo,Kyyprevinfo,Kyyprev,Kyyprev,y,y,j,j,xdim,mlid);
                    dKdz(dKbmiddz,minmaxind,q,Kyyprev,Kyyprev,locdiffis,1,Kyyprevinfo,Kyyprevinfo,Kyyprev,Kyyprev,y,y,j,j,xdim,mlid);
                    dKbmiddb = dKbmidda;

                    // Gradient chaining

                    dKathisda = (dKamidda*dKaprevda);
                    dKathisdz = (dKamidda*dKaprevdz);
                    dKathisdb = (dKamidda*dKaprevdb);
                    dKzthisda = (dKzmidda*dKaprevda);
                    dKzthisdz = (dKzmidda*dKaprevdz);
                    dKzthisdb = (dKzmidda*dKaprevdb);
                    dKbthisda = (dKbmidda*dKaprevda);
                    dKbthisdz = (dKbmidda*dKaprevdz);
                    dKbthisdb = (dKbmidda*dKaprevdb);

                    dKathisda += (dKamiddz*dKzprevda);
                    dKathisdz += (dKamiddz*dKzprevdz);
                    dKathisdb += (dKamiddz*dKzprevdb);
                    dKzthisda += (dKzmiddz*dKzprevda);
                    dKzthisdz += (dKzmiddz*dKzprevdz);
                    dKzthisdb += (dKzmiddz*dKzprevdb);
                    dKbthisda += (dKbmiddz*dKzprevda);
                    dKbthisdz += (dKbmiddz*dKzprevdz);
                    dKbthisdb += (dKbmiddz*dKzprevdb);

                    dKathisda += (dKamiddb*dKbprevda);
                    dKathisdz += (dKamiddb*dKbprevdz);
                    dKathisdb += (dKamiddb*dKbprevdb);
                    dKzthisda += (dKzmiddb*dKbprevda);
                    dKzthisdz += (dKzmiddb*dKbprevdz);
                    dKzthisdb += (dKzmiddb*dKbprevdb);
                    dKbthisda += (dKbmiddb*dKbprevda);
                    dKbthisdz += (dKbmiddb*dKbprevdz);
                    dKbthisdb += (dKbmiddb*dKbprevdb);

                    // Update norms

                    K2(Kxyres,q,Kxyprev,Kyxprev,locdiffis,1,Kxxprevinfo,Kyyprevinfo,Kxxprev,Kyyprev,x,y,i,j,xdim,0,0,mlid);
                    K2(Kyxres,q,Kyxprev,Kxyprev,locdiffis,1,Kyyprevinfo,Kxxprevinfo,Kyyprev,Kxxprev,y,x,j,i,xdim,0,0,mlid);
                    K2(Kxxres,q,Kxxprev,Kxxprev,locdiffis,1,Kxxprevinfo,Kxxprevinfo,Kxxprev,Kxxprev,x,x,i,i,xdim,0,0,mlid);
                    K2(Kyyres,q,Kyyprev,Kyyprev,locdiffis,1,Kyyprevinfo,Kyyprevinfo,Kyyprev,Kyyprev,y,y,j,j,xdim,0,0,mlid);
                }

                // Apply weights to gradients of this layer

                Kxyres *= cWeight(q);
                Kyxres *= cWeight(q);
                Kxxres *= cWeight(q);
                Kyyres *= cWeight(q);

                dKathisda *= cWeight(q);
                dKzthisda *= cWeight(q);
                dKbthisda *= cWeight(q);

                dKathisdz *= cWeight(q);
                dKzthisdz *= cWeight(q);
                dKbthisdz *= cWeight(q);

                dKathisdb *= cWeight(q);
                dKzthisdb *= cWeight(q);
                dKbthisdb *= cWeight(q);
            }

            else
            {
                if ( startchain )
                {
                    // Calculate gradients of this layer

                    dKda(dKzthisda,minmaxind,q,xyprod,yxprod,diffis,0,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,mlid);
                    dKdz(dKzthisdz,minmaxind,q,xyprod,yxprod,diffis,0,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,mlid);
                    dKda(dKzthisdb,minmaxind,q,yxprod,xyprod,diffis,0,yinfo,xinfo,ynorm,xnorm,y,x,j,i,xdim,mlid); // dKdb, arguments reversed
                }


                else
                {
                    NiceAssert( ( isAltDiff() <= 1 ) || ( isAltDiff() >= 100 ) );
                    NiceAssert( !(kinf(q).usesVector) );
                    NiceAssert( !(kinf(q).usesMinDiff) );
                    NiceAssert( !(kinf(q).usesMaxDiff) );

                    // End of chain: add gradients to result now 

                    startchain = 1;

                    // Not start of chain, previous kernel exists, so inner
                    // product (and hence inner product gradients) are
                    // inherited from it

                    qswap(dKaprevda,dKathisda);
                    qswap(dKaprevdz,dKathisdz);
                    qswap(dKaprevdb,dKathisdb);
                    qswap(dKzprevda,dKzthisda);
                    qswap(dKzprevdz,dKzthisdz);
                    qswap(dKzprevdb,dKzthisdb);
                    qswap(dKbprevda,dKbthisda);
                    qswap(dKbprevdz,dKbthisdz);
                    qswap(dKbprevdb,dKbthisdb);

                    // Calculate gradients of this layer
                    //
                    // Note dkdb is replaced with dkda, arguments reversed if needed (symmetry assumed)

                    dKda(dKzmidda,minmaxind,q,Kxyprev,Kyxprev,locdiffis,1,Kxxprevinfo,Kyyprevinfo,Kxxprev,Kyyprev,x,y,i,j,xdim,mlid);
                    dKdz(dKzmiddz,minmaxind,q,Kxyprev,Kyxprev,locdiffis,1,Kxxprevinfo,Kyyprevinfo,Kxxprev,Kyyprev,x,y,i,j,xdim,mlid);
                    dKda(dKzmiddb,minmaxind,q,Kyxprev,Kxyprev,locdiffis,1,Kyyprevinfo,Kxxprevinfo,Kyyprev,Kxxprev,y,x,j,i,xdim,mlid); // dKdb, arguments reversed

                    // Gradient chaining

                    dKzthisda = (dKzmidda*dKaprevda);
                    dKzthisdz = (dKzmidda*dKaprevdz);
                    dKzthisdb = (dKzmidda*dKaprevdb);

                    dKzthisda += (dKzmiddz*dKzprevda);
                    dKzthisdz += (dKzmiddz*dKzprevdz);
                    dKzthisdb += (dKzmiddz*dKzprevdb);

                    dKzthisda += (dKzmiddb*dKbprevda);
                    dKzthisdz += (dKzmiddb*dKbprevdz);
                    dKzthisdb += (dKzmiddb*dKbprevdb);
                }

                dKathisdz *= cWeight(q);
                dKzthisdz *= cWeight(q);
                dKbthisdz *= cWeight(q);

                resdKda += dKzthisda;
                resdKdz += dKzthisdz;
                resdKdb += dKzthisdb;
            }

            //if ( isSplit(q) )
            //{
            //    break;
            //}
	}
    }

    resda = resdKda;
    resdz = resdKdz;

    return;
}








































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================

void MercerKernel::dKda(gentype &res, int &minmaxind, int q, 
                        const gentype &xyprod, const gentype &yxprod, gentype &diffis, int recalcdiffis,
                        const vecInfo &xinfo, const vecInfo &yinfo, 
                        const gentype &xnorm, const gentype &ynorm, 
                        const SparseVector<gentype> &x, const SparseVector<gentype> &y, 
                        int i, int j, 
                        int xdim, int mlid) const
{
    NiceAssert( q >= 0 );
    NiceAssert( q < size() );

    if ( !isNormalised(q) )
    {
        dKunnormda(res,minmaxind,q,xyprod,yxprod,diffis,recalcdiffis,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,mlid);
    }

    else
    {
        gentype Kazb;
        gentype Kaaa;

        gentype dKda_azb;
        gentype dKda_aaa;
        gentype dKdz_aaa;

        gentype temp;

        double scalefact = 1.0;

        K2unnorm(Kazb,q,xyprod,yxprod,diffis,recalcdiffis,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,0,0,mlid);
        dKunnormda(dKda_azb,minmaxind,q,xyprod,yxprod,diffis,0,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,mlid);

        {
            gentype locdiffis(0.0);

            K2unnorm(temp,q,xnorm,xnorm,locdiffis,1,xinfo,xinfo,xnorm,xnorm,x,x,i,i,xdim,0,0,mlid);

            scalefact *= sqrt((double) abs2(temp));

            {
                dKunnormda(dKda_aaa,minmaxind,q,xnorm,xnorm,locdiffis,1,xinfo,xinfo,xnorm,xnorm,x,x,i,i,xdim,mlid);
                dKunnormdz(dKdz_aaa,minmaxind,q,xnorm,xnorm,locdiffis,1,xinfo,xinfo,xnorm,xnorm,x,x,i,i,xdim,mlid);

                Kaaa = temp;
                Kaaa.inverse();
            }

            K2unnorm(temp,q,ynorm,ynorm,locdiffis,1,yinfo,yinfo,ynorm,ynorm,y,y,j,j,xdim,0,0,mlid);

            scalefact *= sqrt((double) abs2(temp));
	}

        res =  dKda_aaa;
        res *= 2.0;
        res += dKdz_aaa;
        leftmult(res,Kaaa); // Kaaa has been inverted
        leftmult(res,Kazb);
        res *= -0.5;
        res += dKda_azb;
        res /= scalefact;
    }

    return;
}

void MercerKernel::dKdz(gentype &res, int &minmaxind, int q, 
                         const gentype &xyprod, const gentype &yxprod, gentype &diffis, int recalcdiffis, 
                         const vecInfo &xinfo, const vecInfo &yinfo, 
                         const gentype &xnorm, const gentype &ynorm, 
                         const SparseVector<gentype> &x, const SparseVector<gentype> &y, 
                         int i, int j, 
                         int xdim, int mlid) const
{
    NiceAssert( q >= 0 );
    NiceAssert( q < size() );

    dKunnormdz(res,minmaxind,q,xyprod,yxprod,diffis,recalcdiffis,xinfo,yinfo,xnorm,ynorm,x,y,i,j,xdim,mlid);

    if ( isNormalised(q) )
    {
        gentype xxprod;
        gentype xkern;
        gentype locdiffis(0.0);

        {
            K2unnorm(xkern,q,xnorm,xnorm,locdiffis,1,xinfo,xinfo,xnorm,xnorm,x,x,i,i,xdim,0,0,mlid);

            res /= sqrt((double) abs2(xkern));

            K2unnorm(xkern,q,ynorm,ynorm,locdiffis,1,yinfo,yinfo,ynorm,ynorm,y,y,j,j,xdim,0,0,mlid);

            res /= sqrt((double) abs2(xkern));
	}
    }

    return;
}





































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================

void MercerKernel::dKunnormda(gentype &res, int &minmaxind, int q, 
                              const gentype &xyprod, const gentype &yxprod, gentype &diffis, int recalcdiffis,
                              const vecInfo &xinfo, const vecInfo &yinfo, 
                              const gentype &xnorm, const gentype &ynorm, 
                              const SparseVector<gentype> &x, const SparseVector<gentype> &y, 
                              int i, int j, 
                              int xdim, int mlid) const
{
    if ( recalcdiffis && needsDiff(q) )
    {
	// Calculate ||x-y||^2 only as required

        diff2norm(diffis,(xyprod+yxprod)/2.0,xnorm,ynorm);
    }

    Vector<const SparseVector<gentype> *> xx(2);
    Vector<const vecInfo *> xxinfo(2);
    Vector<const gentype *> xxnorm(2);
    Vector<int> ii(2);

    xx("&",zeroint()) = &x;
    xx("&",1)         = &y;

    xxinfo("&",zeroint()) = &xinfo;
    xxinfo("&",1)         = &yinfo;

    xxnorm("&",zeroint()) = &xnorm;
    xxnorm("&",1)         = &ynorm;

    ii("&",zeroint()) = i;
    ii("&",1)         = j;

    return dKdaBase(res,minmaxind,q,
                    xyprod,yxprod,diffis,
                    xx,
                    xxinfo,
                    xxnorm,
                    ii,
                    xdim,2,mlid);
}

void MercerKernel::dKunnormdz(gentype &res, int &minmaxind, int q, 
                              const gentype &xyprod, const gentype &yxprod, gentype &diffis, int recalcdiffis, 
                              const vecInfo &xinfo, const vecInfo &yinfo, 
                              const gentype &xnorm, const gentype &ynorm, 
                              const SparseVector<gentype> &x, const SparseVector<gentype> &y, 
                              int i, int j, 
                              int xdim, int mlid) const
{
    if ( recalcdiffis && needsDiff(q) )
    {
	// Calculate ||x-y||^2 only as required

        diff2norm(diffis,(xyprod+yxprod)/2.0,xnorm,ynorm);
    }

    Vector<const SparseVector<gentype> *> xx(2);
    Vector<const vecInfo *> xxinfo(2);
    Vector<const gentype *> xxnorm(2);
    Vector<int> ii(2);

    xx("&",zeroint()) = &x;
    xx("&",1)         = &y;

    xxinfo("&",zeroint()) = &xinfo;
    xxinfo("&",1)         = &yinfo;

    xxnorm("&",zeroint()) = &xnorm;
    xxnorm("&",1)         = &ynorm;

    ii("&",zeroint()) = i;
    ii("&",1)         = j;

    return dKdzBase(res,minmaxind,q,
                    xyprod,yxprod,diffis,
                    xx,
                    xxinfo,
                    xxnorm,
                    ii,
                    xdim,2,mlid);
}





































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================




































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================


















// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================













































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
























// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================



























// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
































































//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================


// Function to shift, scale and index vectors prior to calling the callback
// function
//
// Note: this function is not fast.  Better hope the kernel cache is large
// enough.

SparseVector<gentype> &MercerKernel::preShiftScale(SparseVector<gentype> &res, const SparseVector<gentype> &x) const
{
    int i,j;

    if ( isShiftedScaled() && isIndex() )
    {
        res.zero();

        if ( dIndexes.size() )
        {
            for ( i = 0 ; i < dIndexes.size() ; i++ )
            {
                j = dIndexes(i);

                res("&",j) = x(j);
                res("&",j) += dShift(j);
                res("&",j) /= dScale(j);
            }
        }
    }

    else if ( isShifted() && isIndex() )
    {
        res.zero();

        if ( dIndexes.size() )
        {
            for ( i = 0 ; i < dIndexes.size() ; i++ )
            {
                j = dIndexes(i);

                res("&",j) = x(j);
                res("&",j) += dShift(j);
            }
        }
    }

    else if ( isScaled() && isIndex() )
    {
        res.zero();

        if ( dIndexes.size() )
        {
            for ( i = 0 ; i < dIndexes.size() ; i++ )
            {
                j = dIndexes(i);

                res("&",j)  = x(j);
                res("&",j) /= dScale(j);
            }
        }
    }

    else if ( isShiftedScaled() )
    {
        res  = x;
        res += dShift;
        res /= dScale;
    }

    else if ( isShifted() )
    {
        res  = x;
        res += dShift;
    }

    else if ( isScaled() )
    {
        res  = x;
        res /= dScale;
    }

    else if ( isIndex() )
    {
        res.zero();

        if ( dIndexes.size() )
        {
            for ( i = 0 ; i < dIndexes.size() ; i++ )
            {
                j = dIndexes(i);

                res("&",j) = x(j);
            }
        }
    }

    else
    {
        res = x;
    }

    return res;
}


void MercerKernel::fixShiftProd(void)
{
    if ( !isIndex() )
    {
        getTwoProd(dShiftProd,dShift,dShift,0,1,3,0,0);
        getTwoProd(dShiftProdNoConj,dShift,dShift,0,0,3,0,0);
        getTwoProd(dShiftProdRevConj,dShift,dShift,0,2,3,0,0);
    }

    else
    {
        getTwoProd(dShiftProd,dShift,dShift,1,1,3,0,0);
        getTwoProd(dShiftProdNoConj,dShift,dShift,1,0,3,0,0);
        getTwoProd(dShiftProdRevConj,dShift,dShift,1,2,3,0,0);
    }

    return;
}

vecInfo &MercerKernel::getvecInfo(vecInfo &res, const SparseVector<gentype> &x, const gentype *xmag, int xconsist, int assumreal) const
{
    int i;
    int z = 0;

//    int nearindsize = x.nearindsize();
    int farindsize = x.farindsize();

    NiceAssert( res.isloc );

    (*(res.content("&",z))).zero();
    (*(res.content("&",1))).zero();

    int nearusize = x.nearupsize();
    int farusize  = x.farupsize();

    res.usize_overwrite = 0;

    {
        for ( i = 0 ; i < nearusize ; i++ )
        {
            const SparseVector<gentype> &xx = x.nearrefup(i);

            getvecInfo((*((res.content)("&",z)))("&",i),xx,!i ? xmag : NULL,xconsist,assumreal);

            (*((res.content)("&",z)))("&",i).xusize = nearusize;
        }
    }

    if ( farindsize )
    {
        for ( i = 0 ; i < farusize ; i++ )
        {
            const SparseVector<gentype> &xx = x.farrefup(i);

            //getvecInfo((*((res.content)("&",1)))("&",i),xx.farref(),NULL,xconsist,assumreal);
            getvecInfo((*((res.content)("&",1)))("&",i),xx,NULL,xconsist,assumreal);

            (*((res.content)("&",1)))("&",i).xusize = farusize;
        }
    }

    return res;
}

vecInfoBase &MercerKernel::getvecInfo(vecInfoBase &res, const SparseVector<gentype> &x, const gentype *xmag, int xconsist, int assumreal) const
{
    // NB: we need to correct all averages here.  By default, the mean
    // of a sparse vector uses nearindsize() for scaling.  However for eg
    // if the vector
    // ( 0 0 1 0 )
    // is streamed into the SVM then this will be automatically converted
    // to
    // ( 2:1 3:0 )
    // and hence the mean will be 0.5, rather than 0.25 as required for
    // correct calculation.  We correct this by noting that size() of
    // the above sparse vector will be
    // 3+1 = 4
    // which is the correct value, so we need to rescale all averages
    // by nearindsize()/size() (or 1 if size() == 0).

    int i = 0;

    res.hasbeenset = 1;

    res.xiseqn = 0;

    if ( x.nearindsize() )
    {
        for ( i = 0 ; i < x.nearindsize() ; i++ )
        {
            res.xiseqn |= x.direcref(i).isValEqn();
        }
    }

    // Can only do this now as may require means and variances

    Vector<gentype> &xhalfmprod = res.xhalfmprod;

    int m = xproddepth;
    int oldm = 0; // Need to calculate from scratch

    xhalfmprod.resize(m/2);

    if ( ( m >= 2 ) && ( m > oldm ) )
    {
        if ( !xmag )
        {
            twoProductDivertedNoConj(xhalfmprod("&",zeroint()),x,x,xconsist,assumreal);
        }

        else
        {
            xhalfmprod("&",zeroint()) = *xmag;
        }

        oldm = 2;
    }

    if ( ( m >= 4 ) && ( m > oldm ) )
    {
        fourProductDiverted(xhalfmprod("&",1),x,x,x,x,xconsist,assumreal);

        oldm = 4;
    }

    if ( ( m >= 6 ) && ( m/2 > xhalfmprod.size() ) )
    {
        Vector<const SparseVector<gentype> *> aa(m);

        aa = &x;

        int i;

        for ( i = oldm/2 ; i < m/2 ; i++ )
        {
            retVector<const SparseVector<gentype> *> tmpva;

            mProductDiverted(2*(i+1),xhalfmprod("&",i),aa(zeroint(),1,2*(i+1)-1,tmpva),xconsist,assumreal);
        }
    }

    return res;
}

void MercerKernel::processOverwrites(int q, const SparseVector<gentype> &x, const SparseVector<gentype> &y) const
{
    if ( isLeftRightPlain() )
    {
        return;
    }

    int i;

    if ( dIntOverwrite(q).nearindsize() )
    {
        for ( i = 0 ; i < dIntOverwrite(q).nearindsize() ; i++ )
        {
            gentype altdest;
            int &dest = ((**thisthisthis).dIntConstants)("&",q)("&",dIntOverwrite(q).ind(i));
            int srcind = dIntOverwrite(q).direcref(i);

            setzero(altdest);

            if ( isLeftPlain() )
            {
                altdest = y(srcind);
            }

            else if ( isRightPlain() )
            {
                altdest = x(srcind);
            }

            else
            {
                altdest  = x(srcind);
                altdest *= y(srcind);
            }

            dest = (int) altdest;
        }
    }

    if ( dRealOverwrite(q).nearindsize() )
    {
        for ( i = 0 ; i < dRealOverwrite(q).nearindsize() ; i++ )
        {
            gentype &dest = ((**thisthisthis).dRealConstants)("&",q)("&",dRealOverwrite(q).ind(i));
            int srcind = dRealOverwrite(q).direcref(i);

            setzero(dest);

            if ( isLeftPlain() )
            {
                dest = y(srcind);
            }

            else if ( isRightPlain() )
            {
                dest = x(srcind);
                setconj(dest);
            }

            else
            {
                dest = x(srcind);
                setconj(dest);
                dest *= y(srcind);
            }
        }
    }

    return;
}

void MercerKernel::fixcombinedOverwriteSrc(void)
{
    // Clear overwrite indices list

    combinedOverwriteSrc.resize(0);

    // Grab all indices

    if ( size() )
    {
        int q,i,j;

        for ( q = 0 ; q < size() ; q++ )
        {
            if ( dRealOverwrite(q).size() )
            {
                for ( i = 0 ; i < dRealOverwrite(q).nearindsize() ; i++ )
                {
                    j = combinedOverwriteSrc.size();
                    combinedOverwriteSrc.add(j);
                    combinedOverwriteSrc("&",j) = dRealOverwrite(q).direcref(i);
                }
            }

            if ( dIntOverwrite(q).size() )
            {
                for ( i = 0 ; i < dIntOverwrite(q).nearindsize() ; i++ )
                {
                    j = combinedOverwriteSrc.size();
                    combinedOverwriteSrc.add(j);
                    combinedOverwriteSrc("&",j) = dIntOverwrite(q).direcref(i);
                }
            }
        }
    }

    // Sort indices

    if ( combinedOverwriteSrc.size() > 1 )
    {
        int i,j;

        for ( i = 0 ; i < combinedOverwriteSrc.size()-1 ; i++ )
        {
            for ( j = i+1 ; j < combinedOverwriteSrc.size() ; j++ )
            {
                if ( combinedOverwriteSrc(j) < combinedOverwriteSrc(i) )
                {
                    qswap(combinedOverwriteSrc("&",i),combinedOverwriteSrc("&",j));
                    i--;
                    break;
                }
            }
        }
    }

    // Remove duplicates

    if ( combinedOverwriteSrc.size() > 1 )
    {
        int i;

        for ( i = 0 ; i < combinedOverwriteSrc.size()-1 ; i++ )
        {
            if ( combinedOverwriteSrc(i) == combinedOverwriteSrc(i+1) )
            {
                combinedOverwriteSrc.remove(i);
                i--;
            }
        }
    }

    return;
}

void MercerKernel::addinOverwriteInd(const SparseVector<gentype> &x, const SparseVector<gentype> &y) const
{
    if ( combinedOverwriteSrc.size() )
    {
        (**thisthisthis).backupisind    = isind;
        (**thisthisthis).backupdIndexes = dIndexes;
        (**thisthisthis).isind = 1;

        Vector<int> &redidIndexes = (**thisthisthis).dIndexes;

        if ( !backupisind )
        {
            // Add indices for vectors

            int i;
            int j;

            i = 0;
            j = 0;

            while ( j < x.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < x.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > x.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = x.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = x.ind(j);
                    i++;
                    j++;
                }
            }

            i = 0;
            j = 0;

            while ( j < y.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < y.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > y.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = y.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = y.ind(j);
                    i++;
                    j++;
                }
            }
        }

        addinOverwriteInd();
    }

    return;
}

void MercerKernel::addinOverwriteInd(const Vector<gentype> &x, const Vector<gentype> &y) const
{
    if ( combinedOverwriteSrc.size() )
    {
        (**thisthisthis).backupisind    = isind;
        (**thisthisthis).backupdIndexes = dIndexes;
        (**thisthisthis).isind = 1;

        Vector<int> &redidIndexes = (**thisthisthis).dIndexes;

        if ( !backupisind )
        {
            // Add indices for vectors

            int i;
            int j = ( x.size() < y.size() ) ? x.size() : y.size();

            for ( i = 0 ; i < j ; i++ )
            {
                redidIndexes.add(i);
                redidIndexes("&",i) = i;
            }
        }

        addinOverwriteInd();
    }

    return;
}

/*
void MercerKernel::addinOverwriteInd(const SparseVector<double> &x, const SparseVector<double> &y) const
{
    if ( combinedOverwriteSrc.size() )
    {
        (**thisthisthis).backupisind    = isind;
        (**thisthisthis).backupdIndexes = dIndexes;
        (**thisthisthis).isind = 1;

        Vector<int> &redidIndexes = (**thisthisthis).dIndexes;

        if ( !backupisind )
        {
            // Add indices for vectors

            int i;
            int j;

            i = 0;
            j = 0;

            while ( j < x.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < x.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > x.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = x.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = x.ind(j);
                    i++;
                    j++;
                }
            }

            i = 0;
            j = 0;

            while ( j < y.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < y.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > y.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = y.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = y.ind(j);
                    i++;
                    j++;
                }
            }
        }

        addinOverwriteInd();
    }

    return;
}
*/

/*
void MercerKernel::addinOverwriteInd(const Vector<double> &x, const Vector<double> &y) const
{
    if ( combinedOverwriteSrc.size() )
    {
        (**thisthisthis).backupisind    = isind;
        (**thisthisthis).backupdIndexes = dIndexes;
        (**thisthisthis).isind = 1;

        Vector<int> &redidIndexes = (**thisthisthis).dIndexes;

        if ( !backupisind )
        {
            // Add indices for vectors

            int i;
            int j = ( x.size() < y.size() ) ? x.size() : y.size();

            for ( i = 0 ; i < j ; i++ )
            {
                redidIndexes.add(i);
                redidIndexes("&",i) = i;
            }
        }

        addinOverwriteInd();
    }

    return;
}
*/

void MercerKernel::addinOverwriteInd(const SparseVector<gentype> &v) const
{
    if ( combinedOverwriteSrc.size() )
    {
        (**thisthisthis).backupisind    = isind;
        (**thisthisthis).backupdIndexes = dIndexes;
        (**thisthisthis).isind = 1;

        Vector<int> &redidIndexes = (**thisthisthis).dIndexes;

        if ( !backupisind )
        {
            // Add indices for vectors

            int i;
            int j;

            i = 0;
            j = 0;

            while ( j < v.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < v.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > v.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = v.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = v.ind(j);
                    i++;
                    j++;
                }
            }
        }

        addinOverwriteInd();
    }

    return;
}

void MercerKernel::addinOverwriteInd(const SparseVector<gentype> &v, const SparseVector<gentype> &w, const SparseVector<gentype> &x) const
{
    if ( combinedOverwriteSrc.size() )
    {
        (**thisthisthis).backupisind    = isind;
        (**thisthisthis).backupdIndexes = dIndexes;
        (**thisthisthis).isind = 1;

        Vector<int> &redidIndexes = (**thisthisthis).dIndexes;

        if ( !backupisind )
        {
            // Add indices for vectors

            int i;
            int j;

            i = 0;
            j = 0;

            while ( j < v.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < v.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > v.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = v.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = v.ind(j);
                    i++;
                    j++;
                }
            }

            i = 0;
            j = 0;

            while ( j < w.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < w.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > w.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = w.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = w.ind(j);
                    i++;
                    j++;
                }
            }

            i = 0;
            j = 0;

            while ( j < x.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < x.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > x.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = x.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = x.ind(j);
                    i++;
                    j++;
                }
            }
        }

        addinOverwriteInd();
    }

    return;
}

void MercerKernel::addinOverwriteInd(const SparseVector<gentype> &v, const SparseVector<gentype> &w, const SparseVector<gentype> &x, const SparseVector<gentype> &y) const
{
    if ( combinedOverwriteSrc.size() )
    {
        (**thisthisthis).backupisind    = isind;
        (**thisthisthis).backupdIndexes = dIndexes;
        (**thisthisthis).isind = 1;

        Vector<int> &redidIndexes = (**thisthisthis).dIndexes;

        if ( !backupisind )
        {
            // Add indices for vectors

            int i;
            int j;

            i = 0;
            j = 0;

            while ( j < v.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < v.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > v.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = v.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = v.ind(j);
                    i++;
                    j++;
                }
            }

            i = 0;
            j = 0;

            while ( j < w.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < w.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > w.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = w.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = w.ind(j);
                    i++;
                    j++;
                }
            }

            i = 0;
            j = 0;

            while ( j < x.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < x.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > x.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = x.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = x.ind(j);
                    i++;
                    j++;
                }
            }

            i = 0;
            j = 0;

            while ( j < y.nearindsize() )
            {
                if ( i < redidIndexes.size() )
                {
                    if ( redidIndexes(i) < y.ind(j) )
                    {
                        i++;
                    }

                    else if ( redidIndexes(i) > y.ind(j) )
                    {
                        redidIndexes.add(i);
                        redidIndexes("&",i) = y.ind(j);
                        i++;
                        j++;
                    }

                    else
                    {
                        i++;
                        j++;
                    }
                }

                else
                {
                    NiceAssert( i == redidIndexes.size() );

                    redidIndexes.add(i);
                    redidIndexes("&",i) = y.ind(j);
                    i++;
                    j++;
                }
            }
        }

        addinOverwriteInd();
    }

    return;
}

void MercerKernel::addinOverwriteInd(const Vector<const SparseVector<gentype> *> &a) const
{
    if ( combinedOverwriteSrc.size() )
    {
        (**thisthisthis).backupisind    = isind;
        (**thisthisthis).backupdIndexes = dIndexes;
        (**thisthisthis).isind = 1;

        Vector<int> &redidIndexes = (**thisthisthis).dIndexes;

        if ( !backupisind )
        {
            // Add indices for vectors

            int i;
            int j;
            int k;

            if ( a.size() )
            {
                for ( k = 0 ; k < a.size() ; k++ )
                {
                    const SparseVector<gentype> &x = *a(k);

                    i = 0;
                    j = 0;

                    while ( j < x.nearindsize() )
                    {
                        if ( i < redidIndexes.size() )
                        {
                            if ( redidIndexes(i) < x.ind(j) )
                            {
                                i++;
                            }

                            else if ( redidIndexes(i) > x.ind(j) )
                            {
                                redidIndexes.add(i);
                                redidIndexes("&",i) = x.ind(j);
                                i++;
                                j++;
                            }

                            else
                            {
                                i++;
                                j++;
                            }
                        }

                        else
                        {
                            NiceAssert( i == redidIndexes.size() );

                            redidIndexes.add(i);
                            redidIndexes("&",i) = x.ind(j);
                            i++;
                            j++;
                        }
                    }
                }
            }
        }

        addinOverwriteInd();
    }

    return;
}

void MercerKernel::addinOverwriteInd(void) const
{
    if ( combinedOverwriteSrc.size() )
    {
        Vector<int> &redidIndexes = (**thisthisthis).dIndexes;

        int i = 0;
        int j = 0;

        // Remove indices that are used for overwrite

        while ( ( i < redidIndexes.size() ) && ( j < combinedOverwriteSrc.size() ) )
        {
            if ( redidIndexes(i) < combinedOverwriteSrc(j) )
            {
                i++;
            }

            else if ( redidIndexes(i) > combinedOverwriteSrc(j) )
            {
                j++;
            }

            else
            {
                redidIndexes.remove(i);
            }
        }
    }

    return;
}

void MercerKernel::removeOverwriteInd(void) const
{
    if ( combinedOverwriteSrc.size() )
    {
        // Need to correct for indices

        (**thisthisthis).isind    = backupisind;
        (**thisthisthis).dIndexes = backupdIndexes;
    }

    return;
}



























// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================

int MercerKernel::twoProductDiverted(gentype &result, const SparseVector<gentype> &x, const SparseVector<gentype> &y, int xconsist, int assumreal) const
{
//errstream() << "phantomxyzmercer 0\n";
    if ( assumreal )
    {
//errstream() << "phantomxyzmercer 1\n";
        return twoProductDivertedNoConj(result,x,y,xconsist,assumreal);
//errstream() << "phantomxyzmercer 2\n";
    }

    addinOverwriteInd(x,y);

    // If x pre-processing is enabled:
    //
    // ( ( x - 1xstep )/xscale )' . ( y - 1ystep )/yscale
    // = ( x'.y - sum(x).ystep - conj(xstep).sum(y) + conj(xstep).ystep.N )/(xscale*yscale)
    //
    // where xstep, xscale, ystep and yscale are all scalars and already
    // include correction for shifting/scaling and indexing.
    //
    // leftPlain:  = ( x'.y - sum(x).ystep       )/yscale
    // rightPlain: = ( x'.y - conj(xstep).sum(y) )/xscale

    // Step 1 - common for all cases

    {
        if ( ( !isShifted() && !isScaled() ) || isLeftRightPlain() )
        {
            if ( !isIndex() )
            {
                getTwoProd(result,x,y,0,1,0,xconsist,assumreal);
            }

            else
            {
                getTwoProd(result,x,y,1,1,0,xconsist,assumreal);
            }
        }

        else if ( !isShifted() || isLeftRightPlain() )
        {
            if ( !isIndex() )
            {
                getTwoProd(result,x,y,0,1,3,xconsist,assumreal);
            }

            else
            {
                getTwoProd(result,x,y,1,1,3,xconsist,assumreal);
            }
        }

        else
        {
            // If isLeftPlain:
            //
            // x'(sc.*(y+sh)) = x'.diag(sc).(y+sh)
            //                = x'.diag(sc).y + x'.diag(sc).sh
            //                = x'.S.y + x'.S.sh
            //
            // If isRightPlain:
            //
            // (sc.*(x+sh))'y = (x+sh)'.diag(sc).y
            //                = x'.diag(sc).y + sh'.diag(sc).y
            //
            // else:
            //
            // (sc.*(x+sh))'(sc.*(y+sh)) = (x+sh)'.diag(sc.*sc).(y+sh)
            //                           = x'.diag(sc.*sc).y + x'.diag(sc.*sc).(sh./sc) + (sh./sc)'.diag(sc.*sc).y + sh'.diag(sc.*sc).sh
            //                           = x'.S.y + x'.S.dShift + dShift'.S.y + dShiftProd

            // NB: sc(i).*sc(i) = outerProd(sc(i),sc(i)) for vector-valued case

            if ( isLeftPlain() )
            {
                NiceAssert( isRightNormal() );

                gentype tempb;

                if ( !isIndex() )
                {
                    getTwoProd(result,x,y,0,1,2,xconsist,assumreal);
                    getTwoProd(tempb,dShift,y,0,1,2,xconsist,assumreal);
                }

                else
                {
                    getTwoProd(result,x,y,1,1,2,xconsist,assumreal);
                    getTwoProd(tempb,dShift,y,1,1,2,xconsist,assumreal);
                }

                result += tempb;
            }

            else if ( isRightPlain() )
            {
                NiceAssert( isLeftNormal() );

                gentype tempa;

                if ( !isIndex() )
                {
                    getTwoProd(result,x,y,0,1,1,xconsist,assumreal);
                    getTwoProd(tempa,x,dShift,0,1,1,xconsist,assumreal);
                }

                else
                {
                    getTwoProd(result,x,y,1,1,1,xconsist,assumreal);
                    getTwoProd(tempa,x,dShift,1,1,1,xconsist,assumreal);
                }

                result += tempa;
            }

            else
            {
                NiceAssert( isLeftRightNormal() );

                gentype tempa;
                gentype tempb;

                if ( !isIndex() )
                {
                    getTwoProd(result,x,y,0,1,3,xconsist,assumreal);
                    getTwoProd(tempa,x,dShift,0,1,3,xconsist,assumreal);
                    getTwoProd(tempb,dShift,y,0,1,3,xconsist,assumreal);
                }

                else
                {
                    getTwoProd(result,x,y,1,1,3,xconsist,assumreal);
                    getTwoProd(tempa,x,dShift,1,1,3,xconsist,assumreal);
                    getTwoProd(tempb,dShift,y,1,1,3,xconsist,assumreal);
                }

                result += tempa;
                result += tempb;
                result += dShiftProd;
            }
        }
    }

//errstream() << "phantomxyzmercer 100\n";
    removeOverwriteInd();

    return result.isValEqn();
}

int MercerKernel::twoProductDivertedRevConj(gentype &result, const gentype &xyres, const SparseVector<gentype> &x, const SparseVector<gentype> &y, int xconsist, int assumreal) const
{
    if ( xyres.isCommutative() )
    {
        result = xyres;
        result.conj();
        return result.isValEqn();
    }

    if ( assumreal )
    {
        return twoProductDivertedNoConj(result,x,y,xconsist,assumreal);
    }

    addinOverwriteInd(x,y);

    if ( ( !isShifted() && !isScaled() ) || isLeftRightPlain() )
    {
        if ( !isIndex() )
	{
            getTwoProd(result,x,y,0,2,0,xconsist,assumreal);
	}

	else
	{
            getTwoProd(result,x,y,1,2,0,xconsist,assumreal);
	}
    }

    else if ( !isShifted() || isLeftRightPlain() )
    {
        if ( !isIndex() )
	{
            getTwoProd(result,x,y,0,2,3,xconsist,assumreal);
	}

	else
	{
            getTwoProd(result,x,y,1,2,3,xconsist,assumreal);
	}
    }

    else
    {
        // If isLeftPlain:
        //
        // x'(sc.*(y+sh)) = x'.diag(sc).(y+sh)
        //                = x'.diag(sc).y + x'.diag(sc).sh
        //                = x'.S.y + x'.S.sh
        //
        // If isRightPlain:
        //
        // (sc.*(x+sh))'y = (x+sh)'.diag(sc).y
        //                = x'.diag(sc).y + sh'.diag(sc).y
        //
        // else:
        //
	// ((x+sh).*sc)'((y+sh).*sc) = (x+sh)'.diag(sc.*sc).(y+sh)
	//                           = x'.diag(sc.*sc).y + x'.diag(sc.*sc).(sh./sc) + (sh./sc)'.diag(sc.*sc).y + sh'.diag(sc.*sc).sh
        //                           = x'.S.y + x'.S.dShift + dShift'.S.y + dShiftProd

        if ( isLeftPlain() )
        {
            NiceAssert( isRightNormal() );

            gentype tempb;

            if ( !isIndex() )
            {
                getTwoProd(result,x,y,0,2,2,xconsist,assumreal);
                getTwoProd(tempb,dShift,y,0,2,2,xconsist,assumreal);
            }

            else
            {
                getTwoProd(result,x,y,1,2,2,xconsist,assumreal);
                getTwoProd(tempb,dShift,y,1,2,2,xconsist,assumreal);
            }

            result += tempb;
        }

        else if ( isRightPlain() )
        {
            NiceAssert( isLeftNormal() );

            gentype tempa;

            if ( !isIndex() )
            {
                getTwoProd(result,x,y,0,2,1,xconsist,assumreal);
                getTwoProd(tempa,x,dShift,0,2,1,xconsist,assumreal);
            }

            else
            {
                getTwoProd(result,x,y,1,2,1,xconsist,assumreal);
                getTwoProd(tempa,x,dShift,1,2,1,xconsist,assumreal);
            }

            result += tempa;
        }

        else
        {
            NiceAssert( isLeftRightNormal() );

            gentype tempa;
            gentype tempb;

            if ( !isIndex() )
            {
                getTwoProd(result,x,y,0,2,3,xconsist,assumreal);
                getTwoProd(tempa,x,dShift,0,2,3,xconsist,assumreal);
                getTwoProd(tempb,dShift,y,0,2,3,xconsist,assumreal);
            }

            else
            {
                getTwoProd(result,x,y,1,2,3,xconsist,assumreal);
                getTwoProd(tempa,x,dShift,1,2,3,xconsist,assumreal);
                getTwoProd(tempb,dShift,y,1,2,3,xconsist,assumreal);
            }

            result += tempa;
            result += tempb;
            result += dShiftProdRevConj;
        }
    }

    removeOverwriteInd();

    return result.isValEqn();
}

int MercerKernel::twoProductDivertedNoConj(gentype &result, const SparseVector<gentype> &x, const SparseVector<gentype> &y, int xconsist, int assumreal) const
{
    (void) assumreal;

//errstream() << "phantomxyzmerceraa 0\n";
    addinOverwriteInd(x,y);

    if ( ( !isShifted() && !isScaled() ) || isLeftRightPlain() )
    {
        if ( !isIndex() )
	{
            getTwoProd(result,x,y,0,0,0,xconsist,assumreal);
	}

	else
	{
            getTwoProd(result,x,y,1,0,0,xconsist,assumreal);
	}
    }

    else if ( !isShifted() || isLeftRightPlain() )
    {
        if ( !isIndex() )
	{
            getTwoProd(result,x,y,0,0,3,xconsist,assumreal);
	}

	else
	{
            getTwoProd(result,x,y,1,0,3,xconsist,assumreal);
	}
    }

    else
    {
        // If isLeftPlain:
        //
        // x'(sc.*(y+sh)) = x'.diag(sc).(y+sh)
        //                = x'.diag(sc).y + x'.diag(sc).sh
        //                = x'.S.y + x'.S.sh
        //
        // If isRightPlain:
        //
        // (sc.*(x+sh))'y = (x+sh)'.diag(sc).y
        //                = x'.diag(sc).y + sh'.diag(sc).y
        //
        // else:
        //
	// ((x+sh).*sc)'((y+sh).*sc) = (x+sh)'.diag(sc.*sc).(y+sh)
	//                           = x'.diag(sc.*sc).y + x'.diag(sc.*sc).(sh./sc) + (sh./sc)'.diag(sc.*sc).y + sh'.diag(sc.*sc).sh
        //                           = x'.S.y + x'.S.dShift + dShift'.S.y + dShiftProd

        if ( isLeftPlain() )
        {
            NiceAssert( isRightNormal() );

            gentype tempb;

            if ( !isIndex() )
            {
                getTwoProd(result,x,y,0,0,2,xconsist,assumreal);
                getTwoProd(tempb,dShift,y,0,0,2,xconsist,assumreal);
            }

            else
            {
                getTwoProd(result,x,y,1,0,2,xconsist,assumreal);
                getTwoProd(tempb,dShift,y,1,0,2,xconsist,assumreal);
            }

            result += tempb;
        }

        else if ( isRightPlain() )
        {
            NiceAssert( isLeftNormal() );

            gentype tempa;

            if ( !isIndex() )
            {
                getTwoProd(result,x,y,0,0,1,xconsist,assumreal);
                getTwoProd(tempa,x,dShift,0,0,1,xconsist,assumreal);
            }

            else
            {
                getTwoProd(result,x,y,1,0,1,xconsist,assumreal);
                getTwoProd(tempa,x,dShift,1,0,1,xconsist,assumreal);
            }

            result += tempa;
        }

        else
        {
            NiceAssert( isLeftRightNormal() );

            gentype tempa;
            gentype tempb;

            if ( !isIndex() )
            {
                getTwoProd(result,x,y,0,0,3,xconsist,assumreal);
                getTwoProd(tempa,x,dShift,0,0,3,xconsist,assumreal);
                getTwoProd(tempb,dShift,y,0,0,3,xconsist,assumreal);
            }

            else
            {
                getTwoProd(result,x,y,1,0,3,xconsist,assumreal);
                getTwoProd(tempa,x,dShift,1,0,3,xconsist,assumreal);
                getTwoProd(tempb,dShift,y,1,0,3,xconsist,assumreal);
            }

            result += tempa;
            result += tempb;
            result += dShiftProdNoConj;
        }
    }

    removeOverwriteInd();

//errstream() << "phantomxyzmerceraa 1\n";
    return result.isValEqn();
}

int MercerKernel::oneProductDiverted(gentype &result, const SparseVector<gentype> &v, int xconsist, int assumreal) const
{
    // FIXME: modify so that copy constructor not needed.

    addinOverwriteInd(v);

    NiceAssert( isLeftRightNormal() );

    if ( !isShifted() && !isScaled() )
    {
        if ( !isIndex() )
	{
            getOneProd(result,v,0,0,xconsist,assumreal);
	}

	else
	{
            getOneProd(result,v,1,0,xconsist,assumreal);
	}
    }

    else if ( !isShifted() )
    {
        if ( !isIndex() )
	{
            getOneProd(result,v,0,3,xconsist,assumreal);
	}

	else
	{
            getOneProd(result,v,1,3,xconsist,assumreal);
	}
    }

    else
    {
        SparseVector<gentype> vv(v);

	vv += dShift;
        vv /= dScale;

        if ( !isIndex() )
	{
            getOneProd(result,vv,0,0,xconsist,assumreal);
	}

	else
	{
            getOneProd(result,vv,1,0,xconsist,assumreal);
	}
    }

    removeOverwriteInd();

    return result.isValEqn();
}

int MercerKernel::threeProductDiverted(gentype &result, const SparseVector<gentype> &v, const SparseVector<gentype> &w, const SparseVector<gentype> &x, int xconsist, int assumreal) const
{
    // FIXME: modify so that copy constructor not needed.

    addinOverwriteInd(v,w,x);

    NiceAssert( isLeftRightNormal() );

    if ( !isShifted() && !isScaled() )
    {
        if ( !isIndex() )
	{
            getThreeProd(result,v,w,x,0,0,xconsist,assumreal);
	}

	else
	{
            getThreeProd(result,v,w,x,1,0,xconsist,assumreal);
	}
    }

    else if ( !isShifted() )
    {
        if ( !isIndex() )
	{
            getThreeProd(result,v,w,x,0,3,xconsist,assumreal);
	}

	else
	{
            getThreeProd(result,v,w,x,1,3,xconsist,assumreal);
	}
    }

    else
    {
        SparseVector<gentype> vv(v);
        SparseVector<gentype> ww(w);
        SparseVector<gentype> xx(x);

	vv += dShift;
        vv /= dScale;

	ww += dShift;
        ww /= dScale;

	xx += dShift;
        xx /= dScale;

        if ( !isIndex() )
	{
            getThreeProd(result,vv,ww,xx,0,0,xconsist,assumreal);
	}

	else
	{
            getThreeProd(result,vv,ww,xx,1,0,xconsist,assumreal);
	}
    }

    removeOverwriteInd();

    return result.isValEqn();
}

int MercerKernel::fourProductDiverted(gentype &result, const SparseVector<gentype> &v, const SparseVector<gentype> &w, const SparseVector<gentype> &x, const SparseVector<gentype> &y, int xconsist, int assumreal) const
{
    // FIXME: modify so that copy constructor not needed.

    addinOverwriteInd(v,w,x,y);

    NiceAssert( isLeftRightNormal() );

    if ( !isShifted() && !isScaled() )
    {
        if ( !isIndex() )
	{
            getFourProd(result,v,w,x,y,0,0,xconsist,assumreal);
	}

	else
	{
            getFourProd(result,v,w,x,y,1,0,xconsist,assumreal);
	}
    }

    else if ( !isShifted() )
    {
        if ( !isIndex() )
	{
            getFourProd(result,v,w,x,y,0,3,xconsist,assumreal);
	}

	else
	{
            getFourProd(result,v,w,x,y,1,3,xconsist,assumreal);
	}
    }

    else
    {
        SparseVector<gentype> vv(v);
        SparseVector<gentype> ww(w);
        SparseVector<gentype> xx(x);
        SparseVector<gentype> yy(y);

	vv += dShift;
        vv /= dScale;

	ww += dShift;
        ww /= dScale;

	xx += dShift;
        xx /= dScale;

	yy += dShift;
        yy /= dScale;

        if ( !isIndex() )
	{
            getFourProd(result,vv,ww,xx,yy,0,0,xconsist,assumreal);
	}

	else
	{
            getFourProd(result,vv,ww,xx,yy,1,0,xconsist,assumreal);
	}
    }

    removeOverwriteInd();

    return result.isValEqn();
}


int MercerKernel::mProductDiverted(int m, gentype &result, const Vector<const SparseVector<gentype> *> &a, int xconsist, int assumreal) const
{
    NiceAssert( ( m >= 0 ) && ( m <= a.size() ) );

    addinOverwriteInd(a);

    // FIXME: modify so that copy constructor not needed

    NiceAssert( isLeftRightNormal() );

    {
        if ( !isIndex() )
	{
            retVector<const SparseVector<gentype> *> tmpva;

            getmProd(result,a(zeroint(),1,m-1,tmpva),0,0,xconsist,assumreal);
	}

	else
	{
            retVector<const SparseVector<gentype> *> tmpva;

            getmProd(result,a(zeroint(),1,m-1,tmpva),1,0,xconsist,assumreal);
	}
    }

    removeOverwriteInd();

    return result.isValEqn();
}

















void MercerKernel::fillXYMatrix(double &altxyr00, double &altxyr10, double &altxyr11, double &altxyr20, double &altxyr21, double &altxyr22, 
                                const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, 
                                const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, 
                                const double *xy00, const double *xy10, const double *xy11, const double *xy20, const double *xy21, const double *xy22, 
                                int doanyhow, int assumreal) const
{
    if ( xy00 ) { altxyr00 = *xy00; }
    if ( xy10 ) { altxyr10 = *xy10; }
    if ( xy11 ) { altxyr11 = *xy11; }
    if ( xy20 ) { altxyr20 = *xy20; }
    if ( xy21 ) { altxyr21 = *xy21; }
    if ( xy22 ) { altxyr22 = *xy22; }

    if ( !xy00 && ( needsMatDiff() || doanyhow ) ) { altxyr00 = (double) getmnorm(xainfo,xa,2,0,assumreal); }
    if ( !xy10 && ( needsMatDiff() || doanyhow ) ) { twoProductDiverted(altxyr10,xb,xa);                    }
    if ( !xy11 && ( needsMatDiff() || doanyhow ) ) { altxyr11 = (double) getmnorm(xbinfo,xb,2,0,assumreal); }
    if ( !xy20 && ( needsMatDiff() || doanyhow ) ) { twoProductDiverted(altxyr20,xc,xa);                    }
    if ( !xy21 && ( needsMatDiff() || doanyhow ) ) { twoProductDiverted(altxyr21,xc,xb);                    }
    if ( !xy22 && ( needsMatDiff() || doanyhow ) ) { altxyr22 = (double) getmnorm(xcinfo,xc,2,0,assumreal); }

    return;
}

void MercerKernel::fillXYMatrix(double &altxyr00, double &altxyr10, double &altxyr11, double &altxyr20, double &altxyr21, double &altxyr22, double &altxyr30, double &altxyr31, double &altxyr32, double &altxyr33, 
                                const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, const SparseVector<gentype> &xd, 
                                const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, const vecInfo &xdinfo, 
                                const double *xy00, const double *xy10, const double *xy11, const double *xy20, const double *xy21, const double *xy22, const double *xy30, const double *xy31, const double *xy32, const double *xy33, 
                                int doanyhow, int assumreal) const
{
    if ( xy00 ) { altxyr00 = *xy00; }
    if ( xy10 ) { altxyr10 = *xy10; }
    if ( xy11 ) { altxyr11 = *xy11; }
    if ( xy20 ) { altxyr20 = *xy20; }
    if ( xy21 ) { altxyr21 = *xy21; }
    if ( xy22 ) { altxyr22 = *xy22; }
    if ( xy30 ) { altxyr30 = *xy30; }
    if ( xy31 ) { altxyr31 = *xy31; }
    if ( xy32 ) { altxyr32 = *xy32; }
    if ( xy33 ) { altxyr32 = *xy33; }

    if ( !xy00 && ( needsMatDiff() || doanyhow ) ) { altxyr00 = (double) getmnorm(xainfo,xa,2,0,assumreal); }
    if ( !xy10 && ( needsMatDiff() || doanyhow ) ) { twoProductDiverted(altxyr10,xb,xa);                    }
    if ( !xy11 && ( needsMatDiff() || doanyhow ) ) { altxyr11 = (double) getmnorm(xbinfo,xb,2,0,assumreal); }
    if ( !xy20 && ( needsMatDiff() || doanyhow ) ) { twoProductDiverted(altxyr20,xc,xa);                    }
    if ( !xy21 && ( needsMatDiff() || doanyhow ) ) { twoProductDiverted(altxyr21,xc,xb);                    }
    if ( !xy22 && ( needsMatDiff() || doanyhow ) ) { altxyr22 = (double) getmnorm(xcinfo,xc,2,0,assumreal); }
    if ( !xy30 && ( needsMatDiff() || doanyhow ) ) { twoProductDiverted(altxyr30,xd,xa);                    }
    if ( !xy31 && ( needsMatDiff() || doanyhow ) ) { twoProductDiverted(altxyr31,xd,xb);                    }
    if ( !xy32 && ( needsMatDiff() || doanyhow ) ) { twoProductDiverted(altxyr32,xd,xc);                    }
    if ( !xy33 && ( needsMatDiff() || doanyhow ) ) { altxyr33 = (double) getmnorm(xdinfo,xd,2,0,assumreal); }

    return;
}

const Matrix<double> &MercerKernel::fillXYMatrix(int m, Matrix<double> &altres, Vector<const SparseVector<gentype> *> &x, Vector<const vecInfo *> &xinfo, const Matrix<double> *optionCache, int doanyhow, int assumreal) const
{
    NiceAssert( !optionCache || ( ( (*optionCache).numRows() == m ) && ( (*optionCache).numCols() == m ) ) );

//    if ( !optionCache && ( ( ( m >= 4 ) && needsMatDiff() ) || doanyhow ) )
    if ( !optionCache && ( needsMatDiff() || doanyhow ) )
    {
        altres.resize(m,m);

        int i,j;

        for ( i = 0 ; i < m ; i++ )
        {
            altres("&",i,i) = (double) getmnorm(*(xinfo(i)),*(x(i)),2,0,assumreal);

            if ( i )
            {
                for ( j = 0 ; j < i ; j++ )
                {
                    twoProductDiverted(altres("&",i,j),*(x(i)),*(x(j)));
                    altres("&",j,i) = altres("&",i,j);
                }
            }
        }
    }

    return optionCache ? *optionCache : altres;
}








































// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================

void Bn(gentype &res, int n, const gentype &z);
void Jn(gentype &res, int n, const gentype &z);

void Bn(gentype &res, int n, const gentype &z)
{
    int k;
    gentype x,xx,xxx;

    res = 0;

    for ( k = 0 ; k <= n+1 ; k++ )
    {
        x =  z;
        x += (((double) n)+1)/2.0;
        x -= (double) k;

        xx = (double) n;
        xxx = 0.0;

        res += ((real(x)>=xxx)?pow(x,xx):xxx)*(xnCr(n+1,k)*((k%2)?-1.0:+1.0)/((double) xnfact(n)));
    }

    return;
}


void Jn(gentype &res, int n, const gentype &z)
{
    // Jn(x) = sin^(2n+1) (-1/sin(x) d/dx)^n (pi-x)/sin(x)
    //
    // See: Youngmin Cho, Lawrence K. Saul - Kernel Methods for Deep Learning

    NiceAssert( n >= 0 );

    switch ( n )
    {
        case 0:
        {
            // pi - z

            res =  NUMBASE_PI;
            res -= z;

            break;
        }

        case 1:
        {
            // sin(z) + (pi-z).cos(z)
         
            res =  NUMBASE_PI;
            res -= z;
            res *= cos(z);
            res += sin(z);

            break;
        }

        case 2:
        {
            // 3.sin(z).cos(z) + (pi-z).( 1 + 2.cos(z).cos(z) )

            gentype cosz;
            gentype sinz;
            gentype piminusz;
            gentype threesincos;

            cosz = cos(z);
            sinz = sin(z);

            piminusz =  NUMBASE_PI;
            piminusz -= z;

            threesincos =  cosz;
            threesincos *= sinz;
            threesincos *= 3.0;

            res =  cosz;
            res *= cosz;
            res *= 2.0;
            res += 1.0;
            res *= piminusz;
            res += threesincos;

            break;
        }

        default:
        {
            svmvolatile static svm_mutex eyelock;
            svm_mutex_lock(eyelock);

            svmvolatile static SparseVector<gentype> JnFuncsVol;
            SparseVector<gentype> &JnFuncs = const_cast<SparseVector<gentype> &>(JnFuncsVol);

            gentype sinfn("sin(x)");
            gentype cosecfn("cosec(x)");

            // We need to calculate the function.  Because this is slow,
            // we want to keep that function once calculated.  The sparse
            // vector JnFuncs does this, and gentype allows us to do the
            // requisit algebra to calculate the function.
            //
            // General form is:
            //
            // Jn(x) = (-1)^n sin(x)^(2n+1) (1/sin(x) d/dx)^n (pi-x)/sin(x)
            //       = (-1)^n sin(x)^(2n+1) (cosec(x) d/dx)^n (pi-x).cosec(x)
            //
            // Change of variables:
            //
            // d/dy = 1/sin(x) d/dx
            //

            if ( !(JnFuncs.isindpresent(n)) )
            {
                JnFuncs("&",n) = "(pi()-x).*cosec(x)";

                int i;

                if ( n )
                {
                    for ( i = 0 ; i < n ; i++ )
                    {
                        JnFuncs("&",n).realDeriv(0,0);
                        JnFuncs("&",n) *= cosecfn;
                    }
                }

                for ( i = 0 ; i < (2*n)+1 ; i++ )
                {
                    JnFuncs("&",n) *= sinfn;
                }

                if ( n%2 )
                {
                    JnFuncs("&",n).negate();
                }
            }

            gentype zz(z);

            // One catch: gentype cannot simplify the equations, and in
            // particular it will leave sin(x) factors on the denominator.
            // This can lead to divide by zero errors.  The solution is to
            // slightly perturb z if |sin(z)| is too small.
            //
            // Note that for sufficiently small z sin(z) = z, or close enough.
            // Note also the periodicity of z, and the need to keep the angle

            if ( (double) abs2(sin(zz)) < BADZEROTOL )
            {
                if ( (double) abs2(zz) < BADZEROTOL )
                {
                    // No angle to reliably preserve

                    zz = BADZEROTOL;
                }

                else
                {
                    // Preserve the angle

                    while ( (double) abs2(sin(zz)) < BADZEROTOL )
                    {
                        zz *= (1+BADZEROTOL);
                    }
                }
            }

            res = JnFuncs(n)(zz);

            svm_mutex_unlock(eyelock);

            break;
        }
    }

    return;
}















// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================


















































// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================


















































// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================


















































// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================

//KERNELSHERE

void MercerKernel::Kbase(gentype &res, int q, int typeis,
                         const gentype &txyprod, const gentype &tyxprod, const gentype &diffis,
                         Vector<const SparseVector<gentype> *> &x,
                         Vector<const vecInfo *> &xinfo,
                         Vector<const gentype *> &xnorm,
                         Vector<int> &iiii,
                         int xdim, int m, int densetype, int resmode, int mlid) const
{
    // Design decision: ii(0),ii(1) form i,j pair for base, rest ignored

  NiceAssert( q >= 0 );
  NiceAssert( q < size() );
  NiceAssert( typeis != -1 );

  if ( ( typeis >= 800 ) && ( typeis <= 899 ) )
  {
    kernel8xx(q,res,q,typeis,x,xinfo,iiii,xdim,m,densetype,resmode,mlid);
  }

  else if ( ( typeis >= 900 ) && ( typeis <= 999 ) )
  {
    kernel9xx(q,res,q,typeis,x,xinfo,iiii,xdim,m,densetype,resmode,mlid);
  }

  else if ( resmode == 0x80 )
  {
    res = 0.0;
  }

  else if ( resmode == 0 )
  {
    gentype xyprod;

    xyprod =  txyprod;
    xyprod += tyxprod;
    xyprod /= 2.0;

    // (I suspect this will make the kernel Mercer, but haven't proven it)

    if ( densetype == 1 )
    {
        // Actually want dense derivative

        typeis = calcDenseDerivPair(typeis);
    }

    if ( densetype == 2 )
    {
        // Actually want dense integral

        typeis = calcDenseIntPair(typeis);
    }

    // Apply to first two only (design decision)

    processOverwrites(q,*(x(zeroint())),*(x(1)));

    SparseVector<gentype> xx;
    SparseVector<gentype> yy;

    int i,j;

    if ( kinf(q).usesVector || kinf(q).usesMinDiff || kinf(q).usesMaxDiff )
    {
        if ( m != 2 )
        {
            throw("Vector-function kernels are not implemented for m != 2");
        }

        xx = *(x(zeroint()));
        yy = *(x(1));

        if ( isLeftNormal()  ) { preShiftScale(xx,*(x(zeroint()))); }
        if ( isRightNormal() ) { preShiftScale(yy,*(x(1)));         }

        xx.conj();

        xx -= yy;
        xx += yy; // xx now has all indices
        yy -= xx;
        yy += xx; // yy now has all indices, shared with xx
    }

    retVector<gentype> tmpva;

    const Vector<gentype> &r = dRealConstants(q)(1,1,dRealConstants(q).size()-1,tmpva);
    const Vector<int> &ic = dIntConstants(q);

//ADDHERE - new kernel implementations go here
    switch ( typeis )
    {
        // Kernels descriptions:
        //
        // rj = real constant j
        // ij = integer constant j
        // a = x'x
        // b = y'y
        // z = x'y
        // d = ||x-y||^2

        case 0:
        {
            res = r(1);
            break;
        }

        case 1:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            break;
        }

        case 2:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            res += r(1);
            raiseto(res,ic(0));

            break;
        }

        case 3:
        {
            res = diffis;
            res /= -2.0;
            res /= r(0);
            res /= r(0);
            res -= r(1);
            OP_exp(res);
            res *= AltDiffNormConst(xdim,m,r(0));

            break;
        }

        case 4:
        {
            res = diffis;
            OP_sqrt(res);
            res.negate();
            res /= r(0);
            res -= r(1);
            OP_exp(res);

            break;
        }

        case 5:
        {
            res = diffis;
            OP_sqrt(res);
            res = epow(res,r(1));
            res.negate();
            res /= epow(r(0),r(1));
            res /= r(1);
            res -= r(2);
            OP_exp(res);

            break;
        }

        case 6:
        {
            res = 0.0;

            if ( xx.nearindsize() )
            {
                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    xx("&",xx.ind(i)) = epow(xx.direcref(i)/r(0),r(1));
                    yy("&",yy.ind(i)) = epow(yy.direcref(i)/r(0),r(1));
                    xx("&",xx.ind(i)) -= yy(yy.ind(i));
                    res += exp(-(r(4)*epow(xx.direcref(i),r(2))));
                }

                res = epow(res,r(3));
            }

            break;
        }

        case 7:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            res += r(1);
            OP_tanh(res);

            break;
        }

        case 8:
        {
            res  = diffis;
            res /= 2.0;
            res /= r(0);
            res /= r(0);
            res /= r(1);
            res += 1.0;
            res = epow(res,-r(1));

            break;
        }

        case 9:
        {
            res = diffis;
            res /= r(0);
            res /= r(0);
            res += r(1)*r(1);
            OP_sqrt(res);

            break;
        }

        case 10:
        {
            res = diffis;
            res /= r(0);
            res /= r(0);
            res += r(1)*r(1);
            OP_sqrt(res);
            OP_einv(res);

            break;
        }

        case 11:
        {
            res = zerogentype();

            gentype tempres(diffis);
            OP_sqrt(tempres);
            tempres /= r(0);
            tempres.negate();

            if ( (double) abs2(tempres) < 1.0 )
            {
                res = tempres;
                res *= tempres;
                res.negate();
                res += 1.0;
                OP_sqrt(res);
                res *= tempres;
                res += acos(tempres);
                res *= NUMBASE_2ONPI;
            }

            break;
        }

        case 12:
        {
            res = zerogentype();

            gentype tempres(diffis);
            OP_sqrt(tempres);

            {
                res = tempres;
                res *= tempres;
                res *= tempres;
                res /= 2.0;
                res /= r(0);
                res /= r(0);
                res /= r(0);
                res *= 0.6666666666666666666666;
                res *= r(0);
                res -= tempres;
                res /= 0.6666666666666666666666;
                res /= r(0);
                res += 1.0;
            }

            break;
        }

        case 13:
        {
            res = diffis;
            OP_sqrt(res);
            res /= r(0);
            OP_sinc(res);

            break;
        }

        case 14:
        {
            res = diffis;
            res /= r(0);
            res /= r(0);
            OP_sqrt(res);
            res  = epow(res,r(1));
            res *= -1.0;
            break;
         }

        case 15:
        {
            res = diffis;
            res /= r(0);
            res /= r(0);
            OP_sqrt(res);
            res  = epow(res,r(1));
            res += 1.0;
            OP_log(res);
            res.negate();

            break;
        }

        case 16:
        {
            gentype xymin;
            gentype tempres;
            gentype tempras;

            res = 1.0;

            if ( xx.nearindsize() )
            {
                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    xymin = ( real(xx.direcref(i)) < real(yy.direcref(i)) ) ? xx.direcref(i) : yy.direcref(i);
                    xymin /= r(0);

                    tempres = 1.0;
                    tempres += tempres;

                    tempras = xx.direcref(i);
                    tempras /= r(0);
                    tempras *= yy.direcref(i);
                    tempras /= r(0);
                    tempras *= xymin;

                    tempres += tempras;

                    tempras *= xymin;
                    tempras /= 2.0;

                    tempres += tempras;

                    tempras = xymin;
                    tempras *= xymin;
                    tempras *= xymin;
                    tempras /= 3.0;

                    tempres += tempras;

                    res *= tempres;
                }
            }

            break;
        }

        case 17:
        {
            res = 1.0;

            if ( xx.nearindsize() )
            {
                gentype temp;

                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    Bn(temp,(2*ic(0))+1,(xx.direcref(i)/r(0))-(yy.direcref(i)/r(0)));

                    res *= temp;
                }
            }

            break;
        }

        case 18:
        {
            int i0 = ic(0);
            double r0 = (double) r(0);
            double r1 = (double) r(1);
            double d = (double) diffis;

            numbase_jn(res.force_double(),i0+1,(r1*sqrt((double) d)/r0)/(pow(sqrt(d)/r0,-i0*(r1+1))));

            break;
        }

        case 19:
        {
            res = diffis;
            res /= r(0);
            res /= r(0);
            res += 1.0;
            OP_einv(res);

            break;
        }

        case 20:
        {
            gentype tempres;

            res = 1.0;

            if ( xx.nearindsize() )
            {
                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    tempres = xx.direcref(i);
                    tempres *= yy.direcref(i);
                    tempres /= xx.direcref(i)+yy.direcref(i);
                    tempres *= 2.0;
                    tempres /= r(0);

                    res -= tempres;
                }
            }

            break;
        }

        case 21:
        {
            gentype xymin;

            res = 0.0;

            if ( xx.nearindsize() )
            {
                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    xymin = ( real(xx.direcref(i)) < real(yy.direcref(i)) ) ? xx.direcref(i) : yy.direcref(i); 
                    xymin /= r(0);

                    res += xymin;
                }
            }

            break;
        }

        case 22:
        {
            gentype xymin;
            gentype xxx,yyy;

            res = 0.0;

            if ( xx.nearindsize() )
            {
                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    xxx = eabs2(xx.direcref(i));
                    yyy = eabs2(yy.direcref(i));

                    xxx /= r(0);
                    yyy /= r(0);

                    xxx = epow(xxx,r(1));
                    yyy = epow(yyy,r(2));

                    xymin = ( xxx < yyy ) ? xxx : yyy;

                    res += xymin;
                }
            }

            break;
        }

        case 23:
        {
            res = diffis;
            OP_sqrt(res);
            res /= r(0);	
            res = epow(res,r(1));
            res += 1.0;
            OP_einv(res);

            break;
        }

        case 24:
        {
            gentype tmp = xyprod;

            tmp /= r(0);
            tmp /= r(0);

            res = tmp;
            raiseto(res,ic(0));
            res -= 1.0;
            res /= (tmp-1.0);

            break;
        }

        case 25:
        {
            res = diffis;
            OP_sqrt(res);
            res /= -r(0);
            res += NUMBASE_PI;
            OP_cosh(res);
            res *= NUMBASE_PI;

            break;
        }

        case 26:
        {
            res = diffis;
            res /= r(0);
            res = epow(res,r(1)+0.5);

            break;
         }

        case 27:
        {
            gentype tempres;

            res = diffis;
            res /= r(0);

            tempres = res;
            OP_sqrt(tempres);
            OP_log(tempres);

            res = epow(res,r(1));
            res *= tempres;

            break;
         }

        case 28:
        {
            SparseVector<SparseVector<gentype> > t;

            t("&",0)("&",0)  = m;
            t("&",0)("&",1)  = txyprod;
            t("&",0)("&",2)  = tyxprod;
            t("&",0)("&",3)  = diffis;
            t("&",0)("&",4)  = *(xnorm(zeroint()));
            t("&",0)("&",5)  = *(xnorm(1));
            t("&",1)("&",0)  = r(0);
            t("&",1)("&",1)  = r(1);
            t("&",1)("&",2)  = r(2);
            t("&",1)("&",3)  = r(3);
            t("&",1)("&",4)  = r(4);
            t("&",1)("&",5)  = r(5);
            t("&",1)("&",6)  = r(6);
            t("&",1)("&",7)  = r(7);
            t("&",1)("&",8)  = r(8);
            t("&",1)("&",9)  = r(9);
            t("&",1)("&",10) = r(10);
            t("&",3) = xx;
            t("&",4) = yy;

            SparseVector<SparseVector<int> > vused(r(10).varsUsed());

            if ( vused(2).nearindsize() )
            {
                for ( i = 0 ; i < vused(2).nearindsize() ; i++ )
                {
                    j = vused(2).ind(i);

                    Kbase(t("&",2)("&",j),q,j,txyprod,tyxprod,diffis,x,xinfo,xnorm,iiii,xdim,m,0,0,mlid);
                }
            }

            res = r(10)(t);

            break;
        }

        case 29:
        {
            double xrnorm = sqrt((double) abs2(*(xnorm(zeroint()))));
            double yrnorm = sqrt((double) abs2(*(xnorm(zeroint()))));

            double tmp = pow(xrnorm*yrnorm,ic(0))/NUMBASE_PI;

            if ( ( xrnorm < BADZEROTOL ) || ( yrnorm < BADZEROTOL ) )
            {
                Jn(res,ic(0),acosonedblgentype());
                res *= tmp;
            }

            else
            {
                gentype tempres;

                tempres = xyprod;
                tempres /= (xrnorm*yrnorm);
                OP_acos(tempres);

                Jn(res,ic(0),tempres);
                res *= tmp;
            }

            res *= r(0);
            res *= r(0);

            break;
        }

        case 30:
        {
            int i0 = ic(0);

            if ( i0 < 0 )
            {
                throw("Chaotic logistic kernel assumes i0 >= 0.");
            }

            gentype temp;

            if ( i0 )
            {
                temp =  1.0;
                temp += r(1);
                temp += r(1);
                OP_einv(temp);

                if ( xx.nearindsize() )
                {
                    for ( i = 0 ; i < xx.nearindsize() ; i++ )
                    {
                        xx.direref(i) /= r(0);
                        xx.direref(i) += r(2);
                        xx.direref(i) *= temp;
                        yy.direref(i) /= r(0);
                        yy.direref(i) += r(2);
                        yy.direref(i) *= temp;
                    }
                }
            }

            while ( i0 > 0 )
            {
                if ( xx.nearindsize() )
                {
                    for ( i = 0 ; i < xx.nearindsize() ; i++ )
                    {
                        temp = 2.0;
                        temp -= xx.direcref(i);
                        xx.direref(i) *= temp;
                        xx.direref(i) *= r(1);

                        temp = 2.0;
                        temp -= yy.direcref(i);
                        yy.direref(i) *= temp;
                        yy.direref(i) *= r(1);
                    }
                }

                i0--;
            }

            getTwoProd(res,xx,yy,0,1,0,0,0);
            break;
        }

        case 31:
        {
            int i0 = ic(0);

            if ( i0 < 0 )
            {
                throw("Summed Chaotic logistic kernel assumes i0 >= 0.");
            }

            gentype temp;
            getTwoProd(res,xx,yy,0,1,0,0,0);

            if ( i0 )
            {
                temp = 1.0;
                temp += r(1);
                temp += r(1);
                OP_einv(temp);

                if ( xx.nearindsize() )
                {
                    for ( i = 0 ; i < xx.nearindsize() ; i++ )
                    {
                        xx.direref(i) /= r(0);
                        xx.direref(i) += r(2);
                        xx.direref(i) *= temp;
                        yy.direref(i) /= r(0);
                        yy.direref(i) += r(2);
                        yy.direref(i) *= temp;
                    }
                }
            }

            while ( i0 > 0 )
            {
                if ( xx.nearindsize() )
                {
                    for ( i = 0 ; i < xx.nearindsize() ; i++ )
                    {
                        temp = 2.0;
                        temp -= xx.direcref(i);
                        xx.direref(i) *= temp;
                        xx.direref(i) *= r(1);

                        temp = 2.0;
                        temp -= yy.direcref(i);
                        yy.direref(i) *= temp;
                        yy.direref(i) *= r(1);
                    }
                }

                getTwoProd(temp,xx,yy,0,1,0,0,0);
                res += temp;
                i0--;
            }

            break;
        }

        case 32:
        {
            res = ( ( iiii(zeroint()) == iiii(1) ) && ( iiii(zeroint()) >= 0 ) ) ? r(1) : zerogentype();
            break;
        }

        case 33:
        {
            res = ( real(sqrt(diffis)) < real(r(zeroint())) ) ? 0.5/r(zeroint()) : zerogentype();
            break;
        }

        case 34:
        {
            res = diffis;
            OP_sqrt(res);
            res = ( real(res) < real(r(zeroint())) ) ? (1.0-(sqrt(res)/r(zeroint())))/r(zeroint()) : zerogentype();
            break;
        }

        case 35:
        {
            // ((2^(1-r1))/gamma(r1)).((sqrt(2.r1).sqrt(d)/r0)^r1).K_r1(sqrt(2.r1).sqrt(d)/r0)
            // (2^(1-r1)).(dd^r1).K_r1(dd)/gamma(r1)
            // 2.((dd/2)^r1).K_r1(dd)/gamma(r1)

            int i0 = (int) ic(0);
            double r0 = (double) r(0);
            double dd = sqrt(2*i0*((double) diffis))/r0;
            double qq = 0;
            double gg = 0;

            numbase_kn(qq,i0,dd);
            numbase_gamma(gg,i0);

            res = ( dd < 1e-6 ) ? 1.0 : 2*pow(dd/2,i0)*qq/gg;

            break;
        }

        case 36:
        {
            res = 1.0;

            if ( xx.nearindsize() )
            {
                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    res *= ( real(xx.direcref(i)/r(0)) < real(yy.direcref(i)/r(0)) ) ? xx.direcref(i)/r(0) : yy.direcref(i)/r(0);
                }
            }

            break;
        }

        case 37:
        {
            gentype tempq;
            gentype tempr;
            gentype tempa;
            gentype tempb;

            int p = ic(0);
            double nu = p+0.5;

            NiceAssert( p >= 0 );

            tempq  = diffis;
            tempq *= nu;
            tempq *= 8.0;
            OP_sqrt(tempq);
            tempq /= r(0);

            tempr  = 1.0; // this will be multiplied by tempq after each
                          // iteration so will equal tempq^(p-i) at the
                          // start of each iteration.
            tempb  = 0.0;

            for ( i = p ; i >= 0 ; i-- )
            {
                tempa  = tempr; // = tempq^(p-i)
                tempa *= (((double) xnfact(p+i))/(((double) xnfact(p-i))*((double) xnfact(i))));

                tempb += tempa;
                tempr *= tempq;
            }

            double tempc;
            double tempd;

            numbase_gamma(tempc,p+1);
            numbase_gamma(tempd,(2*p)+1);

            tempb *= (tempc/tempd);

            res  = tempq; // No need to re-calculate this
            res /= -2.0;
            OP_exp(res);

            res *= tempb;

            break;
        }

        case 38:
        {
            res  = diffis;
            OP_sqrt(res);
            res /= r(0);
            res.negate();
            OP_exp(res);

            break;
        }

        case 39:
        {
            gentype tempa;
            gentype tempb;

            tempb = 1.0;

            tempa  = diffis;
            tempa *= 3.0;
            OP_sqrt(tempa);
            tempa /= r(0);

            tempb += tempa;

            res = tempa; // No need to repeat this
            res.negate();
            OP_exp(res);

            res *= tempb;

            break;
        }

        case 40:
        {
            gentype tempa;
            gentype tempb;

            tempb = 1.0;

            tempa  = diffis;
            tempa *= 5.0;
            OP_sqrt(tempa);
            tempa /= r(0);

            tempb += tempa;

            res = tempa; // do now to save recalculation
            res.negate();
            OP_exp(res);

            tempa *= tempa;
            tempa /= 3.0;

            tempb += tempa;

            res *= tempb;

            break;
        }

        case 41:
        {
            res = xyprod;
            raiseto(res,halfdblgentype()/(r(0)*r(0)));

            break;
        }

        case 42:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            OP_agd(res);

            break;
        }

        case 43:
        {
            gentype tempa(xyprod);

            tempa  = xyprod;
            tempa /= r(0);
            tempa /= r(0);

            gentype tempb(tempa);

            tempa += 1.0;
            tempb -= 1.0;

            res  = tempa;
            res /= tempb;

            OP_log(res);

            break;
        }

        case 44:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            res -= r(1);
            OP_exp(res);

            break;
        }

        case 45:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            OP_sinh(res);

            break;
        }

        case 46:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            OP_cosh(res);

            break;
        }

        case 47:
        {
            gentype dd(diffis);

            OP_sqrt(dd);

            res = dd;
            res /= r(0);
            OP_sinc(res);

            gentype tmpa(dd);

            tmpa *= (2*NUMBASE_PI);
            tmpa /= r(1);
            OP_cos(tmpa);

            res *= tmpa;

            break;
        }

        case 48:
        {
            NiceAssert( xx(0).isCastableToIntegerWithoutLoss() );
            NiceAssert( yy(0).isCastableToIntegerWithoutLoss() );

            int ix = (int) xx(0);
            int iy = (int) yy(0);

            const gentype &r1 = r(1);

            if ( r1.isValMatrix() )
            {
                res = r1(ix,iy);
            }

            else if ( ix == iy )
            {
                res = 1.0;
            }

            else
            {
                res = r1;
            }

            break;
        }

        case 100:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            break;
        }

        case 101:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            res.negate();
            OP_exp(res);
            res += 1.0;
            OP_einv(res);

            break;
        }

        case 102:
        {
            res = xyprod;
            res -= r(3);
            res /= r(0);
            res /= r(0);
            res *= r(2);
            res.negate();
            OP_exp(res);
            res *= r(1);
            res += 1.0;
            res = epow(res,inv(r(2)));
            OP_einv(res);

            break;
        }

        case 103:
        {
            res = ( real(xyprod) > zerogentype() ) ? 1.0 : 0.0;
            break;
        }

        case 104:
        {
            res = ( real(xyprod) > zerogentype() ) ? xyprod : zerogentype();
            res /= r(0);
            res /= r(0);
            break;
        }

        case 105:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            OP_exp(res);
            res += r(1);
            OP_log(res);

            break;
        }

        case 106:
        {
            if ( real(xyprod) > zerogentype() )
            {
                res = ( real(xyprod) > zerogentype() ) ? xyprod : zerogentype();
                res /= r(0);
                res /= r(0);
            }

            else
            {
                res = ( real(xyprod) > zerogentype() ) ? xyprod : zerogentype();
                res /= r(0);
                res /= r(0);
                res *= r(1);
            }

            break;
        }

        case 200:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            res -= 1.0;

            break;
        }

        case 201:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            res.negate();
            OP_exp(res);
            res += 1.0;
            OP_einv(res);
            res *= 2.0;
            res -= 1.0;

            break;
        }

        case 202:
        {
            res = xyprod;
            res -= r(3);
            res /= r(0);
            res /= r(0);
            res *= r(2);
            res.negate();
            OP_exp(res);
            res *= r(1);
            res += 1.0;
            res = epow(res,inv(r(2)));
            OP_einv(res);
            res *= 2.0;
            res -= 1.0;

            break;
        }

        case 203:
        {
            res = ( real(xyprod) > zerogentype() ) ? onedblgentype() : negonedblgentype();
            break;
        }

        case 204:
        {
            res = ( real(xyprod) > zerogentype() ) ? xyprod-onedblgentype() : negonedblgentype();
            res /= r(0);
            res /= r(0);
            break;
        }

        case 205:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            OP_exp(res);
            res += r(1);
            OP_log(res);
            res *= 2.0;
            res -= 1.0;

            break;
        }

        case 206:
        {
            if ( real(xyprod) > zerogentype() )
            {
                res = xyprod-onedblgentype();
                res /= r(0);
                res /= r(0);
            }

            else
            {
                res = (r(1)*xyprod)-onedblgentype();
                res /= r(0);
                res /= r(0);
            }

            break;
        }

        case 300:
        {
            res = diffis;
            res *= -0.5;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 301:
        {
            xx -= yy;
            res = abs1(xx);
            res *= res;
            res *= -0.5;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 302:
        {
            xx -= yy;
            res = absinf(xx);
            res *= res;
            res *= -0.5;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 303:
        {
            xx -= yy;
            res = abs0(xx);
            res *= res;
            res *= -0.5;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 304:
        {
            xx -= yy;
            res = absp(xx,(double) r(1));
            res *= res;
            res *= -0.5;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 400:
        case 450:
        case 600:
        case 650:
        {
            res = 1.0;

            if ( yy.nearindsize() )
            {
                for ( i = 0 ; i < yy.nearindsize() ; i++ )
                {
                    yy.direref(i) -= xx.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        yy.direref(i).negate();
                    }

                    yy.direref(i) /= r(0);
                    OP_exp(yy.direref(i));
                    yy.direref(i) += 1.0;
                    OP_einv(yy.direref(i));
                    yy.direref(i) *= 2.0;
                    yy.direref(i) -= r(1);
                    res *= yy.direcref(i);
                }
            }

            if ( typeis/100 == 4 )
            {
                res += 1.0;
                res *= 0.5;
            }

            break;
        }

        case 401:
        case 451:
        case 601:
        case 651:
        {
            res = 1.0;

            if ( yy.nearindsize() )
            {
                for ( i = 0 ; i < yy.nearindsize() ; i++ )
                {
                    yy.direref(i) -= xx.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        yy.direref(i).negate();
                    }

                    yy.direref(i) /= r(0);
                    yy.direref(i).negate();
                    yy.direref(i) = erf(yy.direcref(i));
                    yy.direref(i) -= r(1);
                    res *= yy.direcref(i);
                }
            }

            if ( typeis/100 == 4 )
            {
                res += 1.0;
                res *= 0.5;
            }

            break;
        }

        case 402:
        case 452:
        case 602:
        case 652:
        {
            res = 1.0;

            if ( xx.nearindsize() )
            {
                double temp = 0;
                double minval = 0;

                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    temp  = (double) xx.direcref(i);
                    temp -= (double) yy.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        temp = -temp;
                    }

                    if ( !i || ( temp < minval ) )
                    {
                        minval = temp;
                    }
                }

                res = minval;
                res /= r(0);
                res.negate();
                OP_exp(res);
                res += 1.0;
                OP_einv(res);
                res *= 2.0;
                res -= r(1);
            }

            if ( typeis/100 == 4 )
            {
                res += 1.0;
                res *= 0.5;
            }

            break;
        }

        case 403:
        case 453:
        case 603:
        case 653:
        {
            res = 1.0;

            if ( xx.nearindsize() )
            {
                double temp = 0;
                double minval = 0;

                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    temp  = (double) xx.direcref(i);
                    temp -= (double) yy.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        temp = -temp;
                    }

                    if ( !i || ( temp < minval ) )
                    {
                        minval = temp;
                    }
                }

                res = ( minval <= 1e-6 ) ? -1.0 : 1.0;
            }

            if ( typeis/100 == 4 )
            {
                res += 1.0;
                res *= 0.5;
            }

            break;
        }

        case 404:
        case 454:
        case 604:
        case 654:
        {
            res = 1.0;

            if ( xx.nearindsize() )
            {
                double temp = 0;
                double maxval = 0;

                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    temp  = (double) xx.direcref(i);
                    temp -= (double) yy.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        temp = -temp;
                    }

                    if ( !i || ( temp > maxval ) )
                    {
                        maxval = temp;
                    }
                }

                res = maxval;
                res /= r(0);
            }

            if ( typeis/100 == 4 )
            {
                res += 1.0;
                res *= 0.5;
            }

            break;
        }


        case 500:
        case 550:
        case 700:
        case 750:
        {
            res = 1.0;

            if ( xx.nearindsize() )
            {
                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    xx.direref(i) -= yy.direcref(i);
                    xx.direref(i) /= r(0);

                    if ( (typeis/10)%10 == 5 )
                    {
                        yy.direref(i).negate();
                    }

                    xx.direref(i).negate();
                    OP_exp(xx.direref(i));
                    res *= xx.direcref(i);
                    res /= r(0);
                    res *= 2.0;
                    xx.direref(i) += 1.0;
                    OP_einv(xx.direref(i));
                    res *= xx.direcref(i);
                    res *= xx.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        res.negate(); // do this on each axis
                    }
                }
            }

            if ( typeis/100 == 5 )
            {
                res *= 0.5;
            }

            break;
        }

        case 501:
        case 551:
        case 701:
        case 751:
        {
            gentype scalefact(2.0/NUMBASE_SQRTPI);

            res = 1.0;

            if ( xx.nearindsize() )
            {
                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    xx.direref(i) -= yy.direcref(i);
                    xx.direref(i) /= r(0);

                    if ( (typeis/10)%10 == 5 )
                    {
                        xx.direref(i).negate();
                    }

                    xx.direref(i) *= xx.direcref(i);
                    xx.direref(i).negate();
                    OP_exp(xx.direref(i));
                    xx.direref(i) /= r(0);
                    xx.direref(i) *= scalefact;
                    res *= yy.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        res.negate(); // do this on each axis
                    }
                }
            }

            if ( typeis/100 == 5 )
            {
                res *= 0.5;
            }

            break;
        }

        case 502:
        case 552:
        case 702:
        case 752:
        {
            res = 0.0;

            if ( xx.nearindsize() )
            {
                double temp = 0;
                double minval = 0;

                for ( i = 0 ; i < yy.nearindsize() ; i++ )
                {
                    temp  = (double) xx.direcref(i);
                    temp -= (double) yy.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        temp = -temp;
                    }

                    if ( !i || ( temp < minval ) )
                    {
                        minval = temp;
                    }
                }

                gentype tempb;

                tempb = minval;
                tempb /= r(0);
                tempb.negate();
                OP_exp(tempb);
                res = tempb;
                tempb += 1.0;
                OP_einv(tempb);
                res *= tempb;
                res *= tempb;
                res /= r(0);
                res *= 2.0;

                if ( (typeis/10)%10 == 5 )
                {
                    res.negate();
                }

                if ( typeis/100 == 5 )
                {
                    res *= 0.5;
                }
            }

            break;
        }

        case 503:
        case 553:
        case 703:
        case 753:
        {
            res = 0.0;

            break;
        }

        case 504:
        case 554:
        case 704:
        case 754:
        {
            res = 1.0;

            if ( (typeis/10)%10 == 5 )
            {
                res.negate();
            }

            if ( typeis/100 == 5 )
            {
                res *= 0.5;
                res /= r(0);
            }

            break;
        }

        default:
	{
	    throw("Unknown kernel type.\n");

	    break;
	}
    }
  }

  else if ( resmode & 8 )
  {
    // dKdr gradient calculation

    NiceAssert( q >= 0 );
    NiceAssert( q < size() );
    NiceAssert( !densetype );

    Vector<gentype> &vres = res.force_vector();

    (void) densetype;

    gentype xyprod;

    xyprod =  txyprod;
    xyprod += tyxprod;
    xyprod /= 2.0;

    vres.resize(dRealConstants(q).size()-1);

    processOverwrites(q,*(x(zeroint())),*(x(1)));

    retVector<gentype> tmpva;

    const Vector<gentype> &r = dRealConstants(q)(1,1,dRealConstants(q).size()-1,tmpva);
    const Vector<int> &ic = dIntConstants(q);

//ADDHERE - kernel derivative wrt parameter vector goes here
    if ( dRealConstants(q).size()-1 )
    {
      // Use -1 pseudotype to force fallthrough to manual calculation

      switch ( !resmode ? typeis : -1 )
      {
        case 0:
        {
            vres("&",0) = 0.0;
            vres("&",1) = 1.0;

            break;
        }

        case 1:
        {
            vres("&",0) = -2.0;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);

            break;
        }

        case 2:
	{
            vres("&",1) = xyprod;
            vres("&",1) /= r(0);
            vres("&",1) /= r(0);
            vres("&",1) += r(1);
            raiseto(vres("&",1),ic(0)-1);
            vres("&",1) *= ic(0);

            vres("&",0) = vres(1);
            vres("&",0) *= -2.0;
            vres("&",0) *= xyprod;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);

            break;
	}

        case 3:
	{
            vres("&",0) = diffis;
            vres("&",0) /= -2.0;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) -= r(1);
            OP_exp(vres("&",0));
            vres("&",0) *= diffis;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);

            vres("&",1) = diffis;
            vres("&",1) /= -2.0;
            vres("&",1) /= r(0);
            vres("&",1) /= r(0);
            vres("&",1) -= r(1);
            OP_exp(vres("&",1));

            break;
	}
      
        case 4:
	{
            gentype temp(diffis);

            OP_sqrt(temp);

            vres("&",0) = temp;
            vres("&",0).negate();
            vres("&",0) /= r(0);
            vres("&",0) -= r(1);
            OP_exp(vres("&",0));
            vres("&",0) *= temp;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);

            vres("&",1) = temp;
            vres("&",1).negate();
            vres("&",1) /= r(0);
            vres("&",1) -= r(1);
            OP_exp(vres("&",1));

            break;
	}

        case 5:
	{
            gentype tempa(diffis);
            OP_sqrt(tempa);
            tempa /= r(0);

            vres("&",0) = tempa;
            OP_log(vres("&",0));
            vres("&",0).negate();
            vres("&",0) += inv(r(1));
            vres("&",0) /= r(1);

            vres("&",1) = r(0);
            vres("&",1).inverse();

            tempa = epow(tempa,r(1));

            vres("&",0) *= tempa;
            vres("&",1) *= tempa;

            tempa /= r(1);
            tempa.negate();
            OP_exp(tempa);

            vres("&",0) *= tempa;
            vres("&",1) *= tempa;

// fuck it, who cares about vres(0,2)

            break;
	}

        case 7:
	{
            vres("&",1) = xyprod;
            vres("&",1) /= r(0);
            vres("&",1) /= r(0);
            vres("&",1) += r(1);
            OP_sech(vres("&",1));
            vres("&",1) *= vres(1);

            vres("&",0) = vres(1);
            vres("&",0) *= xyprod;
            vres("&",0) *= -2.0;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);

            break;
	}

        case 8:
	{
            vres("&",0)  = diffis;
            vres("&",0) /= 2.0;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) /= r(1);
            vres("&",0) += 1.0;
            vres("&",0) = epow(res,-r(1));

            break;
	}

        case 9:
	{
            vres("&",0) = diffis;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) += r(1)*r(1);
            OP_sqrt(vres("&",0));
            OP_einv(vres("&",0));
            vres("&",0) *= -2.0;
            vres("&",0) *= diffis;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);

            vres("&",1) = diffis;
            vres("&",1) /= r(0);
            vres("&",1) /= r(0);
            vres("&",1) += r(1)*r(1);
            OP_sqrt(vres("&",1));
            OP_einv(vres("&",1));
            vres("&",1) *= r(1);

            break;
	}

        case 10:
	{
            vres("&",0) = diffis;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) += r(1)*r(1);
            OP_sqrt(vres("&",0));
            raiseto(vres("&",0),3);
            OP_einv(vres("&",0));
            vres("&",0) *= -2.0;
            vres("&",0) *= diffis;
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);
            vres("&",0) /= r(0);

            vres("&",1) = diffis;
            vres("&",1) /= r(0);
            vres("&",1) /= r(0);
            vres("&",1) += r(1)*r(1);
            OP_sqrt(vres("&",1));
            raiseto(vres("&",1),3);
            OP_einv(vres("&",1));
            vres("&",1) *= r(1);

            break;
	}

        case 11:
	{
            gentype tempa(diffis);

            OP_sqrt(tempa);
            tempa /= r(zeroint());

            gentype tempb(tempa);

            tempb.negate();
            tempb *= tempa;
            tempb += 1.0;
            OP_sqrt(tempb);

            vres("&",0) = tempa;
            vres("&",0) *= tempa;
            vres("&",0) *= tempa;
            vres("&",0) /= tempb;
            vres("&",0) /= r(zeroint());
            vres("&",0) *= (4/NUMBASE_PI);

            break;
	}

        case 12:
	{
            gentype tempa(diffis);

            OP_sqrt(tempa);
            tempa /= r(zeroint());

            vres("&",0) = tempa;
            vres("&",0) *= tempa;
            vres("&",0) += 1.0;
            vres("&",0) *= tempa;
            vres("&",0) /= r(zeroint());
            vres("&",0) *= -1.5;

            break;
	}

        case 13:
	{
            gentype tempa(diffis);

            OP_sqrt(tempa);
            tempa /= r(zeroint());

            gentype tempb(tempa);

            OP_cos(tempa);
            OP_sinc(tempb);

            vres("&",0) = tempa;
            vres("&",0) -= tempb;
            vres("&",0) /= r(zeroint());
            vres("&",0).negate();

            break;
	}

        case 18:
        {
            throw("Bessel kernel not implemented yet");
            break;
        }

        case 32:
	{
            vres("&",0) = 0.0;
            vres("&",1) = ( ( iiii(zeroint()) == iiii(1) ) && ( iiii(zeroint()) >= 0 ) ) ? 1.0 : 0.0;

            break;
	}

        case 35:
        {
            throw("Matern kernel not implemented yet");
            break;
        }

        case 103:
        {
            vres("&",0) = 0.0;
            break;
        }

        case 203:
        {
            vres("&",0) = 0.0;
            break;
        }

        default:
	{
            if ( dRealConstants(q).size() <= 1 )
            {
                break;
            }

            // Revert to symbolic mathematics approach
            //
            // 1. call Kbase in remode 2 to get K(x,y) as equation in terms of
            //    var(0,0) = x'x, var(0,1) = y'y, var(0,2) = x'y, var(1,i) = ri
            // 2. substitute var(0,0), var(0,1), var(0,2)
            // 3. take derivative wrt var(1,i)
            // 4. substitute var(1,i)
            // 5. assert that end result is a number.
    
            gentype restemp;
            SparseVector<SparseVector<gentype> > subarray;

            // Calculate equational form of kernel, making sure not to sub
            // out real constants

            Kbase(restemp,q,typeis,txyprod,tyxprod,diffis,x,xinfo,xnorm,iiii,xdim,m,0,resmode|4,mlid);

            vres = restemp;

            // First stage substitutions

            if ( !( resmode & 1 ) )
            {
                subarray("&",0)("&",0) =  *(xnorm(zeroint()));
                subarray("&",0)("&",1) =  *(xnorm(1));
                subarray("&",0)("&",2) =  txyprod;
                subarray("&",0)("&",2) += tyxprod;
                subarray("&",0)("&",2) /= 2.0;
            }

            int ij;

            if ( !( resmode & 2 ) && ( dIntConstants(q).size() > 0 ) )
            {
                for ( ij = 0 ; ij < dIntConstants(q).size() ; ij++ )
                {
                    subarray("&",2)("&",ij) = dIntConstants(q)(ij);
                }
            }

            for ( ij = 0 ; ij < dRealConstants(q).size()-1 ; ij++ )
            {
                vres("&",ij).substitute(subarray);
            }

            // Calculate derivative vector

            for ( ij = 0 ; ij < dRealConstants(q).size()-1 ; ij++ )
            {
                vres("&",ij).realDeriv(1,ij);
            }

            // Second stage substitutions

            subarray.zero();

            if ( !( resmode & 4 ) && ( dRealConstants(q).size()-1 > 0 ) )
            {
                for ( ij = 0 ; ij < dRealConstants(q).size()-1 ; ij++ )
                {
                    subarray("&",1)("&",ij) = dRealConstants(q)(ij+1);
                }
            }

            for ( ij = 0 ; ij < dRealConstants(q).size()-1 ; ij++ )
            {
                vres("&",ij).substitute(subarray);
            }

	    break;
	}
      }
    }
  }

  else
  {
    NiceAssert( !densetype );

    switch ( typeis )
    {
        case   0: { res = "var(1,1)"; break; }
        case   1: { res = "z/(var(1,0)*var(1,0))"; break; }
        case   2: { res = "(var(1,1)+(z/(var(1,0)*var(1,0))))^var(2,0)"; break; }
        case   3: { res = "exp((-var(0,3)/(2*var(1,0)*var(1,0)))-var(1,1))"; break; }
        case   4: { res = "exp((-sqrt(var(0,3))/var(1,0))-var(1,1))"; break; }
        case   5: { res = "exp((-(var(0,3)^(var(1,1)/2))/(var(1,0)*var(1,1)))-var(1,2))"; break; }
        case   6: { res.makeError("Error: ANOVA kernel cannot be returned as equation"); break; }
        case   7: { res = "tanh(z/(var(1,0)*var(1,0))+var(1,1))"; break; }
        case   8: { res = "(1+(var(0,3)/(2*var(1,0)*var(1,0)*var(1,1))))^(-var(1,1))"; break; }
        case   9: { res = "sqrt((var(0,3)/(var(1,0)*var(1,0)))+var(1,1)^2)"; break; }
        case  10: { res = "1/sqrt((var(0,3)/(var(1,0)*var(1,0)))+var(1,1)^2)"; break; }
        case  11: { res = "ifthenelse(lt(var(0,3),0),(2/pi())*(acos(-sqrt(var(0,3))/var(1,0))-((sqrt(var(0,3))/var(1,0))*sqrt(1-var(0,3)/var(1,0)))),0)"; break; }
        case  12: { res = "1-(1.5*sqrt(var(0,3))/var(1,0))(0.5*(var(0,3)^3)/(var(1,0)^3))"; break; }
        case  13: { res = "sinc(sqrt(var(0,3))/var(1,0))"; break; }
        case  14: { res = "sqrt((var(0,3)/(var(1,0)*var(1,0))))^var(1,1)"; break; }
        case  15: { res = "log((sqrt((var(0,3)/(var(1,0)*var(1,0))))^var(1,1))+1)"; break; }
        case  16: { res.makeError("Error: Spline kernel cannot be returned as equation"); break; }
        case  17: { res.makeError("Error: B-Spline kernel cannot be returned as equation"); break; }
        case  18: { res.makeError("Error: Bessel kernel not yet implemented"); break; }
        case  19: { res = "1/(1+(var(0,3)/(var(1,0)*var(1,0))))"; break; }
        case  20: { res.makeError("Error: Chi-Square kernel cannot be returned as equation"); break; }
        case  21: { res.makeError("Error: Histogram kernel cannot be returned as equation"); break; }
        case  22: { res.makeError("Error: Generalised histogram kernel cannot be returned as equation"); break; }
        case  23: { res = "1/(1+((sqrt(var(0,3))/var(1,0))^var(1,1)))"; break; }
        case  24: { res = "(1-(z/(var(1,0)*var(1,0)))^var(2,0))/(1-(z/(var(1,0)*var(1,0))))"; break; }
        case  25: { res = "pi()*cosh(pi()-sqrt(var(0,3))/var(1,0))"; break; }
        case  26: { res = "(var(0,3)/var(1,0))^(var(1,1)+0.5)"; break; }
        case  27: { res = "((var(0,3)/var(1,0))^(var(1,1)+0.5))*log(sqrt(var(0,3)/var(1,0)))"; break; }
        case  28: { res.makeError("Error: General kernel cannot be returned as equation"); break; }
        case  29: { res.makeError("Error: Arccosine kernel cannot be returned as equation"); break; }
        case  30: { res.makeError("Error: Chaotic logistic kernel cannot be returned as equation"); break; }
        case  31: { res.makeError("Error: Summed Chaotic logistic kernel cannot be returned as equation"); break; }
        case  32: { res.makeError("Error: Diagonal kernel cannot be returned as equation"); break; }
        case  33: { res = "ifthenelse(lt(real(sqrt(x+y-2*z)),var(1,0)),1/(2*var(1,0)),0)"; break; }
        case  34: { res = "ifthenelse(lt(real(sqrt(x+y-2*z)),var(1,0)),(1-real(sqrt(x+y-2*z)/var(1,0))/var(1,0),0)"; break; }
        case  35: { res.makeError("Error: General Matern kernel not yet implemented"); break; }
        case  36: { res.makeError("Error: Weiner kernel cannot be returned as equation"); break; }
        case  37: { res.makeError("Error: Half-Integer Matern kernel cannot be returned as an equation"); break; }
        case  38: { res = "exp(-sqrt(var(0,3))/var(1,0))"; break; }
        case  39: { res = "(1+(sqrt(3*var(0,3))/var(1,0)))*exp(-sqrt(3*var(0,3))/var(1,0))"; break; }
        case  40: { res = "(1+(sqrt(5*var(0,3))/var(1,0))+(5*var(0,3)/(3*var(1,0)*var(1,0))))*exp(-sqrt(5*var(0,3))/var(1,0))"; break; }
        case  41: { res = "z^(1/(2*var(1,0)*var(1,0)))"; break; }
        case  42: { res = "agd(z/(var(1,0)*var(1,0)))"; break; }
        case  43: { res = "log((1+(z/(var(1,0)*var(1,0))))/(1-(z/(var(1,0)*var(1,0)))))"; break; }
        case  44: { res = "exp((z/(var(1,0)*var(1,0)))-var(1,1))"; break; }
        case  45: { res = "sinh(z/(var(1,0)*var(1,0)))"; break; }
        case  46: { res = "cosh(z/(var(1,0)*var(1,0)))"; break; }
        case  47: { res = "sinc(sqrt(var(0,3))/var(1,0))*sinc(2*pi()*sqrt(var(0,3))/(var(1,0)*var(1,1)))"; break; }
        case  48: { res.makeError("Error: LUT kernel cannot be returned as equation"); break; }
        case 100: { res = "z/(var(1,0)*var(1,0))"; break; }
        case 101: { res = "1/(1+exp(-z/(var(1,0)*var(1,0))))"; break; }
        case 102: { res = "1/(1+var(1,1)*exp(-var(1,2)*(z-var(1,3))/(var(1,0)*var(1,0))))^(1/var(1,2))"; break; }
        case 103: { res = "ifthenelse(lt(real(z),0),0,1)"; break; }
        case 104: { res = "ifthenelse(lt(real(z),0),0,z/(var(1,0)*var(1,0)))"; break; }
        case 105: { res = "log(var(1,1)+exp(z/(var(1,0)*var(1,0))))"; break; }
        case 106: { res = "ifthenelse(lt(real(z),0),(var(1,1)*z)/(var(1,0)*var(1,0)),z/(var(1,0)*var(1,0)))"; break; }
        case 200: { res = "(z/(var(1,0)*var(1,0)))-1"; break; }
        case 201: { res = "(2/(1+exp(-z/(var(1,0)*var(1,0)))))-1"; break; }
        case 202: { res = "(2/(1+var(1,1)*exp(-var(1,2)*(z-var(1,3))/(var(1,0)*var(1,0))))^(1/var(1,2)))-1"; break; }
        case 203: { res = "ifthenelse(lt(real(z),0),-1,1)"; break; }
        case 204: { res = "ifthenelse(lt(real(z),0),-1,(z/(var(1,0)*var(1,0)))-1)"; break; }
        case 205: { res = "(2*log(var(1,1)+exp(z/(var(1,0)*var(1,0)))))-1"; break; }
        case 206: { res = "ifthenelse(lt(real(z),0),((var(1,1)*z)/(var(1,0)*var(1,0)))-1,(z/(var(1,0)*var(1,0)))-1)"; break; }
        case 300: { res = "-(x+y-2*z)/(2*var(1,0)*var(1,0))"; break; }
        case 301: { res.makeError("Error: 1-norm distance kernel cannot be returned as equation"); break; }
        case 302: { res.makeError("Error: inf-norm distance kernel cannot be returned as equation"); break; }
        case 303: { res.makeError("Error: 0-norm distance kernel cannot be returned as equation"); break; }
        case 304: { res.makeError("Error: r0-norm distance kernel cannot be returned as equation"); break; }
        case 400: { res.makeError("Error: monotonic 0/1 density kernel 1 cannot be returned as equation"); break; }
        case 401: { res.makeError("Error: monotonic 0/1 density kernel 2 cannot be returned as equation"); break; }
        case 402: { res.makeError("Error: monotonic 0/1 density kernel 3 cannot be returned as equation"); break; }
        case 403: { res.makeError("Error: monotonic 0/1 density kernel 4 cannot be returned as equation"); break; }
        case 404: { res.makeError("Error: monotonic 0/1 density kernel 5 cannot be returned as equation"); break; }
        case 450: { res.makeError("Error: monotonic 0/1 density kernel 1 (reversed order) cannot be returned as equation"); break; }
        case 451: { res.makeError("Error: monotonic 0/1 density kernel 2 (reversed order) cannot be returned as equation"); break; }
        case 452: { res.makeError("Error: monotonic 0/1 density kernel 3 (reversed order) cannot be returned as equation"); break; }
        case 453: { res.makeError("Error: monotonic 0/1 density kernel 4 (reversed order) cannot be returned as equation"); break; }
        case 454: { res.makeError("Error: monotonic 0/1 density kernel 5 (reversed order) cannot be returned as equation"); break; }
        case 500: { res.makeError("Error: monotonic 0/1 density derivative kernel 1 cannot be returned as equation"); break; }
        case 501: { res.makeError("Error: monotonic 0/1 density derivative kernel 2 cannot be returned as equation"); break; }
        case 502: { res.makeError("Error: monotonic 0/1 density derivative kernel 3 cannot be returned as equation"); break; }
        case 503: { res.makeError("Error: monotonic 0/1 density derivative kernel 4 cannot be returned as equation"); break; }
        case 504: { res.makeError("Error: monotonic 0/1 density derivative kernel 5 cannot be returned as equation"); break; }
        case 550: { res.makeError("Error: monotonic 0/1 density derivative kernel 1 cannot be returned as equation"); break; }
        case 551: { res.makeError("Error: monotonic 0/1 density derivative kernel 2 cannot be returned as equation"); break; }
        case 552: { res.makeError("Error: monotonic 0/1 density derivative kernel 3 cannot be returned as equation"); break; }
        case 553: { res.makeError("Error: monotonic 0/1 density derivative kernel 4 cannot be returned as equation"); break; }
        case 554: { res.makeError("Error: monotonic 0/1 density derivative kernel 5 cannot be returned as equation"); break; }
        case 600: { res.makeError("Error: monotonic -1/1 density kernel 1 cannot be returned as equation"); break; }
        case 601: { res.makeError("Error: monotonic -1/1 density kernel 2 cannot be returned as equation"); break; }
        case 602: { res.makeError("Error: monotonic -1/1 density kernel 3 cannot be returned as equation"); break; }
        case 603: { res.makeError("Error: monotonic -1/1 density kernel 4 cannot be returned as equation"); break; }
        case 604: { res.makeError("Error: monotonic -1/1 density kernel 5 cannot be returned as equation"); break; }
        case 650: { res.makeError("Error: monotonic -1/1 density kernel 1 (reversed order) cannot be returned as equation"); break; }
        case 651: { res.makeError("Error: monotonic -1/1 density kernel 2 (reversed order) cannot be returned as equation"); break; }
        case 652: { res.makeError("Error: monotonic -1/1 density kernel 3 (reversed order) cannot be returned as equation"); break; }
        case 653: { res.makeError("Error: monotonic -1/1 density kernel 4 (reversed order) cannot be returned as equation"); break; }
        case 654: { res.makeError("Error: monotonic -1/1 density kernel 5 (reversed order) cannot be returned as equation"); break; }
        case 700: { res.makeError("Error: monotonic -1/1 density derivative kernel 1 cannot be returned as equation"); break; }
        case 701: { res.makeError("Error: monotonic -1/1 density derivative kernel 2 cannot be returned as equation"); break; }
        case 702: { res.makeError("Error: monotonic -1/1 density derivative kernel 3 cannot be returned as equation"); break; }
        case 703: { res.makeError("Error: monotonic -1/1 density derivative kernel 4 cannot be returned as equation"); break; }
        case 704: { res.makeError("Error: monotonic -1/1 density derivative kernel 5 cannot be returned as equation"); break; }
        case 750: { res.makeError("Error: monotonic -1/1 density derivative kernel 1 cannot be returned as equation"); break; }
        case 751: { res.makeError("Error: monotonic -1/1 density derivative kernel 2 cannot be returned as equation"); break; }
        case 752: { res.makeError("Error: monotonic -1/1 density derivative kernel 3 cannot be returned as equation"); break; }
        case 753: { res.makeError("Error: monotonic -1/1 density derivative kernel 4 cannot be returned as equation"); break; }
        case 754: { res.makeError("Error: monotonic -1/1 density derivative kernel 5 cannot be returned as equation"); break; }

        default:
	{
	    throw("Unknown kernel type.\n");

	    break;
	}
    }

    // Substitute as required
    //
    // always substitute var(0,3) = x+y-2*z
    // sub out integer constants if resmode == 2,3
    // sub out real constants if resmode == 3

    SparseVector<SparseVector<gentype> > subarray;

    subarray("&",0)("&",3) = "x+y-2*z";
    res.substitute(subarray);
    subarray("&",0).zero();
    subarray.zero();

    if ( !( resmode & 1 ) )
    {
        subarray("&",0)("&",0) =  *(xnorm(zeroint()));
        subarray("&",0)("&",1) =  *(xnorm(1));
        subarray("&",0)("&",2) =  txyprod;
        subarray("&",0)("&",2) += tyxprod;
        subarray("&",0)("&",2) /= 2.0;
    }

    if ( !( resmode & 2 ) && ( dIntConstants(q).size() > 0 ) )
    {
        int ij;

        for ( ij = 0 ; ij < dIntConstants(q).size() ; ij++ )
        {
            subarray("&",2)("&",ij) = dIntConstants(q)(ij);
        }
    }

    if ( !( resmode & 4 ) && ( dRealConstants(q).size()-1 > 0 ) )
    {
        int ij;

        for ( ij = 0 ; ij < dRealConstants(q).size()-1 ; ij++ )
        {
            subarray("&",1)("&",ij) = dRealConstants(q)(ij+1);
        }
    }

    res.substitute(subarray);

    NiceAssert( !res.isValStrErr() );
  }

  return;
}

//KERNELSHERE
int MercerKernel::reverseEngK(int m, gentype &res, const Vector<const vecInfo *> &xinfo, const Vector<const SparseVector<gentype> *> &x, const double &Kres) const
{
    if ( isProd() ||
         ( size() != 1 ) ||
         kinf(0).usesVector ||
         kinf(0).usesNorm ||
         kinf(0).usesMinDiff ||
         kinf(0).usesMaxDiff ||
         ( kinf(0).numflagsset() != 1) ||
         ( cType(0) == 0 ) ||
         ( cType(0) == 32 ) ||
         ( cType(0) == 501 ) )
    {
        return 1;
    }

    res = Kres;
    res /= cWeight(0);

    int q = 0;

    retVector<gentype> tmpva;

    const Vector<gentype> &r = dRealConstants(q)(1,1,dRealConstants(q).size()-1,tmpva);
    const Vector<int> &ic = dIntConstants(q);

//ADDHERE - kernel reverse engineering here (diffis and inner only)
    switch ( cType(0) )
    {
        case 1:
	{
            res *= r(0);
            res *= r(0);

	    break;
	}

        case 2:
	{
            if ( ic(0)%2 )
            {
                gentype tempiz(ic(0));

                OP_einv(tempiz);

                res = epow(res,tempiz);
                res -= r(1);
                res *= r(0);
                res *= r(0);
            }

            else
            {
                // sign ambiguity means we can't do this case
                goto failure_fallthrough;
            }

	    break;
	}

        case 3:
	{
            OP_log(res);
            res += r(1);
            res *= -2.0;
            res *= r(0);
            res *= r(0);

            break;
	}

        case 4:
	{
            OP_log(res);
            res += r(1);
            res.negate();
            res *= r(0);
            res *= res;

            break;
	}

        case 5:
	{
            gentype tempr(r(1));

            OP_log(res);
            res += r(2);
            res.negate();
            res *= epow(r(0),r(1));
            res *= r(1);

            OP_einv(tempr);
            tempr *= 0.5;

            res = epow(res,tempr);

            break;
	}

        case 7:
	{
            OP_atanh(res);
            res -= r(1);
            res *= r(0);
            res *= r(0);

            break;
	}

        case 9:
	{
            res *= res;
            res -= r(1)*r(1);
            res *= r(0);
            res *= r(0);

            break;
	}

        case 10:
	{
            OP_einv(res);
            res *= res;
            res -= r(1)*r(1);
            res *= r(0);
            res *= r(0);

            break;
	}

        case 14:
	{
            res.negate();
            res = epow(res,0.5/r(1));
            res *= r(0);
            res *= r(0);

            break;
	}

        case 15:
	{
            res.negate();
            OP_exp(res);
            res -= 1.0;
            res = epow(res,0.5/r(1));
            res *= r(0);
            res *= r(0);

            break;
	}

        case 19:
	{
            OP_einv(res);
            res -= 1.0;
            res *= r(0);
            res *= r(0);

            break;
	}

        case 25:
	{
            res /= NUMBASE_PI;
            OP_acosh(res);
            res -= NUMBASE_PI;
            res.negate();
            res *= r(0);
            res *= res;

            break;
	}

        case 26:
	{
            res = epow(res,0.5/r(1));
            res *= r(0);

            break;
	}

        case 42:
	{
            OP_gd(res);
            res *= r(0);
            res *= r(0);

            break;
	}

        case 100:
	{
            res *= r(0);
            res *= r(0);

	    break;
	}

        case 101:
	{
            OP_einv(res);
            res -= 1.0;
            OP_log(res);
            res *= r(0);
            res *= r(0);
            res.negate();

	    break;
	}

        case 102:
	{
            OP_einv(res);
            res = epow(res,r(2));
            res -= 1.0;
            res /= r(1);
            OP_log(res);
            res.negate();
            res /= r(2);
            res *= r(0);
            res *= r(0);
            res += r(3);

	    break;
	}

        case 105:
	{
            OP_exp(res);
            res -= r(1);
            OP_log(res);
            res *= r(0);
            res *= r(0);

	    break;
	}

        case 200:
	{
            res += 1.0;
            res *= r(0);
            res *= r(0);

	    break;
	}

        case 201:
	{
            res += 1.0;
            res *= 0.5;
            OP_einv(res);
            res -= 1.0;
            OP_log(res);
            res *= r(0);
            res *= r(0);
            res.negate();

	    break;
	}

        case 202:
	{
            res += 1.0;
            res *= 0.5;
            OP_einv(res);
            res = epow(res,r(2));
            res -= 1.0;
            res /= r(1);
            OP_log(res);
            res.negate();
            res /= r(2);
            res *= r(0);
            res *= r(0);
            res += r(3);

	    break;
	}

        case 205:
	{
            res += 1.0;
            res *= 0.5;
            OP_exp(res);
            res -= r(1);
            OP_log(res);
            res *= r(0);
            res *= r(0);

	    break;
	}

        case 300:
	{
            res *= -2.0;
            res *= r(0);
            res *= r(0);

            break;
	}

        default:
	{
            failure_fallthrough:
            return 1;

	    break;
	}
    }

    if ( needsDiff(0) && ( kinf(0).numflagsset() == 1 ) )
    {
        // Currently res = ||x-y||^2
        //               = ||x||^2 + ||y||^2 - 2<x,y>
        // <x,y> = (||x||^2+||y||^2-res)/2
        //
        // This generalises to:
        //
        // ||x1,x2,...||^2 = ||x1||^2 + ||x2||^2 + ... - m.<x1,x2,...>

        res.negate();

        if ( m )
        {
            int i;

            for ( i = 0 ; i < m ; i++ )
            {
                res += getmnorm(*(xinfo(i)),*(x(i)),m);
            }
        }

        res /= m;
    }

    return 0;
}


//KERNELSHERE

MercerKernel &MercerKernel::setType(int ndtype, int q)
{
    NiceAssert( ndtype >= 0 );

    xisfast     = -1;
    xneedsInner = -1;
    xneedsDiff  = -1;
    xneedsNorm  = -1;

    if ( ( dtype(q)/100 == 8 ) || ( ndtype/100 == 8 ) )
    {
        xisIPdiffered = 1;
    }

    dtype("&",q) = ndtype;

    if ( dtype(q)/100 == 9 )
    {
        kill900channel(q);
    }

    // sourcelist: http://crsouza.blogspot.com/2010/03/kernel-functions-for-machine-learning.html

    Vector<gentype> &r = dRealConstants("&",q);
    Vector<int> &ic = dIntConstants("&",q);
    kernInfo &ki = kernflags("&",q);

//ADDHERE - new kernel initialisation function goes here

    switch ( cType(q) )
    {
        case   0: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                         break; }
        case   1: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case   2: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+2);  ic("&",0) = 2; r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                         break; }
        case   3: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 0.0;                                         break; }
        case   4: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 0.0;                                         break; }
        case   5: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+3);                 r("&",1+0) = 1.0; r("&",1+1) = 3.0; r("&",1+2) = 0.0;                       break; }
        case   6: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+5);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0; r("&",1+2) = 2.0;  r("&",1+3) = 3.0; r("&",1+4) = 1.0;    break; }
        case   7: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                         break; }
        case   8: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                         break; }
        case   9: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                         break; }
        case  10: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                         break; }
        case  11: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  12: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  13: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  14: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                         break; }
        case  15: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                         break; }
        case  16: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  17: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+1);  ic("&",0) = 1; r("&",1+0) = 1.0;                                                           break; }
        case  18: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+2);  ic("&",0) = 1; r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                         break; }
        case  19: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  20: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  21: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  22: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+3);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0; r("&",1+2) = 1.0;                      break; }
        case  23: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case  24: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+1);  ic("&",0) = 2; r("&",1+0) = 1.0;                                                          break; }
        case  25: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  26: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1;                                          break; }
        case  27: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1;                                          break; }
        case  28: { ki.usesDiff = 1; ki.usesInner = 1; ki.usesNorm = 1; ki.usesVector = 1; ki.usesMinDiff = 1; ki.usesMaxDiff = 1; ic.resize(0); r.resize(1+11);                r("&",1+0) = 1.0; r("&",1+1) = 1.0; r("&",1+2) = 1.0;  r("&",1+3) = 1.0; r("&",1+4) = 1.0; r("&",1+5) = 1.0; r("&",1+6) = 1.0; r("&",1+7) = 1.0; r("&",1+8) = 1.0; r("&",1+9) = 1.0; r("&",1+10) = "(var(0,1)+var(0,2))/2"; break; }
        case  29: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 1; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+1);  ic("&",0) = 0; r("&",1+0) = 1.0;                                                            break; }
        case  30: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+3);  ic("&",0) = 0; r("&",1+0) = 1.0; r("&",1+1) = 1.8; r("&",1+2) = 1e-5;                      break; }
        case  31: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+2);  ic("&",0) = 0; r("&",1+2) = 1.0; r("&",1+1) = 1.8; r("&",1+2) = 1e-5;                      break; }
        case  32: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case  33: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  34: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  35: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+1);  ic("&",0) = 1; r("&",1+0) = 1.0;                                                           break; }
        case  36: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  37: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+1);  ic("&",0) = 0; r("&",1+0) = 1.0;                                                           break; }
        case  38: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  39: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  40: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  41: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  42: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                          break; }
        case  43: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                          break; }
        case  44: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 0.0;                                         break; }
        case  45: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  46: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case  47: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                           break; }
        case  48: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 1; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                                                                                                                                                                         break; }
        case 100: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                            break; }
        case 101: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 102: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+4);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0; r("&",1+2) = 1.0;  r("&",1+3) = 0.0; break; }
        case 103: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                            break; }
        case 104: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 105: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 106: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 0.001;                                         break; }
        case 200: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 201: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 202: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+4);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0; r("&",1+2) = 1.0;  r("&",1+3) = 0.0; break; }
        case 203: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 204: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 205: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                           break; }
        case 206: { ki.usesDiff = 0; ki.usesInner = 1; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 0.001;                                         break; }
        case 300: { ki.usesDiff = 1; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 301: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 302: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 303: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 304: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 2.0;                                          break; }
        case 400: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 401: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 402: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 1; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 403: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 1; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 404: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 1; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 450: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 451: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 452: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 1; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 453: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 1; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 454: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 1; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 500: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 501: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 502: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 1; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 503: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 504: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 550: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 551: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 552: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 1; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 553: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 554: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 600: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 601: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 602: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 1; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 603: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 1; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 604: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 1; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 650: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 651: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 652: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 1; ic.resize(0); r.resize(1+2);                 r("&",1+0) = 1.0; r("&",1+1) = 1.0;                                        break; }
        case 653: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 1; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 654: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 1; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 700: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 701: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 702: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 1; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 703: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 704: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 750: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 751: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 752: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 1; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                           break; }
        case 753: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }
        case 754: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+1);                 r("&",1+0) = 1.0;                                                             break; }

        case 800: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 801: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 802: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 803: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 804: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 805: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 806: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 807: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 808: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 809: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 810: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 811: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 812: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 813: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 814: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 815: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 816: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 817: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 818: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 819: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 820: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 821: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 822: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 823: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 824: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 825: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 826: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 827: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 828: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 829: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 830: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 831: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 832: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 833: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 834: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 835: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 836: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 837: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 838: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 839: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 840: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 841: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 842: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 843: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 844: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 845: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 846: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 847: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 848: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 849: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 850: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 851: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 852: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 853: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 854: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 855: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 856: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 857: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 858: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 859: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 860: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 861: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 862: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 863: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 864: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 865: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 866: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 867: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 868: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 869: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 870: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 871: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 872: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 873: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 874: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 875: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 876: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 877: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 878: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 879: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 880: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 881: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 882: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 883: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 884: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 885: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 886: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 887: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 888: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 889: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 890: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 891: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 892: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 893: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 894: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 895: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 896: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 897: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 898: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }
        case 899: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(0); r.resize(1+0);                                                                                               break; }

        case 900: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 901: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 902: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 903: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 904: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 905: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 906: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 907: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 908: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 909: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 910: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }
        case 911: { ki.usesDiff = 0; ki.usesInner = 0; ki.usesNorm = 0; ki.usesVector = 0; ki.usesMinDiff = 0; ki.usesMaxDiff = 0; ic.resize(1); r.resize(1+0); ic("&",0) = -1;                                                                               break; }

        default:
	{
	    throw("Unknown kernel type.\n");

            break;
	}
    }

    r("&",0) = 1.0;

    return *this;
}































// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------

int MercerKernel::reverseEngK(gentype &res, const vecInfo &xinfo, const vecInfo &yinfo, const SparseVector<gentype> &x, const SparseVector<gentype> &y, const double &Kres) const
{
    Vector<const vecInfo *> xyinfo(2);
    Vector<const SparseVector<gentype> *> xy(2);

    xyinfo("&",zeroint()) = &xinfo;
    xyinfo("&",1)         = &yinfo;

    xy("&",zeroint()) = &x;
    xy("&",1)         = &y;

    return reverseEngK(2,res,xyinfo,xy,Kres);
}

int MercerKernel::reverseEngK(gentype &res, const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, const vecInfo &xdinfo, const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, const SparseVector<gentype> &xd, const double &Kres) const
{
    Vector<const vecInfo *> xyinfo(4);
    Vector<const SparseVector<gentype> *> xy(4);

    xyinfo("&",zeroint()) = &xainfo;
    xyinfo("&",1)         = &xbinfo;
    xyinfo("&",2)         = &xcinfo;
    xyinfo("&",3)         = &xdinfo;

    xy("&",zeroint()) = &xa;
    xy("&",1)         = &xb;
    xy("&",2)         = &xc;
    xy("&",3)         = &xd;

    return reverseEngK(4,res,xyinfo,xy,Kres);
}






//KERNELSHERRE

void MercerKernel::dKdaBase(gentype &res, int &minmaxind, int q, 
                            const gentype &xyprod, const gentype &yxprod, const gentype &diffis, 
                            Vector<const SparseVector<gentype> *> &x,
                            Vector<const vecInfo *> &xinfo,
                            Vector<const gentype *> &xnorm,
                            Vector<int> &i,
                            int xdim, int m, int mlid) const
{
    NiceAssert( q >= 0 );
    NiceAssert( q < size() );

    switch ( cType(q) )
    {
        case 0:
        case 1:
        case 2:
        case 7:
        case 24:
        case 32:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        {
            // Inner product kernel, gradient zero

            res = 0.0;

            minmaxind = combineminmaxind(minmaxind,-2);

            break;
        }

        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 18:
        case 19:
        case 23:
        case 25:
        case 26:
        case 27:
        case 33:
        case 34:
        case 35:
        case 37:
        case 38:
        case 39:
        case 40:
        case 47:
        case 300:
        case 501:
        case 701:
        {
            // For kernels that are functions of diffis we can simply note that:
            //
            // dK(diffis)/dz = dK(diffis)/ddiffis . ddiffis/dz
            // dK(diffis)/da = dK(diffis)/ddiffis . ddiffis/da
            //
            // so: dK(diffis)/da = -1/2 dK(diffis)/dz
            // as diffis = a+b-2z

            dKdzBase(res,minmaxind,q,xyprod,yxprod,diffis,x,xinfo,xnorm,i,xdim,m,mlid);

            res /= -2.0;

            break;
        }

        case 29:
        {
            // Arc-cosine (no gradient)

            throw("Arc-cosine gradient not implemented");

            break;
        }

        case 800: case 801: case 802: case 803: case 804: case 805: case 806: case 807: case 808: case 809:
        case 810: case 811: case 812: case 813: case 814: case 815: case 816: case 817: case 818: case 819:
        case 820: case 821: case 822: case 823: case 824: case 825: case 826: case 827: case 828: case 829:
        case 830: case 831: case 832: case 833: case 834: case 835: case 836: case 837: case 838: case 839:
        case 840: case 841: case 842: case 843: case 844: case 845: case 846: case 847: case 848: case 849:
        case 850: case 851: case 852: case 853: case 854: case 855: case 856: case 857: case 858: case 859:
        case 860: case 861: case 862: case 863: case 864: case 865: case 866: case 867: case 868: case 869:
        case 870: case 871: case 872: case 873: case 874: case 875: case 876: case 877: case 878: case 879:
        case 880: case 881: case 882: case 883: case 884: case 885: case 886: case 887: case 888: case 889:
        case 890: case 891: case 892: case 893: case 894: case 895: case 896: case 897: case 898: case 899:
        {
            kernel8xx(q,res,minmaxind,cType(q),x,xinfo,i,xdim,m,0,16,mlid);

            break;
        }

        default:
        {
            throw("Only inner product and norm difference kernels have kernel x/y gradients defined.");

            break;
        }
    }

    return;
}


//KERNELSHERE

void MercerKernel::dKdzBase(gentype &res, int &minmaxind, int q, 
                            const gentype &txyprod, const gentype &tyxprod, const gentype &diffis, 
                            Vector<const SparseVector<gentype> *> &x,
                            Vector<const vecInfo *> &xinfo,
                            Vector<const gentype *> &xnorm,
                            Vector<int> &ii,
                            int xdim, int m, int mlid) const
{
    NiceAssert( q >= 0 );
    NiceAssert( q < size() );

    int minmaxres = -1;

    gentype xyprod;

    xyprod =  txyprod;
    xyprod += tyxprod;
    xyprod /= 2.0;

    // Apply to 0,1 only (design decision)

    processOverwrites(q,*(x(zeroint())),*(x(1)));

    SparseVector<gentype> xx;
    SparseVector<gentype> yy;

    int i;

    if ( kinf(q).usesVector || kinf(q).usesMinDiff || kinf(q).usesMaxDiff )
    {
        if ( m != 2 )
        {
            throw("Vector-function kernels are not implemented for m != 2");
        }

        xx = *(x(zeroint()));
        yy = *(x(1));

        if ( isLeftNormal()  ) { preShiftScale(xx,*(x(zeroint()))); }
        if ( isRightNormal() ) { preShiftScale(yy,*(x(1))); }

        xx.conj();

        xx -= yy;
        xx += yy; // xx now has all indices
        yy -= xx;
        yy += xx; // yy now has all indices, shared with xx
    }

    retVector<gentype> tmpva;

    const Vector<gentype> &r = dRealConstants(q)(1,1,dRealConstants(q).size()-1,tmpva);
    const Vector<int> &ic = dIntConstants(q);

    int typeis = cType(q);

//ADDHERE - kernel derivative is implemented here (either ||x-y||^2 or <x,y>)
    switch ( typeis )
    {
        case 0:
        {
            res = 0.0;
            break;
        }

        case 1:
        {
            res =  1.0;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 2:
        {
            res  = xyprod;
            res /= r(0);
            res /= r(0);
            res += r(1);
            raiseto(res,ic(0)-1);
            res /= r(0);
            res /= r(0);
            res *= ic(0);

            break;
        }

        case 3:
        {
            Kbase(res,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res /= r(0);
            res /= r(0);

            break;
        }

        case 4:
        {
            if ( (double) abs2(diffis) >= BADZEROTOL*BADZEROTOL )
            {
                Kbase(res,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);
                res /= r(0);
                res /= sqrt(diffis);
            }

            else
            {
                res = 1.0;
            }

            break;
        }

        case 5:
        {
            gentype temp(diffis);
            gentype tempb;

            OP_sqrt(temp);

            tempb = r(1);
            tempb -= 2.0;
            tempb.negate();

            if ( (double) abs2(temp) >= BADZEROTOL )
            {
                temp = epow(temp,tempb);

                Kbase(res,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

                res /= epow(r(0),r(1));
                res /= temp;
            }

            else
            {
                res = 1.0;
            }

            break;
        }

        case 7:
        {
            res = xyprod;
            res /= r(0);
            res /= r(0);
            res += r(1);
            OP_sech(res);
            res *= res;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 8:
        {
            res  = diffis;
            res /= 2.0;
            res /= r(0);
            res /= r(0);
            res /= r(1);
            res += 1.0;
            res = epow(res,-r(1)-1.0);
            res /= -2.0;
            res /= r(0);
            res /= r(0);

//OLD            res = diffis;
//OLD            res += r(0);
//OLD            res *= res;
//OLD            OP_einv(res);
//OLD            res *= r(0);
//OLD            res *= 2.0;

            break;
        }

        case 9:
        {
            gentype temp;

            Kbase(temp,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res = -1.0;
            res /= temp;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 10:
        {
            gentype temp;

            Kbase(temp,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res = temp;
            raiseto(res,3);
            res /= r(0);
            res /= r(0);

            break;
        }

        case 11:
        {
            res = r(0);
            res *= r(0);
            res -= diffis;
            res /= diffis;
            OP_einv(res);
            OP_sqrt(res);
            res *= 4.0/NUMBASE_PI;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 12:
        {
            res = diffis;
            OP_sqrt(res);
            res *= r(0);
            res *= r(0);
            res -= sqrt(diffis);
            res *= 1.5;
            res /= r(0);
            res /= r(0);
            res /= r(0);

            break;
        }

        case 13:
        {
            if ( (double) abs2(diffis) >= BADZEROTOL*BADZEROTOL )
            {
                gentype qq(diffis);

                OP_sqrt(qq);
                qq /= r(0);

                gentype rr(qq);

                OP_sinc(rr);

                res = qq;
                OP_cos(res);
                res -= rr;
                res /= qq;
                res /= 2.0;
                res /= r(0);
                res /= r(0);
                res /= qq;
                res *= -2.0;
            }

            else
            {
                res = 1.0;
            }

            break;
        }

        case 14:
        {
            gentype raiseto(r(1));

            raiseto /= 2.0;
            raiseto -= 1.0;

            res = diffis;
            res /= r(0);
            res /= r(0);
            res = epow(res,raiseto);
            res *= r(1);
            res /= r(0);
            res /= r(0);

            break;
        }

        case 15:
        {
            gentype raisetoa(r(1));

            raisetoa /= 2.0;

            gentype raisetob(raisetoa);

            raisetob -= 1.0;

            gentype temp = diffis;

            temp /= r(0);
            temp /= r(0);

            temp = epow(temp,raisetoa);

            temp += 1.0;

            res = epow(diffis,raisetob);
            res /= temp;
            res *= r(1);

            res /= r(0);
            res /= r(0);

            break;
        }

        case 18:
        {
            throw("Bessel kernel not implemented yet");
            break;
        }

        case 19:
        {
            Kbase(res,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res *= res;
            res *= 2.0;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 23:
        {
            gentype raiseto(r(1));

            raiseto -= 1.0;

            Kbase(res,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res *= res;
            res *= 2.0;
            res /= r(0);
            res *= r(1);
            res *= epow(diffis,raiseto);

            break;
        }

        case 24:
        {
            gentype tmp = xyprod;

            tmp /= r(0);
            tmp /= r(0);

            gentype temp(1.0);

            temp -= tmp;

            gentype tempb(tmp);

            raiseto(tempb,ic(0)-1);
            tempb *= ic(0);

            res = tmp;
            raiseto(res,ic(0));
            res -= 1.0;
            res /= temp;
            res -= tempb;
            res /= temp;
            res /= temp;

            res /= r(0);
            res /= r(0);

            break;
        }

        case 25:
        {
            gentype qq(diffis);

            OP_sqrt(qq);

            res = qq;
            res /= r(0);
            res -= NUMBASE_PI;
            res.negate();
            OP_sinh(res);
            res *= NUMBASE_PI;
            res /= r(0);
            res /= qq;

            break;
        }

        case 26:
        {
            gentype raiseto(r(0));
            gentype multby(r(0));

            raiseto -= 0.5;
            multby += 0.5;

            res = diffis;
            res /= r(0);
            res = epow(res,r(0)-0.5);
            res *= (r(0)+0.5);
            res /= r(0);
            res *= -2.0;

            break;
        }

        case 27:
        {
            gentype qq(diffis);

            qq /= r(0);
            res = epow(qq,r(1));
            res *= log(sqrt(qq));
            res += 0.5;
            res /= qq;
            res *= r(1);
            res *= -2.0;
            res /= r(0);

            break;
        }

        case 32:
        {
            res = 0.0;
            break;
        }

        case 33:
        {
            res = 0.0;
            break;
        }

        case 34:
        {
            res = diffis;
            OP_sqrt(res);
            if ( real(res) < real(r(0)) )
            {
                res *= r(0);
                res *= r(0);
                OP_einv(res);
            }

            else
            {
                res = 0.0;
            }

            break;
        }

        case 42:
        {
            res  = xyprod;
            res /= r(0);
            res /= r(0);

            gentype tzsq = res;
            gentype czsq = res;

            OP_tan(tzsq);
            OP_sec(czsq);

            tzsq *= tzsq;
            czsq *= czsq;

            tzsq -= 1.0;
            tzsq *= -1.0;

            res  = czsq;
            res /= tzsq;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 43:
        {
            res  = xyprod;
            res /= r(0);
            res /= r(0);
            res -= 1.0;
            res *= res;
            OP_einv(res);
            res /= r(0);
            res /= r(0);
            res /= r(0);
            res /= r(0);

            break;
        }

        case 44:
        {
            Kbase(res,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res /= r(0);
            res /= r(0);

            break;
        }

        case 45:
        {
            Kbase(res,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res /= r(0);
            res /= r(0);

            break;
        }

        case 46:
        {
            Kbase(res,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res /= r(0);
            res /= r(0);

            break;
        }

        case 100:
        {
            res = 1.0;

            res /= r(0);
            res /= r(0);

            break;
        }

        case 101:
        {
            gentype temp;

            Kbase(temp,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res = temp;
            temp.negate();
            temp += 1.0;
            res *= temp;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 102:
        {
            gentype temp;

            Kbase(temp,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res = temp;
            raiseto(temp,2);
            temp.negate();
            temp += 1.0;
            res *= temp;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 103:
        {
            res = 0.0;
            break;
        }

        case 104:
        {
            res = 0.0;

            if ( (double) real(xyprod) > BADZEROTOL )
            {
                res = 1.0;
                res /= r(0);
                res /= r(0);
            }

            break;
        }

        case 105:
        {
            gentype temp(xyprod);

            temp /= r(0);
            temp /= r(0);
            OP_exp(temp);
            res = temp;
            res += r(1);
            OP_einv(res);
            res *= temp;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 106:
        {
            res = 0.0;

            if ( (double) real(xyprod) > BADZEROTOL )
            {
                res = 1.0;
                res /= r(0);
                res /= r(0);
            }

            else
            {
                res = r(1);
                res /= r(0);
                res /= r(0);
            }

            break;
        }

        case 200:
        {
            res = 1.0;

            res /= r(0);
            res /= r(0);

            break;
        }

        case 201:
        {
            gentype temp;

            Kbase(temp,q,cType(q),txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res = temp;
            res += 1.0;
            temp.negate();
            temp += 1.0;
            res *= temp;
            res /= r(0);
            res /= r(0);
            res *= 0.5;

            break;
        }

        case 202:
        {
            gentype temp;

            Kbase(temp,q,102,txyprod,tyxprod,diffis,x,xinfo,xnorm,ii,xdim,m,0,0,mlid);

            res = temp;
            temp = epow(temp,r(2));
            temp.negate();
            temp += 1.0;
            res *= temp;
            res /= r(0);
            res /= r(0);
            res *= 2.0;

            break;
        }

        case 203:
        {
            res = 0.0;
            break;
        }

        case 204:
        {
            res = 0.0;

            if ( (double) real(xyprod) > BADZEROTOL )
            {
                res = 1.0;
                res /= r(0);
                res /= r(0);
            }

            break;
        }

        case 205:
        {
            gentype temp(xyprod);

            temp /= r(0);
            temp /= r(0);
            OP_exp(temp);

            res = temp;
            res += r(1);
            OP_einv(res);
            res *= temp;
            res /= r(0);
            res /= r(0);
            res *= 2.0;

            break;
        }

        case 206:
        {
            res = 0.0;

            if ( (double) real(xyprod) > BADZEROTOL )
            {
                res = 1.0;
                res /= r(0);
                res /= r(0);
            }

            else
            {
                res = r(1);
                res /= r(0);
                res /= r(0);
            }

            break;
        }

        case 300:
        {
            res = diffis;
            OP_sqrt(res);
            OP_einv(res);
            res *= 0.5;
            res /= r(0);
            res /= r(0);

            break;
        }

        case 503:
        case 504:
        case 553:
        case 554:
        case 703:
        case 704:
        case 753:
        case 754:
        {
            res = 0.0;
            break;
        }

        case 402: 
        case 452: 
        case 602: 
        case 652: 
        {
            // K = 2/(1+exp(-r0*min_k(x_k-y_k))) - r1
            //   = 2/(1+exp(-r0*z)) - r1
            //
            // dK/dz =  2/(1+exp(-r0*z)) - r1

            res = 0.0;

            if ( xx.nearindsize() )
            {
                double temp = 0;
                double minval = 0;

                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    temp  = (double) xx.direcref(i);
                    temp -= (double) yy.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        temp = -temp;
                    }

                    if ( !i || ( temp < minval ) )
                    {
                        minval = temp;
                        minmaxres = xx.ind(i);
                    }
                }

                gentype tempb(minval);

                tempb *- r(0);
                tempb.negate();
                OP_exp(tempb);

                res  = tempb;
                res += 1.0;
                res *= res;
                OP_einv(res);
                res *= 2.0;
                res *= r(0);
                res *= tempb;
            }

            if ( typeis/100 == 4 )
            {
                res *= 0.5;
            }

            break;
        }

        case 403: 
        case 453: 
        case 603: 
        case 653: 
        {
            res = 0.0;

            if ( xx.nearindsize() )
            {
                double temp = 0;
                double minval = 0;

                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    temp  = (double) xx.direcref(i);
                    temp -= (double) yy.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        temp = -temp;
                    }

                    if ( !i || ( temp < minval ) )
                    {
                        minval = temp;
                        minmaxres = xx.ind(i);
                    }
                }
            }

            break;
        }

        case 404: 
        case 454: 
        case 604: 
        case 654: 
        {
            res = 1.0;

            if ( xx.nearindsize() )
            {
                double temp = 0;
                double maxval = 0;

                for ( i = 0 ; i < xx.nearindsize() ; i++ )
                {
                    temp  = (double) xx.direcref(i);
                    temp -= (double) yy.direcref(i);

                    if ( (typeis/10)%10 == 5 )
                    {
                        temp = -temp;
                    }

                    if ( !i || ( temp > maxval ) )
                    {
                        maxval = temp;
                        minmaxres = xx.ind(i);
                    }
                }
            }

            break;
        }

        case 800: case 801: case 802: case 803: case 804: case 805: case 806: case 807: case 808: case 809:
        case 810: case 811: case 812: case 813: case 814: case 815: case 816: case 817: case 818: case 819:
        case 820: case 821: case 822: case 823: case 824: case 825: case 826: case 827: case 828: case 829:
        case 830: case 831: case 832: case 833: case 834: case 835: case 836: case 837: case 838: case 839:
        case 840: case 841: case 842: case 843: case 844: case 845: case 846: case 847: case 848: case 849:
        case 850: case 851: case 852: case 853: case 854: case 855: case 856: case 857: case 858: case 859:
        case 860: case 861: case 862: case 863: case 864: case 865: case 866: case 867: case 868: case 869:
        case 870: case 871: case 872: case 873: case 874: case 875: case 876: case 877: case 878: case 879:
        case 880: case 881: case 882: case 883: case 884: case 885: case 886: case 887: case 888: case 889:
        case 890: case 891: case 892: case 893: case 894: case 895: case 896: case 897: case 898: case 899:
        {
            kernel8xx(q,res,minmaxind,cType(q),x,xinfo,ii,xdim,m,0,32,mlid);

            break;
        }

        default:
        {
            throw("Kernel does not have defined derivative.\n");
            break;
        }
    }

    minmaxind = combineminmaxind(minmaxind,minmaxres);

    return;
}






























































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================


















































// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================
// =========================================================================

//phantomxyz
void MercerKernel::kernel8xx(int q, gentype &res, int &minmaxind, int typeis,
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xdim,densetype,resmode,mlid);

        return;
    }

    gentype dummy;

    (*(getAltCall(q))).K0xfer(res,minmaxind,typeis,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, gentype &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa,
                             const vecInfo &xainfo, 
                             int ia, 
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xa,xainfo,ia,xdim,densetype,resmode,mlid);

        return;
    }

    (*(getAltCall(q))).K1xfer(res,minmaxind,typeis,xa,xainfo,ia,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, gentype &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb,
                             const vecInfo &xainfo, const vecInfo &xbinfo,
                             int ia, int ib,
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xa,xb,xainfo,xbinfo,ia,ib,xdim,densetype,resmode,mlid);

        return;
    }

    gentype dummy;

    (*(getAltCall(q))).K2xfer(dummy,dummy,res,minmaxind,typeis,xa,xb,xainfo,xbinfo,ia,ib,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, gentype &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, 
                             const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, 
                             int ia, int ib, int ic, 
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xa,xb,xc,xainfo,xbinfo,xcinfo,ia,ib,ic,xdim,densetype,resmode,mlid);

        return;
    }

    (*(getAltCall(q))).K3xfer(res,minmaxind,typeis,xa,xb,xc,xainfo,xbinfo,xcinfo,ia,ib,ic,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, gentype &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, const SparseVector<gentype> &xd,
                             const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, const vecInfo &xdinfo,
                             int ia, int ib, int ic, int id,
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xa,xb,xc,xd,xainfo,xbinfo,xcinfo,xdinfo,ia,ib,ic,id,xdim,densetype,resmode,mlid);

        return;
    }

    (*(getAltCall(q))).K4xfer(res,minmaxind,typeis,xa,xb,xc,xd,xainfo,xbinfo,xcinfo,xdinfo,ia,ib,ic,id,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, gentype &res, int &minmaxind, int typeis,
                             Vector<const SparseVector<gentype> *> &x,
                             Vector<const vecInfo *> &xinfo,
                             Vector<int> &i,
                             int xdim, int m, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,x,xinfo,i,xdim,m,densetype,resmode,mlid);

        return;
    }

    (*(getAltCall(q))).Kmxfer(res,minmaxind,typeis,x,xinfo,i,xdim,m,densetype,resmode,mlid);

    return;
}




void MercerKernel::kernel8xx(int q, double &res, int &minmaxind, int typeis,
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xdim,densetype,resmode,mlid);

        return;
    }

    (*(getAltCall(q))).K0xfer(res,minmaxind,typeis,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, double &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, 
                             const vecInfo &xainfo, 
                             int ia, 
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xa,xainfo,ia,xdim,densetype,resmode,mlid);

        return;
    }

    (*(getAltCall(q))).K1xfer(res,minmaxind,typeis,xa,xainfo,ia,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, double &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb,
                             const vecInfo &xainfo, const vecInfo &xbinfo,
                             int ia, int ib,
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xa,xb,xainfo,xbinfo,ia,ib,xdim,densetype,resmode,mlid);

        return;
    }

    double dummy;

    (*(getAltCall(q))).K2xfer(dummy,dummy,res,minmaxind,typeis,xa,xb,xainfo,xbinfo,ia,ib,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, double &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, 
                             const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, 
                             int ia, int ib, int ic, 
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xa,xb,xc,xainfo,xbinfo,xcinfo,ia,ib,ic,xdim,densetype,resmode,mlid);

        return;
    }

    (*(getAltCall(q))).K3xfer(res,minmaxind,typeis,xa,xb,xc,xainfo,xbinfo,xcinfo,ia,ib,ic,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, double &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, const SparseVector<gentype> &xd,
                             const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, const vecInfo &xdinfo,
                             int ia, int ib, int ic, int id,
                             int xdim, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,xa,xb,xc,xd,xainfo,xbinfo,xcinfo,xdinfo,ia,ib,ic,id,xdim,densetype,resmode,mlid);

        return;
    }

    (*(getAltCall(q))).K4xfer(res,minmaxind,typeis,xa,xb,xc,xd,xainfo,xbinfo,xcinfo,xdinfo,ia,ib,ic,id,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel8xx(int q, double &res, int &minmaxind, int typeis,
                             Vector<const SparseVector<gentype> *> &x,
                             Vector<const vecInfo *> &xinfo,
                             Vector<int> &i,
                             int xdim, int m, int densetype, int resmode, int mlid) const
{
    if ( typeis >= 900 )
    {
        kernel9xx(q,res,minmaxind,typeis,x,xinfo,i,xdim,m,densetype,resmode,mlid);

        return;
    }

    (*(getAltCall(q))).Kmxfer(res,minmaxind,typeis,x,xinfo,i,xdim,m,densetype,resmode,mlid);

    return;
}



void MercerKernel::dkernel8xx(int q, double &dxyprod, double &ddiffis, double &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb,
                             const vecInfo &xainfo, const vecInfo &xbinfo,
                             int ia, int ib,
                             int xdim, int densetype, int resmode, int mlid) const
{
    NiceAssert( typeis < 900 );

    (*(getAltCall(q))).K2xfer(dxyprod,ddiffis,res,minmaxind,typeis,xa,xb,xainfo,xbinfo,ia,ib,xdim,densetype,resmode,mlid);

    return;
}
void MercerKernel::dkernel8xx(int q, gentype &dxyprod, gentype &ddiffis, gentype &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb,
                             const vecInfo &xainfo, const vecInfo &xbinfo,
                             int ia, int ib,
                             int xdim, int densetype, int resmode, int mlid) const
{
    NiceAssert( typeis < 900 );

    (*(getAltCall(q))).K2xfer(dxyprod,ddiffis,res,minmaxind,typeis,xa,xb,xainfo,xbinfo,ia,ib,xdim,densetype,resmode,mlid);

    return;
}
































//phantomxyz
void MercerKernel::kernel9xx(int q, gentype &res, int &minmaxind, int typeis,
                             int xdim, int densetype, int resmode, int mlid) const
{
    kernel9xx(q,res.force_double(),minmaxind,typeis,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel9xx(int q, gentype &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa,
                             const vecInfo &xainfo,
                             int ia,
                             int xdim, int densetype, int resmode, int mlid) const
{
    kernel9xx(q,res.force_double(),minmaxind,typeis,xa,xainfo,ia,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel9xx(int q, gentype &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb,
                             const vecInfo &xainfo, const vecInfo &xbinfo,
                             int ia, int ib,
                             int xdim, int densetype, int resmode, int mlid) const
{
    kernel9xx(q,res.force_double(),minmaxind,typeis,xa,xb,xainfo,xbinfo,ia,ib,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel9xx(int q, gentype &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc,
                             const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo,
                             int ia, int ib, int ic,
                             int xdim, int densetype, int resmode, int mlid) const
{
    kernel9xx(q,res.force_double(),minmaxind,typeis,xa,xb,xc,xainfo,xbinfo,xcinfo,ia,ib,ic,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel9xx(int q, gentype &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, const SparseVector<gentype> &xd,
                             const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, const vecInfo &xdinfo,
                             int ia, int ib, int ic, int id,
                             int xdim, int densetype, int resmode, int mlid) const
{
    kernel9xx(q,res.force_double(),minmaxind,typeis,xa,xb,xc,xd,xainfo,xbinfo,xcinfo,xdinfo,ia,ib,ic,id,xdim,densetype,resmode,mlid);

    return;
}

void MercerKernel::kernel9xx(int q, gentype &res, int &minmaxind, int typeis,
                             Vector<const SparseVector<gentype> *> &x,
                             Vector<const vecInfo *> &xinfo,
                             Vector<int> &i,
                             int xdim, int m, int densetype, int resmode, int mlid) const
{
    kernel9xx(q,res.force_double(),minmaxind,typeis,x,xinfo,i,xdim,m,densetype,resmode,mlid);

    return;
}



void MercerKernel::kernel9xx(int q, double &res, int &minmaxind, int typeis,
                             int xdim, int densetype, int resmode, int mlid) const
{
    (void) minmaxind;

    awarestream *svmsock = make900channel(q);

    if ( svmsock )
    {
        std::istream svmsockin(svmsock);
        std::ostream svmsockout(svmsock);

        svmsockout << "0\n";
        svmsockout << typeis    << "\n";
        svmsockout << xdim      << "\n";
        svmsockout << densetype << "\n";
        svmsockout << resmode   << "\n";
        svmsockout << mlid      << "\n";

        svmsockin >> res;
    }

    else
    {
        res = 0.0;
    }

    return;
}

void MercerKernel::kernel9xx(int q, double &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa,
                             const vecInfo &xainfo,
                             int ia,
                             int xdim, int densetype, int resmode, int mlid) const
{
    (void) minmaxind;
    (void) xainfo;

    awarestream *svmsock = make900channel(q);

    if ( svmsock )
    {
        std::istream svmsockin(svmsock);
        std::ostream svmsockout(svmsock);

        svmsockout << "1\n";
        svmsockout << typeis    << "\n";
        svmsockout << xdim      << "\n";
        svmsockout << densetype << "\n";
        svmsockout << resmode   << "\n";
        svmsockout << mlid      << "\n";
        svmsockout << ia        << "\n";
        printoneline(svmsockout,xa) << "\n";

        svmsockin >> res;
    }

    else
    {
        res = 0.0;
    }

    return;
}

void MercerKernel::kernel9xx(int q, double &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb,
                             const vecInfo &xainfo, const vecInfo &xbinfo,
                             int ia, int ib,
                             int xdim, int densetype, int resmode, int mlid) const
{
    (void) minmaxind;
    (void) xainfo;
    (void) xbinfo;

    awarestream *svmsock = make900channel(q);

    if ( svmsock )
    {
        std::istream svmsockin(svmsock);
        std::ostream svmsockout(svmsock);

        svmsockout << "2\n";
        svmsockout << typeis    << "\n";
        svmsockout << xdim      << "\n";
        svmsockout << densetype << "\n";
        svmsockout << resmode   << "\n";
        svmsockout << mlid      << "\n";
        svmsockout << ia        << "\n";
        svmsockout << ib        << "\n";
        printoneline(svmsockout,xa) << "\n";
        printoneline(svmsockout,xb) << "\n";

        svmsockin >> res;
    }

    else
    {
        res = 0.0;
    }

    return;
}

void MercerKernel::kernel9xx(int q, double &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc,
                             const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo,
                             int ia, int ib, int ic,
                             int xdim, int densetype, int resmode, int mlid) const
{
    (void) minmaxind;
    (void) xainfo;
    (void) xbinfo;
    (void) xcinfo;

    awarestream *svmsock = make900channel(q);

    if ( svmsock )
    {
        std::istream svmsockin(svmsock);
        std::ostream svmsockout(svmsock);

        svmsockout << "3\n";
        svmsockout << typeis    << "\n";
        svmsockout << xdim      << "\n";
        svmsockout << densetype << "\n";
        svmsockout << resmode   << "\n";
        svmsockout << mlid      << "\n";
        svmsockout << ia        << "\n";
        svmsockout << ib        << "\n";
        svmsockout << ic        << "\n";
        printoneline(svmsockout,xa) << "\n";
        printoneline(svmsockout,xb) << "\n";
        printoneline(svmsockout,xc) << "\n";

        svmsockin >> res;
    }

    else
    {
        res = 0.0;
    }

    return;
}

void MercerKernel::kernel9xx(int q, double &res, int &minmaxind, int typeis,
                             const SparseVector<gentype> &xa, const SparseVector<gentype> &xb, const SparseVector<gentype> &xc, const SparseVector<gentype> &xd,
                             const vecInfo &xainfo, const vecInfo &xbinfo, const vecInfo &xcinfo, const vecInfo &xdinfo,
                             int ia, int ib, int ic, int id,
                             int xdim, int densetype, int resmode, int mlid) const
{
    (void) minmaxind;
    (void) xainfo;
    (void) xbinfo;
    (void) xcinfo;
    (void) xdinfo;

    awarestream *svmsock = make900channel(q);

    if ( svmsock )
    {
        std::istream svmsockin(svmsock);
        std::ostream svmsockout(svmsock);

        svmsockout << "4\n";
        svmsockout << typeis    << "\n";
        svmsockout << xdim      << "\n";
        svmsockout << densetype << "\n";
        svmsockout << resmode   << "\n";
        svmsockout << mlid      << "\n";
        svmsockout << ia        << "\n";
        svmsockout << ib        << "\n";
        svmsockout << ic        << "\n";
        svmsockout << id        << "\n";
        printoneline(svmsockout,xa) << "\n";
        printoneline(svmsockout,xb) << "\n";
        printoneline(svmsockout,xc) << "\n";
        printoneline(svmsockout,xd) << "\n";

        svmsockin >> res;
    }

    else
    {
        res = 0.0;
    }

    return;
}

void MercerKernel::kernel9xx(int q, double &res, int &minmaxind, int typeis,
                             Vector<const SparseVector<gentype> *> &x,
                             Vector<const vecInfo *> &xinfo,
                             Vector<int> &i,
                             int xdim, int m, int densetype, int resmode, int mlid) const
{
    (void) minmaxind;
    (void) xinfo;

    awarestream *svmsock = make900channel(q);

    if ( svmsock )
    {
        std::istream svmsockin(svmsock);
        std::ostream svmsockout(svmsock);

        svmsockout << m         << "\n";
        svmsockout << typeis    << "\n";
        svmsockout << xdim      << "\n";
        svmsockout << densetype << "\n";
        svmsockout << resmode   << "\n";
        svmsockout << mlid      << "\n";

        int ii;

        for ( ii = 0 ; ii < m ; ii++ )
        {
            svmsockout << i(ii) << "\n";
        }

        for ( ii = 0 ; ii < m ; ii++ )
        {
            printoneline(svmsockout,*(x(ii))) << "\n";
        }

        svmsockin >> res;
    }

    else
    {
        res = 0.0;
    }

    return;
}








































































// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------------------------------
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================
// ========================================================================


// Stream operators


std::ostream &operator<<(std::ostream &output, const MercerKernel &src)
{
    gentype tempsampdist("[ ]");

    if ( src.isTrivialKernel() )
    {
        output << "K" << src.cType() << "(" << src.cWeight() << ";" << src.kinf(0) << ";";

        int i;

        for ( i = 0 ; i < src.cRealConstants().size() ; i++ )
        {
            if ( i < src.cRealConstants().size()-1 )
            {
                output << src.cRealConstants()(i) << ",";
            }

            else
            {
                output << src.cRealConstants()(i);
            }
        }

        output << ";";

        for ( i = 0 ; i < src.cIntConstants().size() ; i++ )
        {
            if ( i < src.cIntConstants().size()-1 )
            {
                output << src.cIntConstants()(i) << ",";
            }

            else
            {
                output << src.cIntConstants()(i) << ";";
            }
        }

        output << ";";
        output << src.suggestXYcache() << ";" << src.isIPdiffered() << ")";
    }

    else
    {
        output << "Product:               " << src.isprod          << "\n";
        output << "Indexed:               " << src.isind           << "\n";
        output << "Full Norm:             " << src.isfullnorm      << "\n";
        output << "Left Plain:            " << src.leftplain       << "\n";
        output << "Right Plain:           " << src.rightplain      << "\n";
        output << "Alternative Diff:      " << src.isdiffalt       << "\n";
        output << "Shifting/scaling:      " << src.isshift         << "\n";
        output << "Indexing:              " << src.dIndexes        << "\n";
        output << "Shift factor:          " << src.dShift          << "\n";
        output << "Scale factor:          " << src.dScale          << "\n";
        output << "Suggest xy cache:      " << src.xsuggestXYcache << "\n";
        output << "IP differed:           " << src.xisIPdiffered   << "\n";
        output << "Number of samples:     " << src.xnumsamples     << "\n";
        output << "Sample indices:        " << src.xindsub         << "\n";
        output << "Sample distribution:   " << src.xsampdist       << "\n";

        output << "Kernel type:           " << src.dtype           << "\n";
        output << "Kernel flags:          " << src.kernflags       << "\n";
        output << "Normalisation:         " << src.isnorm          << "\n";
        output << "Chained:               " << src.ischain         << "\n";
        output << "Split:                 " << src.issplit         << "\n";
        output << "Multiplicative Split:  " << src.mulsplit        << "\n";
        output << "Magnitude Terms:       " << src.ismagterm       << "\n";
        output << "Real constants:        " << src.dRealConstants  << "\n";
        output << "Integer constants:     " << src.dIntConstants   << "\n";
        output << "Real overwrites:       " << src.dRealOverwrite  << "\n";
        output << "Integer overwrites:    " << src.dIntOverwrite   << "\n";
        output << "Alt callback:          " << src.altcallback     << "\n\n";

        output << "Enable <xy> retrieval: " << src.enchurn         << "\n";
    }

    return output;
}

std::istream &operator>>(std::istream &input, MercerKernel &dest)
{
    wait_dummy dummy;

    int i;
    char tt;

    dest.kill900channel();

    while ( isspace(input.peek()) )
    {
        input.get(tt);
    }

    input.get(tt);

    if ( tt == 'K' )
    {
        gentype tempsampdist("[ ]");

        dest.resize(1);

        dest.isprod      = 0;
        dest.isind       = 0;
        dest.isfullnorm  = 0;
        dest.leftplain   = 0;
        dest.rightplain  = 0;
        dest.isdiffalt   = 1;
        dest.isshift     = 0;
        dest.dIndexes    = 0;
        dest.dShift.zero();
        dest.dScale.zero();
        dest.xnumsamples = DEFAULT_NUMKERNSAMP;
        dest.xsampdist   = tempsampdist;

        dest.xindsub.zero();

        dest.isnorm      = zeroint();
        dest.ischain     = zeroint();
        dest.issplit     = zeroint();
        dest.mulsplit    = zeroint();
        dest.ismagterm   = zeroint();
        dest.enchurn     = zeroint();
        dest.altcallback = dest.MLid();

        dest.dRealOverwrite("&",zeroint()).zero();
        dest.dIntOverwrite("&",zeroint()).zero();

        std::stringstream sbuff;

        dest.dRealConstants("&",zeroint()).resize(1);
        dest.dIntConstants("&",zeroint()).resize(1);

        while ( input.peek() != '(' )
        {
            input.get(tt);
            sbuff << tt;
        }

        sbuff >> dest.dtype("&",zeroint());

        input.get(tt);

        while ( input.peek() != ';' )
        {
            input.get(tt);
            sbuff << tt;
        }

        sbuff >> dest.dRealConstants("&",zeroint())("&",zeroint());

        input.get(tt);

        while ( input.peek() != ';' )
        {
            input.get(tt);
            sbuff << tt;
        }

        sbuff >> dest.kernflags("&",zeroint());

        input.get(tt);

        i = 0;

        while ( input.peek() != ';' )
        {
            i++;

            while ( ( input.peek() != ',' ) && ( input.peek() != ';' ) )
            {
                input.get(tt);
                sbuff << tt;
            }

            dest.dRealConstants("&",zeroint()).add(i);

            sbuff >> dest.dRealConstants("&",zeroint())("&",i);

            if ( input.peek() == ',' )
            {
                input.get(tt);
            }
        }

        input.get(tt);

        i = 0;

        while ( input.peek() != ';' )
        {
            i++;

            while ( ( input.peek() != ',' ) && ( input.peek() != ';' ) )
            {
                input.get(tt);
                sbuff << tt;
            }

            dest.dIntConstants("&",zeroint()).add(i);

            sbuff >> dest.dIntConstants("&",zeroint())("&",i);

            if ( input.peek() == ',' )
            {
                input.get(tt);
            }
        }

        input.get(tt);

        while ( input.peek() != ';' )
        {
            input.get(tt);
            sbuff << tt;
        }

        sbuff >> dest.xsuggestXYcache;

        input.get(tt);

        while ( input.peek() != ')' )
        {
            input.get(tt);
            sbuff << tt;
        }

        sbuff >> dest.xisIPdiffered;

        input.get(tt);
    }

    else
    {
        input >> dummy; input >> dest.isprod;
        input >> dummy; input >> dest.isind;
        input >> dummy; input >> dest.isfullnorm;
        input >> dummy; input >> dest.leftplain;
        input >> dummy; input >> dest.rightplain;
        input >> dummy; input >> dest.isdiffalt;
        input >> dummy; input >> dest.isshift;
        input >> dummy; input >> dest.dIndexes;
        input >> dummy; input >> dest.dShift;
        input >> dummy; input >> dest.dScale;
        input >> dummy; input >> dest.xsuggestXYcache;
        input >> dummy; input >> dest.xisIPdiffered;
        input >> dummy; input >> dest.xnumsamples;
        input >> dummy; input >> dest.xindsub;
        input >> dummy; input >> dest.xsampdist;

        input >> dummy; input >> dest.dtype;
        input >> dummy; input >> dest.kernflags;
        input >> dummy; input >> dest.isnorm;
        input >> dummy; input >> dest.ischain;
        input >> dummy; input >> dest.issplit;
        input >> dummy; input >> dest.mulsplit;
        input >> dummy; input >> dest.ismagterm;
        input >> dummy; input >> dest.dRealConstants;
        input >> dummy; input >> dest.dIntConstants;
        input >> dummy; input >> dest.dRealOverwrite;
        input >> dummy; input >> dest.dIntOverwrite;
        input >> dummy; input >> dest.altcallback;

        input >> dummy; input >> dest.enchurn;

        dest.k900sock.resize(dest.size());
        dest.k900sock = (awarestream *) NULL;
    }

    retVector<int> tmp;

    dest.xproddepth    = 4; // default back, only matters for optimisation
    dest.xnumSplits    = dest.calcnumSplits();
    dest.xnumMulSplits = dest.calcnumMulSplits();

    dest.fixcombinedOverwriteSrc();
    dest.fixShiftProd();

    dest.xisfast     = -1;
    dest.xneedsInner = -1;
    dest.xneedsDiff  = -1;
    dest.xneedsNorm  = -1;

    return input;
}

std::ostream &operator<<(std::ostream &output, const vecInfoBase &src)
{
    output << "2-product:            " << src.xhalfmprod << "\n";
//    output << "Mean:                 " << src.xmean      << "\n";
//    output << "Median:               " << src.xmedian    << "\n";
//    output << "Squared mean:         " << src.xsqmean    << "\n";
//    output << "Variance:             " << src.xvari      << "\n";
//    output << "Standard deviation:   " << src.xstdev     << "\n";
//    output << "Maximum:              " << src.xmax       << "\n";
//    output << "Minimum:              " << src.xmin       << "\n";
//    output << "Range:                " << src.xrange     << "\n";
//    output << "Absolute maximum:     " << src.xmaxabs    << "\n";
    output << "Upsize:               " << src.xusize     << "\n";
    output << "Has been initialised: " << src.hasbeenset << "\n";

    return output;
}

std::istream &operator>>(std::istream &input, vecInfoBase &dest)
{
    wait_dummy dummy;

    input >> dummy; input >> dest.xhalfmprod;
//    input >> dummy; input >> dest.xmean;
//    input >> dummy; input >> dest.xmedian;
//    input >> dummy; input >> dest.xsqmean;
//    input >> dummy; input >> dest.xvari;
//    input >> dummy; input >> dest.xstdev;
//    input >> dummy; input >> dest.xmax;
//    input >> dummy; input >> dest.xmin;
//    input >> dummy; input >> dest.xrange;
//    input >> dummy; input >> dest.xmaxabs;
    input >> dummy; input >> dest.xusize;
    input >> dummy; input >> dest.hasbeenset;

    return input;
}

std::ostream &operator<<(std::ostream &output, const vecInfo &src)
{
    int z = 0;

    output << "Info near: " << (*((src.content)(z))) << "\n";
    output << "Info far:  " << (*((src.content)(1))) << "\n";

    return output;
}

std::istream &operator>>(std::istream &input, vecInfo &dest)
{
    int z = 0;

    wait_dummy dummy;

    if ( !dest.isloc )
    {
        MEMNEW((dest.content)("&",z),SparseVector<vecInfoBase>);
        MEMNEW((dest.content)("&",1),SparseVector<vecInfoBase>);

        (*((dest.content)("&",z)))("&",z);
        (*((dest.content)("&",1)))("&",z);
    }

    dest.isloc = 1;

    dest.minind = 0;
    dest.majind = 1;

    dest.usize_overwrite = 0;

    input >> dummy; input >> (*((dest.content)(z)));
    input >> dummy; input >> (*((dest.content)(1)));

    return input;
}

int operator==(const MercerKernel &leftop, const MercerKernel &rightop)
{
    if ( !( leftop.isprod               == rightop.isprod               ) ) { return 0; }
    if ( !( leftop.isind                == rightop.isind                ) ) { return 0; }
    if ( !( leftop.leftplain            == rightop.leftplain            ) ) { return 0; }
    if ( !( leftop.rightplain           == rightop.rightplain           ) ) { return 0; }
    if ( !( leftop.isshift              == rightop.isshift              ) ) { return 0; }
    if ( !( leftop.dtype                == rightop.dtype                ) ) { return 0; }
    if ( !( leftop.kernflags            == rightop.kernflags            ) ) { return 0; }
    if ( !( leftop.isnorm               == rightop.isnorm               ) ) { return 0; }
    if ( !( leftop.isdiffalt            == rightop.isdiffalt            ) ) { return 0; }
    if ( !( leftop.ischain              == rightop.ischain              ) ) { return 0; }
    if ( !( leftop.issplit              == rightop.issplit              ) ) { return 0; }
    if ( !( leftop.mulsplit             == rightop.mulsplit             ) ) { return 0; }
    if ( !( leftop.ismagterm            == rightop.ismagterm            ) ) { return 0; }
    if ( !( leftop.xnumSplits           == rightop.xnumSplits           ) ) { return 0; }
    if ( !( leftop.xnumMulSplits        == rightop.xnumMulSplits        ) ) { return 0; }
//    if ( !( leftop.altcallback          == rightop.altcallback          ) ) { return 0; }
    if ( !( leftop.dIndexes             == rightop.dIndexes             ) ) { return 0; }
    if ( !( leftop.dShift               == rightop.dShift               ) ) { return 0; }
    if ( !( leftop.dScale               == rightop.dScale               ) ) { return 0; }
    if ( !( leftop.dShiftProd           == rightop.dShiftProd           ) ) { return 0; }
    if ( !( leftop.dShiftProdNoConj     == rightop.dShiftProdNoConj     ) ) { return 0; }
    if ( !( leftop.dShiftProdRevConj    == rightop.dShiftProdRevConj    ) ) { return 0; }
    if ( !( leftop.dRealConstants       == rightop.dRealConstants       ) ) { return 0; }
    if ( !( leftop.dIntConstants        == rightop.dIntConstants        ) ) { return 0; }
    if ( !( leftop.dRealOverwrite       == rightop.dRealOverwrite       ) ) { return 0; }
    if ( !( leftop.dIntOverwrite        == rightop.dIntOverwrite        ) ) { return 0; }
    if ( !( leftop.combinedOverwriteSrc == rightop.combinedOverwriteSrc ) ) { return 0; }

    return 1;
}

void MercerKernel::getOneProd(gentype &res,
                              const SparseVector<gentype> &x,
                              int inding, int scaling, int xconsist, int assumreal) const
{
    if ( x.altcontent && xconsist )
    {
        // In this case the xconsist shortcut slows us down, so don't use it!

        xconsist = 0;
    }

    if ( !x.isnofaroffindpresent() && xconsist )
    {
        // faroff content is not compatible with xconst shortcut

        xconsist = 0;
    }

    if ( !xconsist )
    {
        if ( assumreal && !inding && !scaling )
        {
            oneProductAssumeReal(res.force_double(),x);
        }

        else
        {
                 if ( ( inding == 0 ) && ( scaling == 0 ) ) {        oneProduct      (res,         x       ); }
            else if ( ( inding == 0 ) && ( scaling == 3 ) ) {        oneProductScaled(res,         x,dScale); }
            else if ( ( inding == 1 ) && ( scaling == 0 ) ) { indexedoneProduct      (res,dIndexes,x       ); }
            else if ( ( inding == 1 ) && ( scaling == 3 ) ) { indexedoneProductScaled(res,dIndexes,x,dScale); }

            else
            {
               throw("Unknown one product type.");
            } 
        }
    }

    else
    {
        retVector<gentype> tmpvx;

        const Vector<gentype> &xx = x(x.ind(),tmpvx);

        if ( assumreal && !inding && !scaling )
        {
            oneProductAssumeReal(res.force_double(),xx);
        }

        else
        {
            retVector<gentype> tmpva;

                 if ( ( inding == 0 ) && ( scaling == 0 ) ) {        oneProduct      (res,         xx                           ); }
            else if ( ( inding == 0 ) && ( scaling == 3 ) ) {        oneProductScaled(res,         xx,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( scaling == 0 ) ) { indexedoneProduct      (res,dIndexes,xx                           ); }
            else if ( ( inding == 1 ) && ( scaling == 3 ) ) { indexedoneProductScaled(res,dIndexes,xx,dScale(dScale.ind(),tmpva)); }

            else
            {
               throw("Unknown one product type.");
            } 
        }
    }

    return;
}

void MercerKernel::getTwoProd(gentype &res,
                                const SparseVector<gentype> &x,
                                const SparseVector<gentype> &y,
                                int inding, int conj, int scaling, int xconsist, int assumreal) const
{
//errstream() << "phantomxyzmerceraabb 0\n";
    if ( x.altcontent && y.altcontent && xconsist )
    {
        // In this case the xconsist shortcut slows us down, so don't use it!

        xconsist = 0;
    }

    if ( ( !x.isnofaroffindpresent() || !y.isnofaroffindpresent() ) && xconsist )
    {
        // faroff content is not compatible with xconst shortcut

        xconsist = 0;
    }

    if ( assumreal )
    {
        conj = 0;
    }

//errstream() << "phantomxyzmerceraabb 1\n";
    if ( !xconsist )
    {
//errstream() << "phantomxyzmerceraabb 2\n";
        if ( assumreal && !inding && !scaling )
        {
//errstream() << "phantomxyzmerceraabb 2a\n";
            twoProductAssumeReal(res.force_double(),x,y);
        }

        else
        {
                 if ( ( inding == 0 ) && ( conj == 0 ) && ( scaling == 0 ) ) {        twoProductNoConj            (res,         x,y       ); }
            else if ( ( inding == 0 ) && ( conj == 0 ) && ( scaling == 1 ) ) {        twoProductLeftScaledNoConj  (res,         x,y,dScale); }
            else if ( ( inding == 0 ) && ( conj == 0 ) && ( scaling == 2 ) ) {        twoProductRightScaledNoConj (res,         x,y,dScale); }
            else if ( ( inding == 0 ) && ( conj == 0 ) && ( scaling == 3 ) ) {        twoProductScaledNoConj      (res,         x,y,dScale); }
            else if ( ( inding == 0 ) && ( conj == 1 ) && ( scaling == 0 ) ) {        twoProduct                  (res,         x,y       ); }
            else if ( ( inding == 0 ) && ( conj == 1 ) && ( scaling == 1 ) ) {        twoProductLeftScaled        (res,         x,y,dScale); }
            else if ( ( inding == 0 ) && ( conj == 1 ) && ( scaling == 2 ) ) {        twoProductRightScaled       (res,         x,y,dScale); }
            else if ( ( inding == 0 ) && ( conj == 1 ) && ( scaling == 3 ) ) {        twoProductScaled            (res,         x,y,dScale); }
            else if ( ( inding == 0 ) && ( conj == 2 ) && ( scaling == 0 ) ) {        twoProductRevConj           (res,         x,y       ); }
            else if ( ( inding == 0 ) && ( conj == 2 ) && ( scaling == 1 ) ) {        twoProductLeftScaledRevConj (res,         x,y,dScale); }
            else if ( ( inding == 0 ) && ( conj == 2 ) && ( scaling == 2 ) ) {        twoProductRightScaledRevConj(res,         x,y,dScale); }
            else if ( ( inding == 0 ) && ( conj == 2 ) && ( scaling == 3 ) ) {        twoProductScaledRevConj     (res,         x,y,dScale); }
            else if ( ( inding == 1 ) && ( conj == 0 ) && ( scaling == 0 ) ) { indexedtwoProductNoConj            (res,dIndexes,x,y       ); }
            else if ( ( inding == 1 ) && ( conj == 0 ) && ( scaling == 1 ) ) { indexedtwoProductLeftScaledNoConj  (res,dIndexes,x,y,dScale); }
            else if ( ( inding == 1 ) && ( conj == 0 ) && ( scaling == 2 ) ) { indexedtwoProductRightScaledNoConj (res,dIndexes,x,y,dScale); }
            else if ( ( inding == 1 ) && ( conj == 0 ) && ( scaling == 3 ) ) { indexedtwoProductScaledNoConj      (res,dIndexes,x,y,dScale); }
            else if ( ( inding == 1 ) && ( conj == 1 ) && ( scaling == 0 ) ) { indexedtwoProduct                  (res,dIndexes,x,y       ); }
            else if ( ( inding == 1 ) && ( conj == 1 ) && ( scaling == 1 ) ) { indexedtwoProductLeftScaled        (res,dIndexes,x,y,dScale); }
            else if ( ( inding == 1 ) && ( conj == 1 ) && ( scaling == 2 ) ) { indexedtwoProductRightScaled       (res,dIndexes,x,y,dScale); }
            else if ( ( inding == 1 ) && ( conj == 1 ) && ( scaling == 3 ) ) { indexedtwoProductScaled            (res,dIndexes,x,y,dScale); }
            else if ( ( inding == 1 ) && ( conj == 2 ) && ( scaling == 0 ) ) { indexedtwoProductRevConj           (res,dIndexes,x,y       ); }
            else if ( ( inding == 1 ) && ( conj == 2 ) && ( scaling == 1 ) ) { indexedtwoProductLeftScaledRevConj (res,dIndexes,x,y,dScale); }
            else if ( ( inding == 1 ) && ( conj == 2 ) && ( scaling == 2 ) ) { indexedtwoProductRightScaledRevConj(res,dIndexes,x,y,dScale); }
            else if ( ( inding == 1 ) && ( conj == 2 ) && ( scaling == 3 ) ) { indexedtwoProductScaledRevConj     (res,dIndexes,x,y,dScale); }

            else
            {
                throw("Unknown inner product type.");
            }
        }
//errstream() << "phantomxyzmerceraabb 3\n";
    }

    else
    {
//errstream() << "phantomxyzmerceraabb 4\n";
        retVector<gentype> tmpvx;
        retVector<gentype> tmpvy;

        const Vector<gentype> &xx = x(x.ind(),tmpvx);
        const Vector<gentype> &yy = y(y.ind(),tmpvy);

        if ( assumreal && !inding && !scaling )
        {
            twoProductAssumeReal(res.force_double(),xx,yy);
        }

        else
        {
            retVector<gentype> tmpva;

                 if ( ( inding == 0 ) && ( conj == 0 ) && ( scaling == 0 ) ) {        twoProductNoConj            (res,         xx,yy                           ); }
            else if ( ( inding == 0 ) && ( conj == 0 ) && ( scaling == 1 ) ) {        twoProductLeftScaledNoConj  (res,         xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 0 ) && ( conj == 0 ) && ( scaling == 2 ) ) {        twoProductRightScaledNoConj (res,         xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 0 ) && ( conj == 0 ) && ( scaling == 3 ) ) {        twoProductScaledNoConj      (res,         xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 0 ) && ( conj == 1 ) && ( scaling == 0 ) ) {        twoProduct                  (res,         xx,yy                           ); }
            else if ( ( inding == 0 ) && ( conj == 1 ) && ( scaling == 1 ) ) {        twoProductLeftScaled        (res,         xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 0 ) && ( conj == 1 ) && ( scaling == 2 ) ) {        twoProductRightScaled       (res,         xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 0 ) && ( conj == 1 ) && ( scaling == 3 ) ) {        twoProductScaled            (res,         xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 0 ) && ( conj == 2 ) && ( scaling == 0 ) ) {        twoProductRevConj           (res,         xx,yy                           ); }
            else if ( ( inding == 0 ) && ( conj == 2 ) && ( scaling == 1 ) ) {        twoProductLeftScaledRevConj (res,         xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 0 ) && ( conj == 2 ) && ( scaling == 2 ) ) {        twoProductRightScaledRevConj(res,         xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 0 ) && ( conj == 2 ) && ( scaling == 3 ) ) {        twoProductScaledRevConj     (res,         xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( conj == 0 ) && ( scaling == 0 ) ) { indexedtwoProductNoConj            (res,dIndexes,xx,yy                           ); }
            else if ( ( inding == 1 ) && ( conj == 0 ) && ( scaling == 1 ) ) { indexedtwoProductLeftScaledNoConj  (res,dIndexes,xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( conj == 0 ) && ( scaling == 2 ) ) { indexedtwoProductRightScaledNoConj (res,dIndexes,xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( conj == 0 ) && ( scaling == 3 ) ) { indexedtwoProductScaledNoConj      (res,dIndexes,xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( conj == 1 ) && ( scaling == 0 ) ) { indexedtwoProduct                  (res,dIndexes,xx,yy                           ); }
            else if ( ( inding == 1 ) && ( conj == 1 ) && ( scaling == 1 ) ) { indexedtwoProductLeftScaled        (res,dIndexes,xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( conj == 1 ) && ( scaling == 2 ) ) { indexedtwoProductRightScaled       (res,dIndexes,xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( conj == 1 ) && ( scaling == 3 ) ) { indexedtwoProductScaled            (res,dIndexes,xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( conj == 2 ) && ( scaling == 0 ) ) { indexedtwoProductRevConj           (res,dIndexes,xx,yy                           ); }
            else if ( ( inding == 1 ) && ( conj == 2 ) && ( scaling == 1 ) ) { indexedtwoProductLeftScaledRevConj (res,dIndexes,xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( conj == 2 ) && ( scaling == 2 ) ) { indexedtwoProductRightScaledRevConj(res,dIndexes,xx,yy,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( conj == 2 ) && ( scaling == 3 ) ) { indexedtwoProductScaledRevConj     (res,dIndexes,xx,yy,dScale(dScale.ind(),tmpva)); }

            else
            {
                throw("Unknown inner product type.");
            }
        }
//errstream() << "phantomxyzmerceraabb 5\n";
    }

//errstream() << "phantomxyzmerceraabb 6\n";
    return;
}

void MercerKernel::getThreeProd(gentype &res,
                                const SparseVector<gentype> &xa,
                                const SparseVector<gentype> &xb,
                                const SparseVector<gentype> &xc,
                                int inding, int scaling, int xconsist, int assumreal) const
{
    if ( xa.altcontent && xb.altcontent && xc.altcontent && xconsist )
    {
        // In this case the xconsist shortcut slows us down, so don't use it!

        xconsist = 0;
    }

    if ( ( !xa.isnofaroffindpresent() || !xb.isnofaroffindpresent() || !xc.isnofaroffindpresent() ) && xconsist )
    {
        // faroff content is not compatible with xconst shortcut

        xconsist = 0;
    }

    if ( !xconsist )
    {
        if ( assumreal && !inding && !scaling )
        {
            threeProductAssumeReal(res.force_double(),xa,xb,xc);
        }

        else
        {
                 if ( ( inding == 0 ) && ( scaling == 0 ) ) {        threeProduct      (res,         xa,xb,xc       ); }
            else if ( ( inding == 0 ) && ( scaling == 3 ) ) {        threeProductScaled(res,         xa,xb,xc,dScale); }
            else if ( ( inding == 1 ) && ( scaling == 0 ) ) { indexedthreeProduct      (res,dIndexes,xa,xb,xc       ); }
            else if ( ( inding == 1 ) && ( scaling == 3 ) ) { indexedthreeProductScaled(res,dIndexes,xa,xb,xc,dScale); }

            else
            {
                throw("Unknown three product type.");
            }
        }
    }

    else
    {
        retVector<gentype> tmpvxa;
        retVector<gentype> tmpvxb;
        retVector<gentype> tmpvxc;

        const Vector<gentype> &xxa = xa(xa.ind(),tmpvxa);
        const Vector<gentype> &xxb = xb(xb.ind(),tmpvxb);
        const Vector<gentype> &xxc = xc(xc.ind(),tmpvxc);

        if ( assumreal && !inding && !scaling )
        {
            threeProductAssumeReal(res.force_double(),xxa,xxb,xxc);
        }

        else
        {
            retVector<gentype> tmpva;

                 if ( ( inding == 0 ) && ( scaling == 0 ) ) {        threeProduct      (res,         xxa,xxb,xxc                           ); }
            else if ( ( inding == 0 ) && ( scaling == 3 ) ) {        threeProductScaled(res,         xxa,xxb,xxc,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( scaling == 0 ) ) { indexedthreeProduct      (res,dIndexes,xxa,xxb,xxc                           ); }
            else if ( ( inding == 1 ) && ( scaling == 3 ) ) { indexedthreeProductScaled(res,dIndexes,xxa,xxb,xxc,dScale(dScale.ind(),tmpva)); }

            else
            {
                throw("Unknown three product type.");
            }
        }
    }

    return;
}

void MercerKernel::getFourProd(gentype &res,
                               const SparseVector<gentype> &xa,
                               const SparseVector<gentype> &xb,
                               const SparseVector<gentype> &xc,
                               const SparseVector<gentype> &xd,
                               int inding, int scaling, int xconsist, int assumreal) const
{
    if ( xa.altcontent && xb.altcontent && xc.altcontent && xd.altcontent && xconsist )
    {
        // In this case the xconsist shortcut slows us down, so don't use it!

        xconsist = 0;
    }

    if ( ( !xa.isnofaroffindpresent() || !xb.isnofaroffindpresent() || !xc.isnofaroffindpresent() || !xd.isnofaroffindpresent() ) && xconsist )
    {
        // faroff content is not compatible with xconst shortcut

        xconsist = 0;
    }

    if ( !xconsist )
    {
        if ( assumreal && !inding && !scaling )
        {
            fourProductAssumeReal(res.force_double(),xa,xb,xc,xd);
        }

        else
        {
                 if ( ( inding == 0 ) && ( scaling == 0 ) ) {        fourProduct      (res,         xa,xb,xc,xd       ); }
            else if ( ( inding == 0 ) && ( scaling == 3 ) ) {        fourProductScaled(res,         xa,xb,xc,xd,dScale); }
            else if ( ( inding == 1 ) && ( scaling == 0 ) ) { indexedfourProduct      (res,dIndexes,xa,xb,xc,xd       ); }
            else if ( ( inding == 1 ) && ( scaling == 3 ) ) { indexedfourProductScaled(res,dIndexes,xa,xb,xc,xd,dScale); }

            else
            {
                throw("Unknown four product type.");
            }
        }
    }

    else
    {
        retVector<gentype> tmpvxa;
        retVector<gentype> tmpvxb;
        retVector<gentype> tmpvxc;
        retVector<gentype> tmpvxd;

        const Vector<gentype> &xxa = xa(xa.ind(),tmpvxa);
        const Vector<gentype> &xxb = xb(xb.ind(),tmpvxb);
        const Vector<gentype> &xxc = xc(xc.ind(),tmpvxc);
        const Vector<gentype> &xxd = xd(xd.ind(),tmpvxd);

        if ( assumreal && !inding && !scaling )
        {
            fourProductAssumeReal(res.force_double(),xxa,xxb,xxc,xxd);
        }

        else
        {
            retVector<gentype> tmpva;

                 if ( ( inding == 0 ) && ( scaling == 0 ) ) {        fourProduct      (res,         xxa,xxb,xxc,xxd                           ); }
            else if ( ( inding == 0 ) && ( scaling == 3 ) ) {        fourProductScaled(res,         xxa,xxb,xxc,xxd,dScale(dScale.ind(),tmpva)); }
            else if ( ( inding == 1 ) && ( scaling == 0 ) ) { indexedfourProduct      (res,dIndexes,xxa,xxb,xxc,xxd                           ); }
            else if ( ( inding == 1 ) && ( scaling == 3 ) ) { indexedfourProductScaled(res,dIndexes,xxa,xxb,xxc,xxd,dScale(dScale.ind(),tmpva)); }

            else
            {
                throw("Unknown four product type.");
            }
        }
    }

    return;
}

void MercerKernel::getmProd(gentype &res,
                            const Vector<const SparseVector<gentype> *> &x,
                            int inding, int scaling, int xconsist, int assumreal) const
{
    xconsist = 0; // Otherwise we need to search through all x, which is too time consuming

    (void) xconsist;

    if ( assumreal && !inding && !scaling )
    {
        mProductAssumeReal(res.force_double(),x);
    }

    else
    {
             if ( ( inding == 0 ) && ( scaling == 0 ) ) {        mProduct      (res,         x       ); }
        else if ( ( inding == 0 ) && ( scaling == 3 ) ) {        mProductScaled(res,         x,dScale); }
        else if ( ( inding == 1 ) && ( scaling == 0 ) ) { indexedmProduct      (res,dIndexes,x       ); }
        else if ( ( inding == 1 ) && ( scaling == 3 ) ) { indexedmProductScaled(res,dIndexes,x,dScale); }

        else
        {
            throw("Unknown m product type.");
        }
    }

    return;
}








kernInfo &operator+=(kernInfo &a, const kernInfo &b)
{
    a.usesDiff    |= b.usesDiff;
    a.usesInner   |= b.usesInner;
    a.usesNorm    |= b.usesNorm;
    a.usesVector  |= b.usesVector;
    a.usesMinDiff |= b.usesMinDiff;
    a.usesMaxDiff |= b.usesMaxDiff;

    return a;
}

std::ostream &operator<<(std::ostream &output, const kernInfo &src)
{
    output << ( src.usesDiff    ? "D" : "_" );
    output << ( src.usesInner   ? "I" : "_" );
    output << ( src.usesNorm    ? "M" : "_" );
    output << ( src.usesVector  ? "V" : "_" );
    output << ( src.usesMinDiff ? "L" : "_" );
    output << ( src.usesMaxDiff ? "U" : "_" );

    return output;
}

std::istream &operator>>(std::istream &input, kernInfo &dest)
{
    std::string buffer;

    input >> buffer;

    NiceAssert( buffer.length() == 6 );

    dest.usesDiff    = ( buffer[0] == 'D' ) ? 1 : 0;
    dest.usesInner   = ( buffer[1] == 'I' ) ? 1 : 0;
    dest.usesNorm    = ( buffer[2] == 'M' ) ? 1 : 0;
    dest.usesVector  = ( buffer[3] == 'V' ) ? 1 : 0;
    dest.usesMinDiff = ( buffer[4] == 'L' ) ? 1 : 0;
    dest.usesMaxDiff = ( buffer[5] == 'U' ) ? 1 : 0;

    return input;
}

int operator==(const kernInfo &a, const kernInfo &b)
{
    if ( a.usesDiff    != b.usesDiff    ) { return 0; }
    if ( a.usesInner   != b.usesInner   ) { return 0; }
    if ( a.usesNorm    != b.usesNorm    ) { return 0; }
    if ( a.usesVector  != b.usesVector  ) { return 0; }
    if ( a.usesMinDiff != b.usesMinDiff ) { return 0; }
    if ( a.usesMaxDiff != b.usesMaxDiff ) { return 0; }

    return 1;
}


int MercerKernel::egetparam(int ind, Vector<gentype> &val, const Vector<gentype> &xa, int ia, const Vector<gentype> &xb, int ib) const
{
    int k,res = 0;

    NiceAssert( xa.size() == xb.size() );

    val.resize(xa.size());

    for ( k = 0 ; k < xa.size() ; k++ )
    {
        res |= getparam(ind,val("&",k),xa(k),ia,xb(k),ib);
    }

    return res;
}

int MercerKernel::getparam(int ind, gentype &val, const gentype &xa, int ia, const gentype &xb, int ib) const
{
    int res = 0;

    // Function to access parameters via indexing

    NiceAssert( ia >= 0 );
    NiceAssert( ib >= 0 );

    (void) xb;
    (void) ib;

    if ( ia || ib )
    {
        val.force_null();
    }

    else if ( ind < 50 )
    {
        retVector<gentype> tmpva;

        switch ( ind )
        {
            case   0: { val = isFullNorm();           break; }
            case   1: { val = isProd();               break; }
            case   2: { val = isIndex();              break; }
            case   3: { val = isShiftedScaled();      break; }
            case   4: { val = isLeftPlain();          break; }
            case   5: { val = isRightPlain();         break; }
            case   6: { val = isLeftRightPlain();     break; }
            case   7: { val = isLeftNormal();         break; }
            case   8: { val = isRightNormal();        break; }
            case   9: { val = isLeftRightNormal();    break; }
            case  10: { val = isPartNormal();         break; }
            case  16: { val = isAltDiff();            break; }
            case  17: { val = needsmProd();           break; }
            case  18: { val = wantsXYprod();          break; }
            case  19: { val = suggestXYcache();       break; }
            case  20: { val = isIPdiffered();         break; }
            case  22: { val = size();                 break; }
            case  23: { val = getSymmetry();          break; }
            case  24: { val = cIndexes();             break; }
            case  25: { val = cShift()(tmpva);        break; }
            case  26: { val = cScale()(tmpva);        break; }
            case  29: { val = churnInner();           break; }
            case  30: { val = isKVarianceNZ();        break; }
            case  31: { val = isShifted();            break; }
            case  32: { val = isScaled();             break; }

            default:
            {
                val.force_null();
                break;
            }
        }
    }

    else if ( xa.isCastableToIntegerWithoutLoss() && ( (int) xa < size() ) )
    {
        retVector<int> tmpva;

        switch ( ind )
        {
            case  50: { val = cWeight((int) xa);               break; }
            case  51: { val = cType((int) xa);                 break; }
            case  52: { val = isNormalised((int) xa);          break; }
            case  54: { val = isChained((int) xa);             break; }
            case  56: { val = cRealConstants((int) xa);        break; }
            case  57: { val = cIntConstants((int) xa);         break; }
            case  58: { val = cRealOverwrite((int) xa)(tmpva); break; }
            case  59: { val = cIntOverwrite((int) xa)(tmpva);  break; }
            case  60: { val = getRealConstZero((int) xa);      break; }
            case  61: { val = getIntConstZero((int) xa);       break; }
            case  62: { val = isSplit((int) xa);               break; }
            case  64: { val = isMagTerm((int) xa);             break; }
            case  66: { val = isMulSplit((int) xa);            break; }

            default:
            {
                val.force_null();
                break;
            }
        }
    }

    else
    {
        val.force_null();
    }

    return res;
}






